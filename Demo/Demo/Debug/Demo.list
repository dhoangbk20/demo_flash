
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006854  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08006968  08006968  00016968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d0c  08006d0c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006d0c  08006d0c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d0c  08006d0c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08006d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001e8  08006efc  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08006efc  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f694  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235e  00000000  00000000  0002f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d04  00000000  00000000  00032cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d5b  00000000  00000000  000339cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012880  00000000  00000000  0004c727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec75  00000000  00000000  0005efa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055fc  00000000  00000000  000edc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000f3218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800694c 	.word	0x0800694c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800694c 	.word	0x0800694c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <delay_1us>:
#define LCD_ADDR 0x4E
#define ADDRESS_FLASH_TEMPE 0x0801FC00
#define ADDRESS_FLASH_HUMID 0x800FC02
/* ================= CREATE A DELAY 1us =================== */
void delay_1us(uint16_t time)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <delay_1us+0x2c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8000a9a:	bf00      	nop
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <delay_1us+0x2c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3f9      	bcc.n	8000a9c <delay_1us+0x14>
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000258 	.word	0x20000258

08000ab8 <LCD_Command>:
void LCD_Command(char cmd)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	char data_l, data_u;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f023 030f 	bic.w	r3, r3, #15
 8000ac8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	f043 030c 	orr.w	r3, r3, #12
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,(uint8_t *) data_t, 4, 100);
 8000af8:	f107 0208 	add.w	r2, r7, #8
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2304      	movs	r3, #4
 8000b02:	214e      	movs	r1, #78	; 0x4e
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <LCD_Command+0x5c>)
 8000b06:	f001 fcfd 	bl	8002504 <HAL_I2C_Master_Transmit>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000204 	.word	0x20000204

08000b18 <LCD_Data>:
void LCD_Data(char data)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	char data_l, data_u;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f023 030f 	bic.w	r3, r3, #15
 8000b28:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	f043 030d 	orr.w	r3, r3, #13
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f043 0309 	orr.w	r3, r3, #9
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	f043 030d 	orr.w	r3, r3, #13
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	f043 0309 	orr.w	r3, r3, #9
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,(uint8_t *) data_t, 4, 100);
 8000b58:	f107 0208 	add.w	r2, r7, #8
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2304      	movs	r3, #4
 8000b62:	214e      	movs	r1, #78	; 0x4e
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <LCD_Data+0x5c>)
 8000b66:	f001 fccd 	bl	8002504 <HAL_I2C_Master_Transmit>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000204 	.word	0x20000204

08000b78 <LCD_Init>:
void LCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_1us(50000);  // wait for >40ms
 8000b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b80:	f7ff ff82 	bl	8000a88 <delay_1us>
	LCD_Command(0x30);
 8000b84:	2030      	movs	r0, #48	; 0x30
 8000b86:	f7ff ff97 	bl	8000ab8 <LCD_Command>
	delay_1us(5000);  // wait for >4.1ms
 8000b8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b8e:	f7ff ff7b 	bl	8000a88 <delay_1us>
	LCD_Command (0x30);
 8000b92:	2030      	movs	r0, #48	; 0x30
 8000b94:	f7ff ff90 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);  // wait for >100us
 8000b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9c:	f7ff ff74 	bl	8000a88 <delay_1us>
	LCD_Command (0x30);
 8000ba0:	2030      	movs	r0, #48	; 0x30
 8000ba2:	f7ff ff89 	bl	8000ab8 <LCD_Command>
	delay_1us(10000);
 8000ba6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000baa:	f7ff ff6d 	bl	8000a88 <delay_1us>
	LCD_Command (0x20);  // 4bit mode
 8000bae:	2020      	movs	r0, #32
 8000bb0:	f7ff ff82 	bl	8000ab8 <LCD_Command>
	delay_1us(10000);
 8000bb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bb8:	f7ff ff66 	bl	8000a88 <delay_1us>

  // dislay initialisation
	LCD_Command (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bbc:	2028      	movs	r0, #40	; 0x28
 8000bbe:	f7ff ff7b 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc6:	f7ff ff5f 	bl	8000a88 <delay_1us>
	LCD_Command (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bca:	2008      	movs	r0, #8
 8000bcc:	f7ff ff74 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f7ff ff58 	bl	8000a88 <delay_1us>
	LCD_Command (0x01);  // clear display
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff ff6d 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be2:	f7ff ff51 	bl	8000a88 <delay_1us>
	delay_1us(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f7ff ff4d 	bl	8000a88 <delay_1us>
	LCD_Command (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f7ff ff62 	bl	8000ab8 <LCD_Command>
	delay_1us(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f7ff ff46 	bl	8000a88 <delay_1us>
	LCD_Command (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000bfc:	200c      	movs	r0, #12
 8000bfe:	f7ff ff5b 	bl	8000ab8 <LCD_Command>

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <LCD_String>:
	LCD_Command(cmd);
	LCD_Data(data);

}
void LCD_String(char *s)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	while(*s)
 8000c0e:	e007      	b.n	8000c20 <LCD_String+0x1a>
	{
		LCD_Data(*s);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff7f 	bl	8000b18 <LCD_Data>
		s++;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
	while(*s)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f3      	bne.n	8000c10 <LCD_String+0xa>
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LCD_GotoXY_String>:
void LCD_GotoXY_String(uint8_t row, uint8_t col, char* data)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	603a      	str	r2, [r7, #0]
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	71bb      	strb	r3, [r7, #6]
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <LCD_GotoXY_String+0x1a>
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	e000      	b.n	8000c4e <LCD_GotoXY_String+0x1c>
 8000c4c:	22c0      	movs	r2, #192	; 0xc0
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	4413      	add	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	3b01      	subs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
	LCD_Command(cmd);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff2c 	bl	8000ab8 <LCD_Command>
	LCD_String(data);
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f7ff ffd0 	bl	8000c06 <LCD_String>

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Flash_Erase>:
char tempe[4];
char humid[4];
char tempe_display[]="Nhiet Do: ";
char humid_display[]="Do Am: ";
void Flash_Erase(uint32_t address)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b088      	sub	sp, #32
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c76:	f000 ffbd 	bl	8001bf4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.Banks = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.PageAddress = address;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
	uint32_t err;
	HAL_FLASHEx_Erase(&EraseInitStruct, &err);
 8000c8a:	f107 020c 	add.w	r2, r7, #12
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 f895 	bl	8001dc4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c9a:	f000 ffd1 	bl	8001c40 <HAL_FLASH_Lock>
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <Flash_WriteData>:
void Flash_WriteData(uint32_t address, int value)
{
 8000ca6:	b5b0      	push	{r4, r5, r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000cb0:	f000 ffa0 	bl	8001bf4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,address,value);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	17da      	asrs	r2, r3, #31
 8000cb8:	461c      	mov	r4, r3
 8000cba:	4615      	mov	r5, r2
 8000cbc:	4622      	mov	r2, r4
 8000cbe:	462b      	mov	r3, r5
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 ff26 	bl	8001b14 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000cc8:	f000 ffba 	bl	8001c40 <HAL_FLASH_Lock>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bdb0      	pop	{r4, r5, r7, pc}

08000cd4 <Int2String>:
int Flash_ReadData(uint32_t address)
{
	return *(__IO uint16_t *)(address);
}
void Int2String(uint16_t data, char *s)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	80fb      	strh	r3, [r7, #6]
	s[0] = data/10 + 48;
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <Int2String+0x50>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3330      	adds	r3, #48	; 0x30
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	701a      	strb	r2, [r3, #0]
	s[1] = data%10 + 48;
 8000cf6:	88fa      	ldrh	r2, [r7, #6]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <Int2String+0x50>)
 8000cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8000cfe:	08d9      	lsrs	r1, r3, #3
 8000d00:	460b      	mov	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	3230      	adds	r2, #48	; 0x30
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	701a      	strb	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	cccccccd 	.word	0xcccccccd

08000d28 <Set_Pin_Output>:
void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
	 /*Configure GPIO pin : OUTPUT */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <Set_Pin_Output+0x40>)
 8000d5a:	f001 f8db 	bl	8001f14 <HAL_GPIO_Init>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
	 /*Configure GPIO pin : INPUT */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN;
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <Set_Pin_Input+0x40>)
 8000d9e:	f001 f8b9 	bl	8001f14 <HAL_GPIO_Init>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <DHT11_Init>:
/* ======================== DHT11 ========================== */
#define DHT11_PORT GPIOB
#define DHT11_PIN GPIO_PIN_9
void DHT11_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <DHT11_Init+0x44>)
 8000dba:	f7ff ffb5 	bl	8000d28 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <DHT11_Init+0x44>)
 8000dc6:	f001 fa40 	bl	800224a <HAL_GPIO_WritePin>
	delay_1us(18000);
 8000dca:	f244 6050 	movw	r0, #18000	; 0x4650
 8000dce:	f7ff fe5b 	bl	8000a88 <delay_1us>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <DHT11_Init+0x44>)
 8000dda:	f001 fa36 	bl	800224a <HAL_GPIO_WritePin>
	delay_1us(20);
 8000dde:	2014      	movs	r0, #20
 8000de0:	f7ff fe52 	bl	8000a88 <delay_1us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <DHT11_Init+0x44>)
 8000dea:	f7ff ffbf 	bl	8000d6c <Set_Pin_Input>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010c00 	.word	0x40010c00

08000df8 <DHT11_Check>:
uint8_t DHT11_Check(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
	delay_1us(40);
 8000e02:	2028      	movs	r0, #40	; 0x28
 8000e04:	f7ff fe40 	bl	8000a88 <delay_1us>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <DHT11_Check+0x5c>)
 8000e0e:	f001 fa05 	bl	800221c <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10f      	bne.n	8000e38 <DHT11_Check+0x40>
	{
		delay_1us(80);
 8000e18:	2050      	movs	r0, #80	; 0x50
 8000e1a:	f7ff fe35 	bl	8000a88 <delay_1us>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) response = 1;
 8000e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <DHT11_Check+0x5c>)
 8000e24:	f001 f9fa 	bl	800221c <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <DHT11_Check+0x3c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	e001      	b.n	8000e38 <DHT11_Check+0x40>
		else response = -1;
 8000e34:	23ff      	movs	r3, #255	; 0xff
 8000e36:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000e38:	bf00      	nop
 8000e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <DHT11_Check+0x5c>)
 8000e40:	f001 f9ec 	bl	800221c <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f7      	bne.n	8000e3a <DHT11_Check+0x42>

	return response;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <DHT11_Read>:
uint8_t DHT11_Read(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71bb      	strb	r3, [r7, #6]
 8000e62:	e03a      	b.n	8000eda <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000e64:	bf00      	nop
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4820      	ldr	r0, [pc, #128]	; (8000eec <DHT11_Read+0x94>)
 8000e6c:	f001 f9d6 	bl	800221c <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f7      	beq.n	8000e66 <DHT11_Read+0xe>
		delay_1us(40);   // wait for 40 us
 8000e76:	2028      	movs	r0, #40	; 0x28
 8000e78:	f7ff fe06 	bl	8000a88 <delay_1us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	481a      	ldr	r0, [pc, #104]	; (8000eec <DHT11_Read+0x94>)
 8000e82:	f001 f9cb 	bl	800221c <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10e      	bne.n	8000eaa <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2201      	movs	r2, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	e00b      	b.n	8000ec2 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	f1c3 0307 	rsb	r3, r3, #7
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000ec2:	bf00      	nop
 8000ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <DHT11_Read+0x94>)
 8000eca:	f001 f9a7 	bl	800221c <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f7      	bne.n	8000ec4 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d9c1      	bls.n	8000e64 <DHT11_Read+0xc>
	}
	return i;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010c00 	.word	0x40010c00

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim3.Instance)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b53      	ldr	r3, [pc, #332]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 809f 	bne.w	8001044 <HAL_TIM_PeriodElapsedCallback+0x154>
 {
	  DHT11_Init();
 8000f06:	f7ff ff53 	bl	8000db0 <DHT11_Init>
	  check = DHT11_Check();
 8000f0a:	f7ff ff75 	bl	8000df8 <DHT11_Check>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f14:	701a      	strb	r2, [r3, #0]
	  Humidity_byte1 = DHT11_Read();
 8000f16:	f7ff ff9f 	bl	8000e58 <DHT11_Read>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f20:	701a      	strb	r2, [r3, #0]
	  Humidity_byte2 = DHT11_Read();
 8000f22:	f7ff ff99 	bl	8000e58 <DHT11_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	  Temperature_byte1 = DHT11_Read();
 8000f2e:	f7ff ff93 	bl	8000e58 <DHT11_Read>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f38:	701a      	strb	r2, [r3, #0]
	  Temperature_byte2 = DHT11_Read();
 8000f3a:	f7ff ff8d 	bl	8000e58 <DHT11_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f44:	701a      	strb	r2, [r3, #0]
	  checksum = DHT11_Read();
 8000f46:	f7ff ff87 	bl	8000e58 <DHT11_Read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b45      	ldr	r3, [pc, #276]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f50:	701a      	strb	r2, [r3, #0]

	  humidity = Humidity_byte1;
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f5a:	801a      	strh	r2, [r3, #0]
	  temperature = Temperature_byte1;
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f64:	801a      	strh	r2, [r3, #0]
	  Int2String(humidity, humid);
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	4941      	ldr	r1, [pc, #260]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff feb1 	bl	8000cd4 <Int2String>
	  LCD_GotoXY_String(2, 7, humid);
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f74:	2107      	movs	r1, #7
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff fe5b 	bl	8000c32 <LCD_GotoXY_String>
	  Int2String(temperature, tempe);
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	493c      	ldr	r1, [pc, #240]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fea6 	bl	8000cd4 <Int2String>
	  LCD_GotoXY_String(1, 10, tempe);
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f8a:	210a      	movs	r1, #10
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f7ff fe50 	bl	8000c32 <LCD_GotoXY_String>
	  Flash_Erase(ADDRESS_FLASH_TEMPE);
 8000f92:	4839      	ldr	r0, [pc, #228]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f94:	f7ff fe6b 	bl	8000c6e <Flash_Erase>
	  Flash_WriteData(ADDRESS_FLASH_TEMPE,temperature);
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4836      	ldr	r0, [pc, #216]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fa0:	f7ff fe81 	bl	8000ca6 <Flash_WriteData>

	  	  //Flash_Erase(ADDRESS_FLASH);
	  Flash_WriteData(ADDRESS_FLASH_HUMID,humidity);
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4834      	ldr	r0, [pc, #208]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fac:	f7ff fe7b 	bl	8000ca6 <Flash_WriteData>
	  /* Convert temperature and humidity data to transmit through UART */
	  txbuffer[0] = temperature/10+48;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	4a32      	ldr	r2, [pc, #200]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3330      	adds	r3, #48	; 0x30
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	  txbuffer[1] = temperature%10+48;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fce:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd2:	08d9      	lsrs	r1, r3, #3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	3330      	adds	r3, #48	; 0x30
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fe8:	705a      	strb	r2, [r3, #1]
	  txbuffer[2] = '/';
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fec:	222f      	movs	r2, #47	; 0x2f
 8000fee:	709a      	strb	r2, [r3, #2]
	  txbuffer[3] = humidity/10+48;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3330      	adds	r3, #48	; 0x30
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001006:	70da      	strb	r2, [r3, #3]
	  txbuffer[4] = humidity%10+48;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800100e:	fba3 1302 	umull	r1, r3, r3, r2
 8001012:	08d9      	lsrs	r1, r3, #3
 8001014:	460b      	mov	r3, r1
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3330      	adds	r3, #48	; 0x30
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001028:	711a      	strb	r2, [r3, #4]
	  txbuffer[5] = '\r';
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800102c:	220d      	movs	r2, #13
 800102e:	715a      	strb	r2, [r3, #5]
	  txbuffer[6] = '\n';
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001032:	220a      	movs	r2, #10
 8001034:	719a      	strb	r2, [r3, #6]

	  HAL_UART_Transmit(&huart1,txbuffer,sizeof(txbuffer),1000);
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2207      	movs	r2, #7
 800103c:	4911      	ldr	r1, [pc, #68]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001040:	f002 fe60 	bl	8003d04 <HAL_UART_Transmit>
 }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200002a0 	.word	0x200002a0
 8001050:	2000033a 	.word	0x2000033a
 8001054:	20000332 	.word	0x20000332
 8001058:	20000333 	.word	0x20000333
 800105c:	20000330 	.word	0x20000330
 8001060:	20000331 	.word	0x20000331
 8001064:	20000334 	.word	0x20000334
 8001068:	20000336 	.word	0x20000336
 800106c:	20000338 	.word	0x20000338
 8001070:	20000348 	.word	0x20000348
 8001074:	20000344 	.word	0x20000344
 8001078:	0801fc00 	.word	0x0801fc00
 800107c:	0800fc02 	.word	0x0800fc02
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	2000033c 	.word	0x2000033c
 8001088:	200002e8 	.word	0x200002e8

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 fbd0 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f832 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 f968 	bl	800136c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800109c:	f000 f93c 	bl	8001318 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010a0:	f000 f872 	bl	8001188 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010a4:	f000 f89e 	bl	80011e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a8:	f000 f8e8 	bl	800127c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart1,txbuffer,sizeof(txbuffer),1000);
  HAL_TIM_Base_Start(&htim2);
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <main+0x58>)
 80010ae:	f002 f9e1 	bl	8003474 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <main+0x5c>)
 80010b4:	f002 fa28 	bl	8003508 <HAL_TIM_Base_Start_IT>
  LCD_Init();
 80010b8:	f7ff fd5e 	bl	8000b78 <LCD_Init>
  LCD_String(tempe_display);
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <main+0x60>)
 80010be:	f7ff fda2 	bl	8000c06 <LCD_String>
  LCD_GotoXY_String(2,1,humid_display);
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <main+0x64>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff fdb3 	bl	8000c32 <LCD_GotoXY_String>
  LCD_GotoXY_String(1,13,"*C");
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <main+0x68>)
 80010ce:	210d      	movs	r1, #13
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fdae 	bl	8000c32 <LCD_GotoXY_String>
  LCD_GotoXY_String(2,10,"%");
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <main+0x6c>)
 80010d8:	210a      	movs	r1, #10
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fda9 	bl	8000c32 <LCD_GotoXY_String>
  // tickstart = HAL_GetTick();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0x54>
 80010e2:	bf00      	nop
 80010e4:	20000258 	.word	0x20000258
 80010e8:	200002a0 	.word	0x200002a0
 80010ec:	20000000 	.word	0x20000000
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	08006968 	.word	0x08006968
 80010f8:	0800696c 	.word	0x0800696c

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fcdd 	bl	8004aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001126:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800113a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fd35 	bl	8002bb4 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001150:	f000 f958 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2101      	movs	r1, #1
 800116e:	4618      	mov	r0, r3
 8001170:	f001 ffa2 	bl	80030b8 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800117a:	f000 f943 	bl	8001404 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3740      	adds	r7, #64	; 0x40
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f001 f859 	bl	800227c <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 f918 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000204 	.word	0x20000204
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_TIM2_Init+0x94>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_TIM2_Init+0x94>)
 800120a:	2227      	movs	r2, #39	; 0x27
 800120c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM2_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_TIM2_Init+0x94>)
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_TIM2_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_TIM2_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <MX_TIM2_Init+0x94>)
 800122a:	f002 f8d3 	bl	80033d4 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001234:	f000 f8e6 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_TIM2_Init+0x94>)
 8001246:	f002 fab9 	bl	80037bc <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 f8d8 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM2_Init+0x94>)
 8001262:	f002 fc8f 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f8ca 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000258 	.word	0x20000258

0800127c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_TIM3_Init+0x94>)
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_TIM3_Init+0x98>)
 800129c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM3_Init+0x94>)
 80012a0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80012a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM3_Init+0x94>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_TIM3_Init+0x94>)
 80012ae:	f241 3287 	movw	r2, #4999	; 0x1387
 80012b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_TIM3_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM3_Init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <MX_TIM3_Init+0x94>)
 80012c2:	f002 f887 	bl	80033d4 <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012cc:	f000 f89a 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_TIM3_Init+0x94>)
 80012de:	f002 fa6d 	bl	80037bc <HAL_TIM_ConfigClockSource>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012e8:	f000 f88c 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_TIM3_Init+0x94>)
 80012fa:	f002 fc43 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001304:	f000 f87e 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002a0 	.word	0x200002a0
 8001314:	40000400 	.word	0x40000400

08001318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_USART1_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001350:	f002 fc88 	bl	8003c64 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f000 f853 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002e8 	.word	0x200002e8
 8001368:	40013800 	.word	0x40013800

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_GPIO_Init+0x90>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <MX_GPIO_Init+0x90>)
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_GPIO_Init+0x90>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_GPIO_Init+0x90>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <MX_GPIO_Init+0x90>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_GPIO_Init+0x90>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_GPIO_Init+0x90>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <MX_GPIO_Init+0x90>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_GPIO_Init+0x90>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_GPIO_Init+0x94>)
 80013d0:	f000 ff3b 	bl	800224a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_GPIO_Init+0x94>)
 80013ee:	f000 fd91 	bl	8001f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_MspInit+0x5c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x5c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_MspInit+0x60>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_MspInit+0x60>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_I2C_MspInit+0x70>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d123      	bne.n	80014dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_I2C_MspInit+0x74>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_I2C_MspInit+0x74>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_I2C_MspInit+0x74>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ac:	23c0      	movs	r3, #192	; 0xc0
 80014ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b0:	2312      	movs	r3, #18
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_I2C_MspInit+0x78>)
 80014c0:	f000 fd28 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x74>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_I2C_MspInit+0x74>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ce:	61d3      	str	r3, [r2, #28]
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_I2C_MspInit+0x74>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010c00 	.word	0x40010c00

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d10c      	bne.n	800151c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_TIM_Base_MspInit+0x68>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_TIM_Base_MspInit+0x68>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_TIM_Base_MspInit+0x68>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800151a:	e018      	b.n	800154e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_TIM_Base_MspInit+0x6c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d113      	bne.n	800154e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_TIM_Base_MspInit+0x68>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_TIM_Base_MspInit+0x68>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x68>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	201d      	movs	r0, #29
 8001544:	f000 faaf 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001548:	201d      	movs	r0, #29
 800154a:	f000 fac8 	bl	8001ade <HAL_NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	40000400 	.word	0x40000400

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_UART_MspInit+0x8c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d131      	bne.n	80015e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x90>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0x90>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x90>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x90>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0x90>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <HAL_UART_MspInit+0x94>)
 80015c6:	f000 fca5 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_UART_MspInit+0x94>)
 80015e0:	f000 fc98 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f93f 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM3_IRQHandler+0x10>)
 800164e:	f001 ffad 	bl	80035ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002a0 	.word	0x200002a0

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <_kill>:

int _kill(int pid, int sig)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001674:	f003 fa7c 	bl	8004b70 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	2216      	movs	r2, #22
 800167c:	601a      	str	r2, [r3, #0]
  return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_exit>:

void _exit (int status)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001692:	f04f 31ff 	mov.w	r1, #4294967295
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffe7 	bl	800166a <_kill>
  while (1) {}    /* Make sure we hang here */
 800169c:	e7fe      	b.n	800169c <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
  }

  return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
  }
  return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_close>:

int _close(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_isatty>:

int _isatty(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f003 f9e6 	bl	8004b70 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	2000034c 	.word	0x2000034c
 80017d8:	200004c8 	.word	0x200004c8

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 80017e8:	f7ff fff8 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001804:	4c09      	ldr	r4, [pc, #36]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 f9b3 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fc39 	bl	800108c <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001824:	08006d14 	.word	0x08006d14
  ldr r2, =_sbss
 8001828:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800182c:	200004c4 	.word	0x200004c4

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f923 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fdde 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f93b 	bl	8001afa <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f903 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000014 	.word	0x20000014
 80018b8:	2000001c 	.word	0x2000001c
 80018bc:	20000018 	.word	0x20000018

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	2000001c 	.word	0x2000001c
 80018e0:	20000350 	.word	0x20000350

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000350 	.word	0x20000350

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4906      	ldr	r1, [pc, #24]	; (8001990 <__NVIC_EnableIRQ+0x34>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff90 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff2d 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff42 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff90 	bl	80019e8 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff35 	bl	800195c <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_FLASH_Program+0xd8>)
 8001b30:	7e1b      	ldrb	r3, [r3, #24]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_FLASH_Program+0x26>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e054      	b.n	8001be4 <HAL_FLASH_Program+0xd0>
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_FLASH_Program+0xd8>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b44:	f000 f8a8 	bl	8001c98 <FLASH_WaitForLastOperation>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d144      	bne.n	8001bdc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	757b      	strb	r3, [r7, #21]
 8001b5c:	e007      	b.n	8001b6e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d102      	bne.n	8001b6a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001b64:	2302      	movs	r3, #2
 8001b66:	757b      	strb	r3, [r7, #21]
 8001b68:	e001      	b.n	8001b6e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75bb      	strb	r3, [r7, #22]
 8001b72:	e02d      	b.n	8001bd0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b74:	7dbb      	ldrb	r3, [r7, #22]
 8001b76:	005a      	lsls	r2, r3, #1
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	eb02 0c03 	add.w	ip, r2, r3
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	0119      	lsls	r1, r3, #4
 8001b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b86:	f1c1 0620 	rsb	r6, r1, #32
 8001b8a:	f1a1 0020 	sub.w	r0, r1, #32
 8001b8e:	fa22 f401 	lsr.w	r4, r2, r1
 8001b92:	fa03 f606 	lsl.w	r6, r3, r6
 8001b96:	4334      	orrs	r4, r6
 8001b98:	fa23 f000 	lsr.w	r0, r3, r0
 8001b9c:	4304      	orrs	r4, r0
 8001b9e:	fa23 f501 	lsr.w	r5, r3, r1
 8001ba2:	b2a3      	uxth	r3, r4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4660      	mov	r0, ip
 8001ba8:	f000 f85a 	bl	8001c60 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bb0:	f000 f872 	bl	8001c98 <FLASH_WaitForLastOperation>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_FLASH_Program+0xdc>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_FLASH_Program+0xdc>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001bca:	7dbb      	ldrb	r3, [r7, #22]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	75bb      	strb	r3, [r7, #22]
 8001bd0:	7dba      	ldrb	r2, [r7, #22]
 8001bd2:	7d7b      	ldrb	r3, [r7, #21]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3cd      	bcc.n	8001b74 <HAL_FLASH_Program+0x60>
 8001bd8:	e000      	b.n	8001bdc <HAL_FLASH_Program+0xc8>
      {
        break;
 8001bda:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_FLASH_Program+0xd8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	761a      	strb	r2, [r3, #24]

  return status;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bec:	20000358 	.word	0x20000358
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_FLASH_Unlock+0x40>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00d      	beq.n	8001c26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_FLASH_Unlock+0x40>)
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_FLASH_Unlock+0x44>)
 8001c0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_FLASH_Unlock+0x40>)
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_FLASH_Unlock+0x48>)
 8001c14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_FLASH_Unlock+0x40>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000
 8001c38:	45670123 	.word	0x45670123
 8001c3c:	cdef89ab 	.word	0xcdef89ab

08001c40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_FLASH_Lock+0x1c>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_FLASH_Lock+0x1c>)
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000

08001c60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <FLASH_Program_HalfWord+0x30>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <FLASH_Program_HalfWord+0x34>)
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <FLASH_Program_HalfWord+0x34>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	887a      	ldrh	r2, [r7, #2]
 8001c82:	801a      	strh	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000358 	.word	0x20000358
 8001c94:	40022000 	.word	0x40022000

08001c98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fe20 	bl	80018e4 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ca6:	e010      	b.n	8001cca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cae:	d00c      	beq.n	8001cca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <FLASH_WaitForLastOperation+0x2e>
 8001cb6:	f7ff fe15 	bl	80018e4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d201      	bcs.n	8001cca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e025      	b.n	8001d16 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <FLASH_WaitForLastOperation+0x88>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e8      	bne.n	8001ca8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <FLASH_WaitForLastOperation+0x88>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <FLASH_WaitForLastOperation+0x88>)
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <FLASH_WaitForLastOperation+0x88>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10b      	bne.n	8001d0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <FLASH_WaitForLastOperation+0x88>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <FLASH_WaitForLastOperation+0x88>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d0c:	f000 f80a 	bl	8001d24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000

08001d24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <FLASH_SetErrorCode+0x9c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <FLASH_SetErrorCode+0x9c>)
 8001d44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <FLASH_SetErrorCode+0x9c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <FLASH_SetErrorCode+0x9c>)
 8001d64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <FLASH_SetErrorCode+0x9c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <FLASH_SetErrorCode+0x9c>)
 8001d84:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f240 1201 	movw	r2, #257	; 0x101
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d106      	bne.n	8001daa <FLASH_SetErrorCode+0x86>
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	61d3      	str	r3, [r2, #28]
}  
 8001da8:	e002      	b.n	8001db0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <FLASH_SetErrorCode+0x98>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60d3      	str	r3, [r2, #12]
}  
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	20000358 	.word	0x20000358

08001dc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_FLASHEx_Erase+0xd0>)
 8001dd8:	7e1b      	ldrb	r3, [r3, #24]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_FLASHEx_Erase+0x1e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e053      	b.n	8001e8a <HAL_FLASHEx_Erase+0xc6>
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_FLASHEx_Erase+0xd0>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d116      	bne.n	8001e1e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001df0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001df4:	f7ff ff50 	bl	8001c98 <FLASH_WaitForLastOperation>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d141      	bne.n	8001e82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 f84c 	bl	8001e9c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e08:	f7ff ff46 	bl	8001c98 <FLASH_WaitForLastOperation>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_FLASHEx_Erase+0xd4>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_FLASHEx_Erase+0xd4>)
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	6113      	str	r3, [r2, #16]
 8001e1c:	e031      	b.n	8001e82 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001e1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e22:	f7ff ff39 	bl	8001c98 <FLASH_WaitForLastOperation>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d12a      	bne.n	8001e82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e32:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	e019      	b.n	8001e70 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001e3c:	68b8      	ldr	r0, [r7, #8]
 8001e3e:	f000 f849 	bl	8001ed4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e46:	f7ff ff27 	bl	8001c98 <FLASH_WaitForLastOperation>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_FLASHEx_Erase+0xd4>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_FLASHEx_Erase+0xd4>)
 8001e54:	f023 0302 	bic.w	r3, r3, #2
 8001e58:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	601a      	str	r2, [r3, #0]
            break;
 8001e66:	e00c      	b.n	8001e82 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	029a      	lsls	r2, r3, #10
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d3dc      	bcc.n	8001e3c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <HAL_FLASHEx_Erase+0xd0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	761a      	strb	r2, [r3, #24]

  return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000358 	.word	0x20000358
 8001e98:	40022000 	.word	0x40022000

08001e9c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <FLASH_MassErase+0x30>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <FLASH_MassErase+0x34>)
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <FLASH_MassErase+0x34>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <FLASH_MassErase+0x34>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <FLASH_MassErase+0x34>)
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000358 	.word	0x20000358
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <FLASH_PageErase+0x38>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <FLASH_PageErase+0x3c>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <FLASH_PageErase+0x3c>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <FLASH_PageErase+0x3c>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <FLASH_PageErase+0x3c>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <FLASH_PageErase+0x3c>)
 8001efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000358 	.word	0x20000358
 8001f10:	40022000 	.word	0x40022000

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b08b      	sub	sp, #44	; 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	e169      	b.n	80021fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8158 	bne.w	80021f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a9a      	ldr	r2, [pc, #616]	; (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d05e      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f50:	4a98      	ldr	r2, [pc, #608]	; (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d875      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f56:	4a98      	ldr	r2, [pc, #608]	; (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d058      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f5c:	4a96      	ldr	r2, [pc, #600]	; (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d86f      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f62:	4a96      	ldr	r2, [pc, #600]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d052      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f68:	4a94      	ldr	r2, [pc, #592]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d869      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a94      	ldr	r2, [pc, #592]	; (80021c0 <HAL_GPIO_Init+0x2ac>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04c      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f74:	4a92      	ldr	r2, [pc, #584]	; (80021c0 <HAL_GPIO_Init+0x2ac>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d863      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f7a:	4a92      	ldr	r2, [pc, #584]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d046      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f80:	4a90      	ldr	r2, [pc, #576]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d85d      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d82a      	bhi.n	8001fe0 <HAL_GPIO_Init+0xcc>
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d859      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f8e:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <HAL_GPIO_Init+0x80>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	0800200f 	.word	0x0800200f
 8001f98:	08001fe9 	.word	0x08001fe9
 8001f9c:	08001ffb 	.word	0x08001ffb
 8001fa0:	0800203d 	.word	0x0800203d
 8001fa4:	08002043 	.word	0x08002043
 8001fa8:	08002043 	.word	0x08002043
 8001fac:	08002043 	.word	0x08002043
 8001fb0:	08002043 	.word	0x08002043
 8001fb4:	08002043 	.word	0x08002043
 8001fb8:	08002043 	.word	0x08002043
 8001fbc:	08002043 	.word	0x08002043
 8001fc0:	08002043 	.word	0x08002043
 8001fc4:	08002043 	.word	0x08002043
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	08002043 	.word	0x08002043
 8001fd0:	08002043 	.word	0x08002043
 8001fd4:	08002043 	.word	0x08002043
 8001fd8:	08001ff1 	.word	0x08001ff1
 8001fdc:	08002005 	.word	0x08002005
 8001fe0:	4a79      	ldr	r2, [pc, #484]	; (80021c8 <HAL_GPIO_Init+0x2b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fe6:	e02c      	b.n	8002042 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	623b      	str	r3, [r7, #32]
          break;
 8001fee:	e029      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e024      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	3308      	adds	r3, #8
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e01f      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	330c      	adds	r3, #12
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e01a      	b.n	8002044 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002016:	2304      	movs	r3, #4
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e013      	b.n	8002044 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	611a      	str	r2, [r3, #16]
          break;
 800202e:	e009      	b.n	8002044 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002030:	2308      	movs	r3, #8
 8002032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	615a      	str	r2, [r3, #20]
          break;
 800203a:	e003      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
          break;
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x130>
          break;
 8002042:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d801      	bhi.n	800204e <HAL_GPIO_Init+0x13a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_Init+0x13e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d802      	bhi.n	8002060 <HAL_GPIO_Init+0x14c>
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x152>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3b08      	subs	r3, #8
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	210f      	movs	r1, #15
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80b1 	beq.w	80021f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002094:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ac:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <HAL_GPIO_Init+0x2c0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_GPIO_Init+0x1ec>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <HAL_GPIO_Init+0x2c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_GPIO_Init+0x1e8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3e      	ldr	r2, [pc, #248]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x1e4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3d      	ldr	r2, [pc, #244]	; (80021e0 <HAL_GPIO_Init+0x2cc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_GPIO_Init+0x1e0>
 80020f0:	2303      	movs	r3, #3
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 8002100:	2300      	movs	r3, #0
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002112:	492f      	ldr	r1, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	492c      	ldr	r1, [pc, #176]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4928      	ldr	r1, [pc, #160]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002144:	4013      	ands	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4922      	ldr	r1, [pc, #136]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	43db      	mvns	r3, r3
 800216a:	491e      	ldr	r1, [pc, #120]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800216c:	4013      	ands	r3, r2
 800216e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4918      	ldr	r1, [pc, #96]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4914      	ldr	r1, [pc, #80]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002194:	4013      	ands	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d021      	beq.n	80021e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e021      	b.n	80021f6 <HAL_GPIO_Init+0x2e2>
 80021b2:	bf00      	nop
 80021b4:	10320000 	.word	0x10320000
 80021b8:	10310000 	.word	0x10310000
 80021bc:	10220000 	.word	0x10220000
 80021c0:	10210000 	.word	0x10210000
 80021c4:	10120000 	.word	0x10120000
 80021c8:	10110000 	.word	0x10110000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40010800 	.word	0x40010800
 80021d8:	40010c00 	.word	0x40010c00
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_GPIO_Init+0x304>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4909      	ldr	r1, [pc, #36]	; (8002218 <HAL_GPIO_Init+0x304>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	3301      	adds	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f ae8e 	bne.w	8001f28 <HAL_GPIO_Init+0x14>
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	372c      	adds	r7, #44	; 0x2c
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e001      	b.n	800223e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	807b      	strh	r3, [r7, #2]
 8002256:	4613      	mov	r3, r2
 8002258:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225a:	787b      	ldrb	r3, [r7, #1]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002266:	e003      	b.n	8002270 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	041a      	lsls	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	611a      	str	r2, [r3, #16]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
	...

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e12b      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f8e6 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e0:	f001 f832 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_I2C_Init+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d807      	bhi.n	8002300 <HAL_I2C_Init+0x84>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_I2C_Init+0x278>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e006      	b.n	800230e <HAL_I2C_Init+0x92>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7d      	ldr	r2, [pc, #500]	; (80024f8 <HAL_I2C_Init+0x27c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a78      	ldr	r2, [pc, #480]	; (80024fc <HAL_I2C_Init+0x280>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <HAL_I2C_Init+0xd4>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	e009      	b.n	8002364 <HAL_I2C_Init+0xe8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_I2C_Init+0x284>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	495c      	ldr	r1, [pc, #368]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d819      	bhi.n	80023b8 <HAL_I2C_Init+0x13c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e59      	subs	r1, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_I2C_Init+0x138>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e59      	subs	r1, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	e051      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e04f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_I2C_Init+0x168>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e012      	b.n	800240a <HAL_I2C_Init+0x18e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	0099      	lsls	r1, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x196>
 800240e:	2301      	movs	r3, #1
 8002410:	e022      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_I2C_Init+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	fbb0 f3f3 	udiv	r3, r0, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6911      	ldr	r1, [r2, #16]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	000186a0 	.word	0x000186a0
 80024f4:	001e847f 	.word	0x001e847f
 80024f8:	003d08ff 	.word	0x003d08ff
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	460b      	mov	r3, r1
 8002512:	817b      	strh	r3, [r7, #10]
 8002514:	4613      	mov	r3, r2
 8002516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff f9e4 	bl	80018e4 <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	f040 80e0 	bne.w	80026ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2319      	movs	r3, #25
 8002532:	2201      	movs	r2, #1
 8002534:	4970      	ldr	r1, [pc, #448]	; (80026f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f964 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
 8002544:	e0d3      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2C_Master_Transmit+0x50>
 8002550:	2302      	movs	r3, #2
 8002552:	e0cc      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d007      	beq.n	800257a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2210      	movs	r2, #16
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	893a      	ldrh	r2, [r7, #8]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_I2C_Master_Transmit+0x1f8>)
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f89c 	bl	8002700 <I2C_MasterRequestWrite>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e08d      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025e8:	e066      	b.n	80026b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fa22 	bl	8002a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06b      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b04      	cmp	r3, #4
 8002652:	d11b      	bne.n	800268c <HAL_I2C_Master_Transmit+0x188>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa19 	bl	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01a      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d194      	bne.n	80025ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	00100002 	.word	0x00100002
 80026fc:	ffff0000 	.word	0xffff0000

08002700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	460b      	mov	r3, r1
 800270e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d006      	beq.n	800272a <I2C_MasterRequestWrite+0x2a>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d003      	beq.n	800272a <I2C_MasterRequestWrite+0x2a>
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002728:	d108      	bne.n	800273c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e00b      	b.n	8002754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	2b12      	cmp	r3, #18
 8002742:	d107      	bne.n	8002754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f84f 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277a:	d103      	bne.n	8002784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e035      	b.n	80027f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002790:	d108      	bne.n	80027a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	e01b      	b.n	80027dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027a4:	897b      	ldrh	r3, [r7, #10]
 80027a6:	11db      	asrs	r3, r3, #7
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0306 	and.w	r3, r3, #6
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f063 030f 	orn	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <I2C_MasterRequestWrite+0xfc>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f898 	bl	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e010      	b.n	80027f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <I2C_MasterRequestWrite+0x100>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f888 	bl	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	00010008 	.word	0x00010008
 8002800:	00010002 	.word	0x00010002

08002804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002814:	e048      	b.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d044      	beq.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7ff f861 	bl	80018e4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d139      	bne.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	0c1b      	lsrs	r3, r3, #16
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10d      	bne.n	800285a <I2C_WaitOnFlagUntilTimeout+0x56>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	43da      	mvns	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4013      	ands	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	e00c      	b.n	8002874 <I2C_WaitOnFlagUntilTimeout+0x70>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	43da      	mvns	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	429a      	cmp	r2, r3
 8002878:	d116      	bne.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e023      	b.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	43da      	mvns	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	e00c      	b.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d093      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002906:	e071      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d123      	bne.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002930:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e067      	b.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d041      	beq.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002968:	f7fe ffbc 	bl	80018e4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d302      	bcc.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d136      	bne.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10c      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e00b      	b.n	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e021      	b.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10c      	bne.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e00b      	b.n	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f af6d 	bne.w	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a44:	e034      	b.n	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f886 	bl	8002b58 <I2C_IsAcknowledgeFailed>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e034      	b.n	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d028      	beq.n	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7fe ff41 	bl	80018e4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11d      	bne.n	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d016      	beq.n	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e007      	b.n	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b80      	cmp	r3, #128	; 0x80
 8002abc:	d1c3      	bne.n	8002a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad4:	e034      	b.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f83e 	bl	8002b58 <I2C_IsAcknowledgeFailed>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e034      	b.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d028      	beq.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe fef9 	bl	80018e4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11d      	bne.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d016      	beq.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d1c3      	bne.n	8002ad6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d11b      	bne.n	8002ba8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e272      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8087 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd4:	4b92      	ldr	r3, [pc, #584]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be0:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d112      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
 8002bec:	4b8c      	ldr	r3, [pc, #560]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d06c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x12c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d168      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e24c      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x76>
 8002c1c:	4b80      	ldr	r3, [pc, #512]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7f      	ldr	r2, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e02e      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x98>
 8002c32:	4b7b      	ldr	r3, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7a      	ldr	r2, [pc, #488]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a77      	ldr	r2, [pc, #476]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0xbc>
 8002c56:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a71      	ldr	r2, [pc, #452]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c70:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a67      	ldr	r2, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fe28 	bl	80018e4 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe fe24 	bl	80018e4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e200      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xe4>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fe14 	bl	80018e4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fe10 	bl	80018e4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1ec      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x10c>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cee:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18c>
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x176>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1c0      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4939      	ldr	r1, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e03a      	b.n	8002db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fdc9 	bl	80018e4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe fdc5 	bl	80018e4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1a1      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4927      	ldr	r1, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fda8 	bl	80018e4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fda4 	bl	80018e4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e180      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d03a      	beq.n	8002e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d019      	beq.n	8002dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fd88 	bl	80018e4 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fd84 	bl	80018e4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e160      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f000 face 	bl	8003398 <RCC_Delay>
 8002dfc:	e01c      	b.n	8002e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fe fd6e 	bl	80018e4 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe fd6a 	bl	80018e4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d908      	bls.n	8002e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e146      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	42420000 	.word	0x42420000
 8002e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b92      	ldr	r3, [pc, #584]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e9      	bne.n	8002e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a6 	beq.w	8002f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a87      	ldr	r2, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fd2b 	bl	80018e4 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe fd27 	bl	80018e4 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e103      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x312>
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a6e      	ldr	r2, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e02d      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x334>
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e01c      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x356>
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a60      	ldr	r2, [pc, #384]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a5d      	ldr	r2, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fcdb 	bl	80018e4 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe fcd7 	bl	80018e4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0b1      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ee      	beq.n	8002f32 <HAL_RCC_OscConfig+0x37e>
 8002f54:	e014      	b.n	8002f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fcc5 	bl	80018e4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe fcc1 	bl	80018e4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e09b      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ee      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a3b      	ldr	r2, [pc, #236]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8087 	beq.w	80030aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d061      	beq.n	800306c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d146      	bne.n	800303e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fc95 	bl	80018e4 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe fc91 	bl	80018e4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e06d      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4921      	ldr	r1, [pc, #132]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a19      	ldr	r1, [r3, #32]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	430b      	orrs	r3, r1
 800300a:	491b      	ldr	r1, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe fc65 	bl	80018e4 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fc61 	bl	80018e4 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e03d      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x46a>
 800303c:	e035      	b.n	80030aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fc4e 	bl	80018e4 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fc4a 	bl	80018e4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e026      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x498>
 800306a:	e01e      	b.n	80030aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e019      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_OscConfig+0x500>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	429a      	cmp	r2, r3
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4965      	ldr	r1, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800311e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fe fb9c 	bl	80018e4 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fe fb98 	bl	80018e4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e053      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d210      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fafa 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
 8003280:	08006970 	.word	0x08006970
 8003284:	20000014 	.word	0x20000014
 8003288:	20000018 	.word	0x20000018

0800328c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x30>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ba:	e027      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032be:	613b      	str	r3, [r7, #16]
      break;
 80032c0:	e027      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0c5b      	lsrs	r3, r3, #17
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ee:	fb03 f202 	mul.w	r2, r3, r2
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e004      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	613b      	str	r3, [r7, #16]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 800330e:	613b      	str	r3, [r7, #16]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	693b      	ldr	r3, [r7, #16]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	007a1200 	.word	0x007a1200
 8003328:	08006988 	.word	0x08006988
 800332c:	08006998 	.word	0x08006998
 8003330:	003d0900 	.word	0x003d0900

08003334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <HAL_RCC_GetHCLKFreq+0x10>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	20000014 	.word	0x20000014

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800334c:	f7ff fff2 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08006980 	.word	0x08006980

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003374:	f7ff ffde 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	0adb      	lsrs	r3, r3, #11
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08006980 	.word	0x08006980

08003398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <RCC_Delay+0x34>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <RCC_Delay+0x38>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a5b      	lsrs	r3, r3, #9
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b4:	bf00      	nop
  }
  while (Delay --);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	60fa      	str	r2, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f9      	bne.n	80033b4 <RCC_Delay+0x1c>
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	20000014 	.word	0x20000014
 80033d0:	10624dd3 	.word	0x10624dd3

080033d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e041      	b.n	800346a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe f878 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f000 fabe 	bl	8003994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_TIM_Base_Start+0x88>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_TIM_Base_Start+0x48>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d009      	beq.n	80034bc <HAL_TIM_Base_Start+0x48>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <HAL_TIM_Base_Start+0x8c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_TIM_Base_Start+0x48>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_TIM_Base_Start+0x90>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d111      	bne.n	80034e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d010      	beq.n	80034f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	e007      	b.n	80034f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800

08003508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e03a      	b.n	8003596 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIM_Base_Start_IT+0x98>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x58>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d009      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x58>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x58>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d111      	bne.n	8003584 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d010      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	e007      	b.n	8003594 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0202 	mvn.w	r2, #2
 80035d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f9b4 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f9a7 	bl	800394a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f9b6 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0204 	mvn.w	r2, #4
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f98a 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f97d 	bl	800394a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f98c 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0208 	mvn.w	r2, #8
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f960 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f953 	bl	800394a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f962 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0210 	mvn.w	r2, #16
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2208      	movs	r2, #8
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f936 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f929 	bl	800394a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f938 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fbe0 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d10e      	bne.n	800375c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d107      	bne.n	800375c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa7b 	bl	8003c52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8fc 	bl	8003980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0220 	mvn.w	r2, #32
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa46 	bl	8003c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_ConfigClockSource+0x1c>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e0b4      	b.n	8003942 <HAL_TIM_ConfigClockSource+0x186>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003810:	d03e      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0xd4>
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003816:	f200 8087 	bhi.w	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381e:	f000 8086 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x172>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	d87f      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d01a      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xa6>
 800382c:	2b70      	cmp	r3, #112	; 0x70
 800382e:	d87b      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d050      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003834:	2b60      	cmp	r3, #96	; 0x60
 8003836:	d877      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b50      	cmp	r3, #80	; 0x50
 800383a:	d03c      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xfa>
 800383c:	2b50      	cmp	r3, #80	; 0x50
 800383e:	d873      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d058      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d86f      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b30      	cmp	r3, #48	; 0x30
 800384a:	d064      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15a>
 800384c:	2b30      	cmp	r3, #48	; 0x30
 800384e:	d86b      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b20      	cmp	r3, #32
 8003852:	d060      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15a>
 8003854:	2b20      	cmp	r3, #32
 8003856:	d867      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05c      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15a>
 800385c:	2b10      	cmp	r3, #16
 800385e:	d05a      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	e062      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003872:	f000 f968 	bl	8003b46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	609a      	str	r2, [r3, #8]
      break;
 800388e:	e04f      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038a0:	f000 f951 	bl	8003b46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b2:	609a      	str	r2, [r3, #8]
      break;
 80038b4:	e03c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 f8c8 	bl	8003a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2150      	movs	r1, #80	; 0x50
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f91f 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 80038d4:	e02c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 f8e6 	bl	8003ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2160      	movs	r1, #96	; 0x60
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f90f 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 80038f4:	e01c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 f8a8 	bl	8003a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2140      	movs	r1, #64	; 0x40
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f8ff 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 8003914:	e00c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f000 f8f6 	bl	8003b12 <TIM_ITRx_SetConfig>
      break;
 8003926:	e003      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e000      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800392e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
	...

08003994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <TIM_Base_SetConfig+0xb8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x30>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x30>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <TIM_Base_SetConfig+0xbc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x30>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a25      	ldr	r2, [pc, #148]	; (8003a54 <TIM_Base_SetConfig+0xc0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <TIM_Base_SetConfig+0xb8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <TIM_Base_SetConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d007      	beq.n	80039f6 <TIM_Base_SetConfig+0x62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <TIM_Base_SetConfig+0xbc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_Base_SetConfig+0x62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <TIM_Base_SetConfig+0xc0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d108      	bne.n	8003a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <TIM_Base_SetConfig+0xb8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	615a      	str	r2, [r3, #20]
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800

08003a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 030a 	bic.w	r3, r3, #10
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	031b      	lsls	r3, r3, #12
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f043 0307 	orr.w	r3, r3, #7
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b087      	sub	sp, #28
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	021a      	lsls	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	609a      	str	r2, [r3, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e046      	b.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d009      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800

08003c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e042      	b.n	8003cfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fc68 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f91d 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d16d      	bne.n	8003e00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_UART_Transmit+0x2c>
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e066      	b.n	8003e02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	; 0x21
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d42:	f7fd fdcf 	bl	80018e4 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d108      	bne.n	8003d70 <HAL_UART_Transmit+0x6c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e003      	b.n	8003d78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d78:	e02a      	b.n	8003dd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f840 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e036      	b.n	8003e02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3302      	adds	r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e007      	b.n	8003dc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1cf      	bne.n	8003d7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2140      	movs	r1, #64	; 0x40
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f810 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b090      	sub	sp, #64	; 0x40
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	e050      	b.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d04c      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2a:	f7fd fd5b 	bl	80018e4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d241      	bcs.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8e:	623a      	str	r2, [r7, #32]
 8003e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00f      	b.n	8003ede <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d09f      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3740      	adds	r7, #64	; 0x40
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f22:	f023 030c 	bic.w	r3, r3, #12
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <UART_SetConfig+0x114>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7ff fa0e 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	e002      	b.n	8003f5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7ff f9f6 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <UART_SetConfig+0x118>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	0119      	lsls	r1, r3, #4
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009a      	lsls	r2, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <UART_SetConfig+0x118>)
 8003f96:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2064      	movs	r0, #100	; 0x64
 8003f9e:	fb00 f303 	mul.w	r3, r0, r3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	3332      	adds	r3, #50	; 0x32
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <UART_SetConfig+0x118>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb4:	4419      	add	r1, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <UART_SetConfig+0x118>)
 8003fce:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2064      	movs	r0, #100	; 0x64
 8003fd6:	fb00 f303 	mul.w	r3, r0, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <UART_SetConfig+0x118>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40013800 	.word	0x40013800
 8004000:	51eb851f 	.word	0x51eb851f

08004004 <__cvt>:
 8004004:	2b00      	cmp	r3, #0
 8004006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800400a:	461f      	mov	r7, r3
 800400c:	bfbb      	ittet	lt
 800400e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004012:	461f      	movlt	r7, r3
 8004014:	2300      	movge	r3, #0
 8004016:	232d      	movlt	r3, #45	; 0x2d
 8004018:	b088      	sub	sp, #32
 800401a:	4614      	mov	r4, r2
 800401c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800401e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004020:	7013      	strb	r3, [r2, #0]
 8004022:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004024:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004028:	f023 0820 	bic.w	r8, r3, #32
 800402c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004030:	d005      	beq.n	800403e <__cvt+0x3a>
 8004032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004036:	d100      	bne.n	800403a <__cvt+0x36>
 8004038:	3501      	adds	r5, #1
 800403a:	2302      	movs	r3, #2
 800403c:	e000      	b.n	8004040 <__cvt+0x3c>
 800403e:	2303      	movs	r3, #3
 8004040:	aa07      	add	r2, sp, #28
 8004042:	9204      	str	r2, [sp, #16]
 8004044:	aa06      	add	r2, sp, #24
 8004046:	e9cd a202 	strd	sl, r2, [sp, #8]
 800404a:	e9cd 3500 	strd	r3, r5, [sp]
 800404e:	4622      	mov	r2, r4
 8004050:	463b      	mov	r3, r7
 8004052:	f000 fe51 	bl	8004cf8 <_dtoa_r>
 8004056:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800405a:	4606      	mov	r6, r0
 800405c:	d102      	bne.n	8004064 <__cvt+0x60>
 800405e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004060:	07db      	lsls	r3, r3, #31
 8004062:	d522      	bpl.n	80040aa <__cvt+0xa6>
 8004064:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004068:	eb06 0905 	add.w	r9, r6, r5
 800406c:	d110      	bne.n	8004090 <__cvt+0x8c>
 800406e:	7833      	ldrb	r3, [r6, #0]
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d10a      	bne.n	800408a <__cvt+0x86>
 8004074:	2200      	movs	r2, #0
 8004076:	2300      	movs	r3, #0
 8004078:	4620      	mov	r0, r4
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8004080:	b918      	cbnz	r0, 800408a <__cvt+0x86>
 8004082:	f1c5 0501 	rsb	r5, r5, #1
 8004086:	f8ca 5000 	str.w	r5, [sl]
 800408a:	f8da 3000 	ldr.w	r3, [sl]
 800408e:	4499      	add	r9, r3
 8004090:	2200      	movs	r2, #0
 8004092:	2300      	movs	r3, #0
 8004094:	4620      	mov	r0, r4
 8004096:	4639      	mov	r1, r7
 8004098:	f7fc fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800409c:	b108      	cbz	r0, 80040a2 <__cvt+0x9e>
 800409e:	f8cd 901c 	str.w	r9, [sp, #28]
 80040a2:	2230      	movs	r2, #48	; 0x30
 80040a4:	9b07      	ldr	r3, [sp, #28]
 80040a6:	454b      	cmp	r3, r9
 80040a8:	d307      	bcc.n	80040ba <__cvt+0xb6>
 80040aa:	4630      	mov	r0, r6
 80040ac:	9b07      	ldr	r3, [sp, #28]
 80040ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	b008      	add	sp, #32
 80040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	9107      	str	r1, [sp, #28]
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e7f0      	b.n	80040a4 <__cvt+0xa0>

080040c2 <__exponent>:
 80040c2:	4603      	mov	r3, r0
 80040c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c6:	2900      	cmp	r1, #0
 80040c8:	f803 2b02 	strb.w	r2, [r3], #2
 80040cc:	bfb6      	itet	lt
 80040ce:	222d      	movlt	r2, #45	; 0x2d
 80040d0:	222b      	movge	r2, #43	; 0x2b
 80040d2:	4249      	neglt	r1, r1
 80040d4:	2909      	cmp	r1, #9
 80040d6:	7042      	strb	r2, [r0, #1]
 80040d8:	dd2a      	ble.n	8004130 <__exponent+0x6e>
 80040da:	f10d 0207 	add.w	r2, sp, #7
 80040de:	4617      	mov	r7, r2
 80040e0:	260a      	movs	r6, #10
 80040e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80040e6:	4694      	mov	ip, r2
 80040e8:	fb06 1415 	mls	r4, r6, r5, r1
 80040ec:	3430      	adds	r4, #48	; 0x30
 80040ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80040f2:	460c      	mov	r4, r1
 80040f4:	2c63      	cmp	r4, #99	; 0x63
 80040f6:	4629      	mov	r1, r5
 80040f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80040fc:	dcf1      	bgt.n	80040e2 <__exponent+0x20>
 80040fe:	3130      	adds	r1, #48	; 0x30
 8004100:	f1ac 0402 	sub.w	r4, ip, #2
 8004104:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004108:	4622      	mov	r2, r4
 800410a:	1c41      	adds	r1, r0, #1
 800410c:	42ba      	cmp	r2, r7
 800410e:	d30a      	bcc.n	8004126 <__exponent+0x64>
 8004110:	f10d 0209 	add.w	r2, sp, #9
 8004114:	eba2 020c 	sub.w	r2, r2, ip
 8004118:	42bc      	cmp	r4, r7
 800411a:	bf88      	it	hi
 800411c:	2200      	movhi	r2, #0
 800411e:	4413      	add	r3, r2
 8004120:	1a18      	subs	r0, r3, r0
 8004122:	b003      	add	sp, #12
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004126:	f812 5b01 	ldrb.w	r5, [r2], #1
 800412a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800412e:	e7ed      	b.n	800410c <__exponent+0x4a>
 8004130:	2330      	movs	r3, #48	; 0x30
 8004132:	3130      	adds	r1, #48	; 0x30
 8004134:	7083      	strb	r3, [r0, #2]
 8004136:	70c1      	strb	r1, [r0, #3]
 8004138:	1d03      	adds	r3, r0, #4
 800413a:	e7f1      	b.n	8004120 <__exponent+0x5e>

0800413c <_printf_float>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	b091      	sub	sp, #68	; 0x44
 8004142:	460c      	mov	r4, r1
 8004144:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004148:	4616      	mov	r6, r2
 800414a:	461f      	mov	r7, r3
 800414c:	4605      	mov	r5, r0
 800414e:	f000 fcc5 	bl	8004adc <_localeconv_r>
 8004152:	6803      	ldr	r3, [r0, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	9309      	str	r3, [sp, #36]	; 0x24
 8004158:	f7fb fffa 	bl	8000150 <strlen>
 800415c:	2300      	movs	r3, #0
 800415e:	930e      	str	r3, [sp, #56]	; 0x38
 8004160:	f8d8 3000 	ldr.w	r3, [r8]
 8004164:	900a      	str	r0, [sp, #40]	; 0x28
 8004166:	3307      	adds	r3, #7
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	f103 0208 	add.w	r2, r3, #8
 8004170:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004174:	f8d4 b000 	ldr.w	fp, [r4]
 8004178:	f8c8 2000 	str.w	r2, [r8]
 800417c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004180:	4652      	mov	r2, sl
 8004182:	4643      	mov	r3, r8
 8004184:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004188:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800418c:	930b      	str	r3, [sp, #44]	; 0x2c
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	4650      	mov	r0, sl
 8004194:	4b9c      	ldr	r3, [pc, #624]	; (8004408 <_printf_float+0x2cc>)
 8004196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004198:	f7fc fc38 	bl	8000a0c <__aeabi_dcmpun>
 800419c:	bb70      	cbnz	r0, 80041fc <_printf_float+0xc0>
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	4650      	mov	r0, sl
 80041a4:	4b98      	ldr	r3, [pc, #608]	; (8004408 <_printf_float+0x2cc>)
 80041a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041a8:	f7fc fc12 	bl	80009d0 <__aeabi_dcmple>
 80041ac:	bb30      	cbnz	r0, 80041fc <_printf_float+0xc0>
 80041ae:	2200      	movs	r2, #0
 80041b0:	2300      	movs	r3, #0
 80041b2:	4650      	mov	r0, sl
 80041b4:	4641      	mov	r1, r8
 80041b6:	f7fc fc01 	bl	80009bc <__aeabi_dcmplt>
 80041ba:	b110      	cbz	r0, 80041c2 <_printf_float+0x86>
 80041bc:	232d      	movs	r3, #45	; 0x2d
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c2:	4a92      	ldr	r2, [pc, #584]	; (800440c <_printf_float+0x2d0>)
 80041c4:	4b92      	ldr	r3, [pc, #584]	; (8004410 <_printf_float+0x2d4>)
 80041c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041ca:	bf94      	ite	ls
 80041cc:	4690      	movls	r8, r2
 80041ce:	4698      	movhi	r8, r3
 80041d0:	2303      	movs	r3, #3
 80041d2:	f04f 0a00 	mov.w	sl, #0
 80041d6:	6123      	str	r3, [r4, #16]
 80041d8:	f02b 0304 	bic.w	r3, fp, #4
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	4633      	mov	r3, r6
 80041e0:	4621      	mov	r1, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	9700      	str	r7, [sp, #0]
 80041e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80041e8:	f000 f9d6 	bl	8004598 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	f040 8090 	bne.w	8004312 <_printf_float+0x1d6>
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	b011      	add	sp, #68	; 0x44
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	4652      	mov	r2, sl
 80041fe:	4643      	mov	r3, r8
 8004200:	4650      	mov	r0, sl
 8004202:	4641      	mov	r1, r8
 8004204:	f7fc fc02 	bl	8000a0c <__aeabi_dcmpun>
 8004208:	b148      	cbz	r0, 800421e <_printf_float+0xe2>
 800420a:	f1b8 0f00 	cmp.w	r8, #0
 800420e:	bfb8      	it	lt
 8004210:	232d      	movlt	r3, #45	; 0x2d
 8004212:	4a80      	ldr	r2, [pc, #512]	; (8004414 <_printf_float+0x2d8>)
 8004214:	bfb8      	it	lt
 8004216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800421a:	4b7f      	ldr	r3, [pc, #508]	; (8004418 <_printf_float+0x2dc>)
 800421c:	e7d3      	b.n	80041c6 <_printf_float+0x8a>
 800421e:	6863      	ldr	r3, [r4, #4]
 8004220:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	d142      	bne.n	80042ae <_printf_float+0x172>
 8004228:	2306      	movs	r3, #6
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	9206      	str	r2, [sp, #24]
 8004230:	aa0e      	add	r2, sp, #56	; 0x38
 8004232:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004236:	aa0d      	add	r2, sp, #52	; 0x34
 8004238:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800423c:	9203      	str	r2, [sp, #12]
 800423e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004242:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	4652      	mov	r2, sl
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	4628      	mov	r0, r5
 8004250:	4643      	mov	r3, r8
 8004252:	910b      	str	r1, [sp, #44]	; 0x2c
 8004254:	f7ff fed6 	bl	8004004 <__cvt>
 8004258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800425a:	4680      	mov	r8, r0
 800425c:	2947      	cmp	r1, #71	; 0x47
 800425e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004260:	d108      	bne.n	8004274 <_printf_float+0x138>
 8004262:	1cc8      	adds	r0, r1, #3
 8004264:	db02      	blt.n	800426c <_printf_float+0x130>
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	4299      	cmp	r1, r3
 800426a:	dd40      	ble.n	80042ee <_printf_float+0x1b2>
 800426c:	f1a9 0902 	sub.w	r9, r9, #2
 8004270:	fa5f f989 	uxtb.w	r9, r9
 8004274:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004278:	d81f      	bhi.n	80042ba <_printf_float+0x17e>
 800427a:	464a      	mov	r2, r9
 800427c:	3901      	subs	r1, #1
 800427e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004282:	910d      	str	r1, [sp, #52]	; 0x34
 8004284:	f7ff ff1d 	bl	80040c2 <__exponent>
 8004288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800428a:	4682      	mov	sl, r0
 800428c:	1813      	adds	r3, r2, r0
 800428e:	2a01      	cmp	r2, #1
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	dc02      	bgt.n	800429a <_printf_float+0x15e>
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	07d2      	lsls	r2, r2, #31
 8004298:	d501      	bpl.n	800429e <_printf_float+0x162>
 800429a:	3301      	adds	r3, #1
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d09b      	beq.n	80041de <_printf_float+0xa2>
 80042a6:	232d      	movs	r3, #45	; 0x2d
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	e797      	b.n	80041de <_printf_float+0xa2>
 80042ae:	2947      	cmp	r1, #71	; 0x47
 80042b0:	d1bc      	bne.n	800422c <_printf_float+0xf0>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ba      	bne.n	800422c <_printf_float+0xf0>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e7b7      	b.n	800422a <_printf_float+0xee>
 80042ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042be:	d118      	bne.n	80042f2 <_printf_float+0x1b6>
 80042c0:	2900      	cmp	r1, #0
 80042c2:	6863      	ldr	r3, [r4, #4]
 80042c4:	dd0b      	ble.n	80042de <_printf_float+0x1a2>
 80042c6:	6121      	str	r1, [r4, #16]
 80042c8:	b913      	cbnz	r3, 80042d0 <_printf_float+0x194>
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	07d0      	lsls	r0, r2, #31
 80042ce:	d502      	bpl.n	80042d6 <_printf_float+0x19a>
 80042d0:	3301      	adds	r3, #1
 80042d2:	440b      	add	r3, r1
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	f04f 0a00 	mov.w	sl, #0
 80042da:	65a1      	str	r1, [r4, #88]	; 0x58
 80042dc:	e7df      	b.n	800429e <_printf_float+0x162>
 80042de:	b913      	cbnz	r3, 80042e6 <_printf_float+0x1aa>
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	07d2      	lsls	r2, r2, #31
 80042e4:	d501      	bpl.n	80042ea <_printf_float+0x1ae>
 80042e6:	3302      	adds	r3, #2
 80042e8:	e7f4      	b.n	80042d4 <_printf_float+0x198>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e7f2      	b.n	80042d4 <_printf_float+0x198>
 80042ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042f4:	4299      	cmp	r1, r3
 80042f6:	db05      	blt.n	8004304 <_printf_float+0x1c8>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	6121      	str	r1, [r4, #16]
 80042fc:	07d8      	lsls	r0, r3, #31
 80042fe:	d5ea      	bpl.n	80042d6 <_printf_float+0x19a>
 8004300:	1c4b      	adds	r3, r1, #1
 8004302:	e7e7      	b.n	80042d4 <_printf_float+0x198>
 8004304:	2900      	cmp	r1, #0
 8004306:	bfcc      	ite	gt
 8004308:	2201      	movgt	r2, #1
 800430a:	f1c1 0202 	rsble	r2, r1, #2
 800430e:	4413      	add	r3, r2
 8004310:	e7e0      	b.n	80042d4 <_printf_float+0x198>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	055a      	lsls	r2, r3, #21
 8004316:	d407      	bmi.n	8004328 <_printf_float+0x1ec>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	4642      	mov	r2, r8
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	d12b      	bne.n	800437e <_printf_float+0x242>
 8004326:	e764      	b.n	80041f2 <_printf_float+0xb6>
 8004328:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800432c:	f240 80dd 	bls.w	80044ea <_printf_float+0x3ae>
 8004330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004334:	2200      	movs	r2, #0
 8004336:	2300      	movs	r3, #0
 8004338:	f7fc fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800433c:	2800      	cmp	r0, #0
 800433e:	d033      	beq.n	80043a8 <_printf_float+0x26c>
 8004340:	2301      	movs	r3, #1
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	4a35      	ldr	r2, [pc, #212]	; (800441c <_printf_float+0x2e0>)
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f af51 	beq.w	80041f2 <_printf_float+0xb6>
 8004350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004354:	429a      	cmp	r2, r3
 8004356:	db02      	blt.n	800435e <_printf_float+0x222>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	07d8      	lsls	r0, r3, #31
 800435c:	d50f      	bpl.n	800437e <_printf_float+0x242>
 800435e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f af42 	beq.w	80041f2 <_printf_float+0xb6>
 800436e:	f04f 0800 	mov.w	r8, #0
 8004372:	f104 091a 	add.w	r9, r4, #26
 8004376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004378:	3b01      	subs	r3, #1
 800437a:	4543      	cmp	r3, r8
 800437c:	dc09      	bgt.n	8004392 <_printf_float+0x256>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	079b      	lsls	r3, r3, #30
 8004382:	f100 8104 	bmi.w	800458e <_printf_float+0x452>
 8004386:	68e0      	ldr	r0, [r4, #12]
 8004388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800438a:	4298      	cmp	r0, r3
 800438c:	bfb8      	it	lt
 800438e:	4618      	movlt	r0, r3
 8004390:	e731      	b.n	80041f6 <_printf_float+0xba>
 8004392:	2301      	movs	r3, #1
 8004394:	464a      	mov	r2, r9
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f af28 	beq.w	80041f2 <_printf_float+0xb6>
 80043a2:	f108 0801 	add.w	r8, r8, #1
 80043a6:	e7e6      	b.n	8004376 <_printf_float+0x23a>
 80043a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dc38      	bgt.n	8004420 <_printf_float+0x2e4>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <_printf_float+0x2e0>)
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f af1a 	beq.w	80041f2 <_printf_float+0xb6>
 80043be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d102      	bne.n	80043cc <_printf_float+0x290>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07d9      	lsls	r1, r3, #31
 80043ca:	d5d8      	bpl.n	800437e <_printf_float+0x242>
 80043cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f af0b 	beq.w	80041f2 <_printf_float+0xb6>
 80043dc:	f04f 0900 	mov.w	r9, #0
 80043e0:	f104 0a1a 	add.w	sl, r4, #26
 80043e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043e6:	425b      	negs	r3, r3
 80043e8:	454b      	cmp	r3, r9
 80043ea:	dc01      	bgt.n	80043f0 <_printf_float+0x2b4>
 80043ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ee:	e794      	b.n	800431a <_printf_float+0x1de>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4652      	mov	r2, sl
 80043f4:	4631      	mov	r1, r6
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	f43f aef9 	beq.w	80041f2 <_printf_float+0xb6>
 8004400:	f109 0901 	add.w	r9, r9, #1
 8004404:	e7ee      	b.n	80043e4 <_printf_float+0x2a8>
 8004406:	bf00      	nop
 8004408:	7fefffff 	.word	0x7fefffff
 800440c:	0800699a 	.word	0x0800699a
 8004410:	0800699e 	.word	0x0800699e
 8004414:	080069a2 	.word	0x080069a2
 8004418:	080069a6 	.word	0x080069a6
 800441c:	080069aa 	.word	0x080069aa
 8004420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004424:	429a      	cmp	r2, r3
 8004426:	bfa8      	it	ge
 8004428:	461a      	movge	r2, r3
 800442a:	2a00      	cmp	r2, #0
 800442c:	4691      	mov	r9, r2
 800442e:	dc37      	bgt.n	80044a0 <_printf_float+0x364>
 8004430:	f04f 0b00 	mov.w	fp, #0
 8004434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004438:	f104 021a 	add.w	r2, r4, #26
 800443c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004440:	ebaa 0309 	sub.w	r3, sl, r9
 8004444:	455b      	cmp	r3, fp
 8004446:	dc33      	bgt.n	80044b0 <_printf_float+0x374>
 8004448:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800444c:	429a      	cmp	r2, r3
 800444e:	db3b      	blt.n	80044c8 <_printf_float+0x38c>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	07da      	lsls	r2, r3, #31
 8004454:	d438      	bmi.n	80044c8 <_printf_float+0x38c>
 8004456:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800445a:	eba2 0903 	sub.w	r9, r2, r3
 800445e:	eba2 020a 	sub.w	r2, r2, sl
 8004462:	4591      	cmp	r9, r2
 8004464:	bfa8      	it	ge
 8004466:	4691      	movge	r9, r2
 8004468:	f1b9 0f00 	cmp.w	r9, #0
 800446c:	dc34      	bgt.n	80044d8 <_printf_float+0x39c>
 800446e:	f04f 0800 	mov.w	r8, #0
 8004472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004476:	f104 0a1a 	add.w	sl, r4, #26
 800447a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	eba3 0309 	sub.w	r3, r3, r9
 8004484:	4543      	cmp	r3, r8
 8004486:	f77f af7a 	ble.w	800437e <_printf_float+0x242>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f aeac 	beq.w	80041f2 <_printf_float+0xb6>
 800449a:	f108 0801 	add.w	r8, r8, #1
 800449e:	e7ec      	b.n	800447a <_printf_float+0x33e>
 80044a0:	4613      	mov	r3, r2
 80044a2:	4631      	mov	r1, r6
 80044a4:	4642      	mov	r2, r8
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	d1c0      	bne.n	8004430 <_printf_float+0x2f4>
 80044ae:	e6a0      	b.n	80041f2 <_printf_float+0xb6>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f ae99 	beq.w	80041f2 <_printf_float+0xb6>
 80044c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044c2:	f10b 0b01 	add.w	fp, fp, #1
 80044c6:	e7b9      	b.n	800443c <_printf_float+0x300>
 80044c8:	4631      	mov	r1, r6
 80044ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044ce:	4628      	mov	r0, r5
 80044d0:	47b8      	blx	r7
 80044d2:	3001      	adds	r0, #1
 80044d4:	d1bf      	bne.n	8004456 <_printf_float+0x31a>
 80044d6:	e68c      	b.n	80041f2 <_printf_float+0xb6>
 80044d8:	464b      	mov	r3, r9
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	eb08 020a 	add.w	r2, r8, sl
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	d1c2      	bne.n	800446e <_printf_float+0x332>
 80044e8:	e683      	b.n	80041f2 <_printf_float+0xb6>
 80044ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ec:	2a01      	cmp	r2, #1
 80044ee:	dc01      	bgt.n	80044f4 <_printf_float+0x3b8>
 80044f0:	07db      	lsls	r3, r3, #31
 80044f2:	d539      	bpl.n	8004568 <_printf_float+0x42c>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4642      	mov	r2, r8
 80044f8:	4631      	mov	r1, r6
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b8      	blx	r7
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f ae77 	beq.w	80041f2 <_printf_float+0xb6>
 8004504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	f43f ae6f 	beq.w	80041f2 <_printf_float+0xb6>
 8004514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004518:	2200      	movs	r2, #0
 800451a:	2300      	movs	r3, #0
 800451c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004520:	f7fc fa42 	bl	80009a8 <__aeabi_dcmpeq>
 8004524:	b9d8      	cbnz	r0, 800455e <_printf_float+0x422>
 8004526:	f109 33ff 	add.w	r3, r9, #4294967295
 800452a:	f108 0201 	add.w	r2, r8, #1
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	47b8      	blx	r7
 8004534:	3001      	adds	r0, #1
 8004536:	d10e      	bne.n	8004556 <_printf_float+0x41a>
 8004538:	e65b      	b.n	80041f2 <_printf_float+0xb6>
 800453a:	2301      	movs	r3, #1
 800453c:	464a      	mov	r2, r9
 800453e:	4631      	mov	r1, r6
 8004540:	4628      	mov	r0, r5
 8004542:	47b8      	blx	r7
 8004544:	3001      	adds	r0, #1
 8004546:	f43f ae54 	beq.w	80041f2 <_printf_float+0xb6>
 800454a:	f108 0801 	add.w	r8, r8, #1
 800454e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004550:	3b01      	subs	r3, #1
 8004552:	4543      	cmp	r3, r8
 8004554:	dcf1      	bgt.n	800453a <_printf_float+0x3fe>
 8004556:	4653      	mov	r3, sl
 8004558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800455c:	e6de      	b.n	800431c <_printf_float+0x1e0>
 800455e:	f04f 0800 	mov.w	r8, #0
 8004562:	f104 091a 	add.w	r9, r4, #26
 8004566:	e7f2      	b.n	800454e <_printf_float+0x412>
 8004568:	2301      	movs	r3, #1
 800456a:	4642      	mov	r2, r8
 800456c:	e7df      	b.n	800452e <_printf_float+0x3f2>
 800456e:	2301      	movs	r3, #1
 8004570:	464a      	mov	r2, r9
 8004572:	4631      	mov	r1, r6
 8004574:	4628      	mov	r0, r5
 8004576:	47b8      	blx	r7
 8004578:	3001      	adds	r0, #1
 800457a:	f43f ae3a 	beq.w	80041f2 <_printf_float+0xb6>
 800457e:	f108 0801 	add.w	r8, r8, #1
 8004582:	68e3      	ldr	r3, [r4, #12]
 8004584:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004586:	1a5b      	subs	r3, r3, r1
 8004588:	4543      	cmp	r3, r8
 800458a:	dcf0      	bgt.n	800456e <_printf_float+0x432>
 800458c:	e6fb      	b.n	8004386 <_printf_float+0x24a>
 800458e:	f04f 0800 	mov.w	r8, #0
 8004592:	f104 0919 	add.w	r9, r4, #25
 8004596:	e7f4      	b.n	8004582 <_printf_float+0x446>

08004598 <_printf_common>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	4616      	mov	r6, r2
 800459e:	4699      	mov	r9, r3
 80045a0:	688a      	ldr	r2, [r1, #8]
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	4607      	mov	r7, r0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	bfb8      	it	lt
 80045aa:	4613      	movlt	r3, r2
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b2:	460c      	mov	r4, r1
 80045b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b8:	b10a      	cbz	r2, 80045be <_printf_common+0x26>
 80045ba:	3301      	adds	r3, #1
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	0699      	lsls	r1, r3, #26
 80045c2:	bf42      	ittt	mi
 80045c4:	6833      	ldrmi	r3, [r6, #0]
 80045c6:	3302      	addmi	r3, #2
 80045c8:	6033      	strmi	r3, [r6, #0]
 80045ca:	6825      	ldr	r5, [r4, #0]
 80045cc:	f015 0506 	ands.w	r5, r5, #6
 80045d0:	d106      	bne.n	80045e0 <_printf_common+0x48>
 80045d2:	f104 0a19 	add.w	sl, r4, #25
 80045d6:	68e3      	ldr	r3, [r4, #12]
 80045d8:	6832      	ldr	r2, [r6, #0]
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	42ab      	cmp	r3, r5
 80045de:	dc2b      	bgt.n	8004638 <_printf_common+0xa0>
 80045e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e4:	1e13      	subs	r3, r2, #0
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	0692      	lsls	r2, r2, #26
 80045ee:	d430      	bmi.n	8004652 <_printf_common+0xba>
 80045f0:	4649      	mov	r1, r9
 80045f2:	4638      	mov	r0, r7
 80045f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d023      	beq.n	8004646 <_printf_common+0xae>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	6922      	ldr	r2, [r4, #16]
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf14      	ite	ne
 800460a:	2500      	movne	r5, #0
 800460c:	6833      	ldreq	r3, [r6, #0]
 800460e:	f04f 0600 	mov.w	r6, #0
 8004612:	bf08      	it	eq
 8004614:	68e5      	ldreq	r5, [r4, #12]
 8004616:	f104 041a 	add.w	r4, r4, #26
 800461a:	bf08      	it	eq
 800461c:	1aed      	subeq	r5, r5, r3
 800461e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004622:	bf08      	it	eq
 8004624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004628:	4293      	cmp	r3, r2
 800462a:	bfc4      	itt	gt
 800462c:	1a9b      	subgt	r3, r3, r2
 800462e:	18ed      	addgt	r5, r5, r3
 8004630:	42b5      	cmp	r5, r6
 8004632:	d11a      	bne.n	800466a <_printf_common+0xd2>
 8004634:	2000      	movs	r0, #0
 8004636:	e008      	b.n	800464a <_printf_common+0xb2>
 8004638:	2301      	movs	r3, #1
 800463a:	4652      	mov	r2, sl
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d103      	bne.n	800464e <_printf_common+0xb6>
 8004646:	f04f 30ff 	mov.w	r0, #4294967295
 800464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464e:	3501      	adds	r5, #1
 8004650:	e7c1      	b.n	80045d6 <_printf_common+0x3e>
 8004652:	2030      	movs	r0, #48	; 0x30
 8004654:	18e1      	adds	r1, r4, r3
 8004656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004660:	4422      	add	r2, r4
 8004662:	3302      	adds	r3, #2
 8004664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004668:	e7c2      	b.n	80045f0 <_printf_common+0x58>
 800466a:	2301      	movs	r3, #1
 800466c:	4622      	mov	r2, r4
 800466e:	4649      	mov	r1, r9
 8004670:	4638      	mov	r0, r7
 8004672:	47c0      	blx	r8
 8004674:	3001      	adds	r0, #1
 8004676:	d0e6      	beq.n	8004646 <_printf_common+0xae>
 8004678:	3601      	adds	r6, #1
 800467a:	e7d9      	b.n	8004630 <_printf_common+0x98>

0800467c <_printf_i>:
 800467c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	7e0f      	ldrb	r7, [r1, #24]
 8004682:	4691      	mov	r9, r2
 8004684:	2f78      	cmp	r7, #120	; 0x78
 8004686:	4680      	mov	r8, r0
 8004688:	460c      	mov	r4, r1
 800468a:	469a      	mov	sl, r3
 800468c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800468e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004692:	d807      	bhi.n	80046a4 <_printf_i+0x28>
 8004694:	2f62      	cmp	r7, #98	; 0x62
 8004696:	d80a      	bhi.n	80046ae <_printf_i+0x32>
 8004698:	2f00      	cmp	r7, #0
 800469a:	f000 80d5 	beq.w	8004848 <_printf_i+0x1cc>
 800469e:	2f58      	cmp	r7, #88	; 0x58
 80046a0:	f000 80c1 	beq.w	8004826 <_printf_i+0x1aa>
 80046a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046ac:	e03a      	b.n	8004724 <_printf_i+0xa8>
 80046ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046b2:	2b15      	cmp	r3, #21
 80046b4:	d8f6      	bhi.n	80046a4 <_printf_i+0x28>
 80046b6:	a101      	add	r1, pc, #4	; (adr r1, 80046bc <_printf_i+0x40>)
 80046b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004729 	.word	0x08004729
 80046c4:	080046a5 	.word	0x080046a5
 80046c8:	080046a5 	.word	0x080046a5
 80046cc:	080046a5 	.word	0x080046a5
 80046d0:	080046a5 	.word	0x080046a5
 80046d4:	08004729 	.word	0x08004729
 80046d8:	080046a5 	.word	0x080046a5
 80046dc:	080046a5 	.word	0x080046a5
 80046e0:	080046a5 	.word	0x080046a5
 80046e4:	080046a5 	.word	0x080046a5
 80046e8:	0800482f 	.word	0x0800482f
 80046ec:	08004755 	.word	0x08004755
 80046f0:	080047e9 	.word	0x080047e9
 80046f4:	080046a5 	.word	0x080046a5
 80046f8:	080046a5 	.word	0x080046a5
 80046fc:	08004851 	.word	0x08004851
 8004700:	080046a5 	.word	0x080046a5
 8004704:	08004755 	.word	0x08004755
 8004708:	080046a5 	.word	0x080046a5
 800470c:	080046a5 	.word	0x080046a5
 8004710:	080047f1 	.word	0x080047f1
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004724:	2301      	movs	r3, #1
 8004726:	e0a0      	b.n	800486a <_printf_i+0x1ee>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	682b      	ldr	r3, [r5, #0]
 800472c:	0607      	lsls	r7, r0, #24
 800472e:	f103 0104 	add.w	r1, r3, #4
 8004732:	6029      	str	r1, [r5, #0]
 8004734:	d501      	bpl.n	800473a <_printf_i+0xbe>
 8004736:	681e      	ldr	r6, [r3, #0]
 8004738:	e003      	b.n	8004742 <_printf_i+0xc6>
 800473a:	0646      	lsls	r6, r0, #25
 800473c:	d5fb      	bpl.n	8004736 <_printf_i+0xba>
 800473e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004742:	2e00      	cmp	r6, #0
 8004744:	da03      	bge.n	800474e <_printf_i+0xd2>
 8004746:	232d      	movs	r3, #45	; 0x2d
 8004748:	4276      	negs	r6, r6
 800474a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474e:	230a      	movs	r3, #10
 8004750:	4859      	ldr	r0, [pc, #356]	; (80048b8 <_printf_i+0x23c>)
 8004752:	e012      	b.n	800477a <_printf_i+0xfe>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1d19      	adds	r1, r3, #4
 800475a:	6029      	str	r1, [r5, #0]
 800475c:	0605      	lsls	r5, r0, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0xe8>
 8004760:	681e      	ldr	r6, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0xee>
 8004764:	0641      	lsls	r1, r0, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0xe4>
 8004768:	881e      	ldrh	r6, [r3, #0]
 800476a:	2f6f      	cmp	r7, #111	; 0x6f
 800476c:	bf0c      	ite	eq
 800476e:	2308      	moveq	r3, #8
 8004770:	230a      	movne	r3, #10
 8004772:	4851      	ldr	r0, [pc, #324]	; (80048b8 <_printf_i+0x23c>)
 8004774:	2100      	movs	r1, #0
 8004776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477a:	6865      	ldr	r5, [r4, #4]
 800477c:	2d00      	cmp	r5, #0
 800477e:	bfa8      	it	ge
 8004780:	6821      	ldrge	r1, [r4, #0]
 8004782:	60a5      	str	r5, [r4, #8]
 8004784:	bfa4      	itt	ge
 8004786:	f021 0104 	bicge.w	r1, r1, #4
 800478a:	6021      	strge	r1, [r4, #0]
 800478c:	b90e      	cbnz	r6, 8004792 <_printf_i+0x116>
 800478e:	2d00      	cmp	r5, #0
 8004790:	d04b      	beq.n	800482a <_printf_i+0x1ae>
 8004792:	4615      	mov	r5, r2
 8004794:	fbb6 f1f3 	udiv	r1, r6, r3
 8004798:	fb03 6711 	mls	r7, r3, r1, r6
 800479c:	5dc7      	ldrb	r7, [r0, r7]
 800479e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047a2:	4637      	mov	r7, r6
 80047a4:	42bb      	cmp	r3, r7
 80047a6:	460e      	mov	r6, r1
 80047a8:	d9f4      	bls.n	8004794 <_printf_i+0x118>
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d10b      	bne.n	80047c6 <_printf_i+0x14a>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	07de      	lsls	r6, r3, #31
 80047b2:	d508      	bpl.n	80047c6 <_printf_i+0x14a>
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	6861      	ldr	r1, [r4, #4]
 80047b8:	4299      	cmp	r1, r3
 80047ba:	bfde      	ittt	le
 80047bc:	2330      	movle	r3, #48	; 0x30
 80047be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047c6:	1b52      	subs	r2, r2, r5
 80047c8:	6122      	str	r2, [r4, #16]
 80047ca:	464b      	mov	r3, r9
 80047cc:	4621      	mov	r1, r4
 80047ce:	4640      	mov	r0, r8
 80047d0:	f8cd a000 	str.w	sl, [sp]
 80047d4:	aa03      	add	r2, sp, #12
 80047d6:	f7ff fedf 	bl	8004598 <_printf_common>
 80047da:	3001      	adds	r0, #1
 80047dc:	d14a      	bne.n	8004874 <_printf_i+0x1f8>
 80047de:	f04f 30ff 	mov.w	r0, #4294967295
 80047e2:	b004      	add	sp, #16
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	2778      	movs	r7, #120	; 0x78
 80047f2:	4832      	ldr	r0, [pc, #200]	; (80048bc <_printf_i+0x240>)
 80047f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	6829      	ldr	r1, [r5, #0]
 80047fc:	061f      	lsls	r7, r3, #24
 80047fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004802:	d402      	bmi.n	800480a <_printf_i+0x18e>
 8004804:	065f      	lsls	r7, r3, #25
 8004806:	bf48      	it	mi
 8004808:	b2b6      	uxthmi	r6, r6
 800480a:	07df      	lsls	r7, r3, #31
 800480c:	bf48      	it	mi
 800480e:	f043 0320 	orrmi.w	r3, r3, #32
 8004812:	6029      	str	r1, [r5, #0]
 8004814:	bf48      	it	mi
 8004816:	6023      	strmi	r3, [r4, #0]
 8004818:	b91e      	cbnz	r6, 8004822 <_printf_i+0x1a6>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f023 0320 	bic.w	r3, r3, #32
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	2310      	movs	r3, #16
 8004824:	e7a6      	b.n	8004774 <_printf_i+0xf8>
 8004826:	4824      	ldr	r0, [pc, #144]	; (80048b8 <_printf_i+0x23c>)
 8004828:	e7e4      	b.n	80047f4 <_printf_i+0x178>
 800482a:	4615      	mov	r5, r2
 800482c:	e7bd      	b.n	80047aa <_printf_i+0x12e>
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	6826      	ldr	r6, [r4, #0]
 8004832:	1d18      	adds	r0, r3, #4
 8004834:	6961      	ldr	r1, [r4, #20]
 8004836:	6028      	str	r0, [r5, #0]
 8004838:	0635      	lsls	r5, r6, #24
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	d501      	bpl.n	8004842 <_printf_i+0x1c6>
 800483e:	6019      	str	r1, [r3, #0]
 8004840:	e002      	b.n	8004848 <_printf_i+0x1cc>
 8004842:	0670      	lsls	r0, r6, #25
 8004844:	d5fb      	bpl.n	800483e <_printf_i+0x1c2>
 8004846:	8019      	strh	r1, [r3, #0]
 8004848:	2300      	movs	r3, #0
 800484a:	4615      	mov	r5, r2
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	e7bc      	b.n	80047ca <_printf_i+0x14e>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	4628      	mov	r0, r5
 800485e:	f000 f9b4 	bl	8004bca <memchr>
 8004862:	b108      	cbz	r0, 8004868 <_printf_i+0x1ec>
 8004864:	1b40      	subs	r0, r0, r5
 8004866:	6060      	str	r0, [r4, #4]
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	2300      	movs	r3, #0
 800486e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004872:	e7aa      	b.n	80047ca <_printf_i+0x14e>
 8004874:	462a      	mov	r2, r5
 8004876:	4649      	mov	r1, r9
 8004878:	4640      	mov	r0, r8
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	47d0      	blx	sl
 800487e:	3001      	adds	r0, #1
 8004880:	d0ad      	beq.n	80047de <_printf_i+0x162>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	079b      	lsls	r3, r3, #30
 8004886:	d413      	bmi.n	80048b0 <_printf_i+0x234>
 8004888:	68e0      	ldr	r0, [r4, #12]
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	4298      	cmp	r0, r3
 800488e:	bfb8      	it	lt
 8004890:	4618      	movlt	r0, r3
 8004892:	e7a6      	b.n	80047e2 <_printf_i+0x166>
 8004894:	2301      	movs	r3, #1
 8004896:	4632      	mov	r2, r6
 8004898:	4649      	mov	r1, r9
 800489a:	4640      	mov	r0, r8
 800489c:	47d0      	blx	sl
 800489e:	3001      	adds	r0, #1
 80048a0:	d09d      	beq.n	80047de <_printf_i+0x162>
 80048a2:	3501      	adds	r5, #1
 80048a4:	68e3      	ldr	r3, [r4, #12]
 80048a6:	9903      	ldr	r1, [sp, #12]
 80048a8:	1a5b      	subs	r3, r3, r1
 80048aa:	42ab      	cmp	r3, r5
 80048ac:	dcf2      	bgt.n	8004894 <_printf_i+0x218>
 80048ae:	e7eb      	b.n	8004888 <_printf_i+0x20c>
 80048b0:	2500      	movs	r5, #0
 80048b2:	f104 0619 	add.w	r6, r4, #25
 80048b6:	e7f5      	b.n	80048a4 <_printf_i+0x228>
 80048b8:	080069ac 	.word	0x080069ac
 80048bc:	080069bd 	.word	0x080069bd

080048c0 <std>:
 80048c0:	2300      	movs	r3, #0
 80048c2:	b510      	push	{r4, lr}
 80048c4:	4604      	mov	r4, r0
 80048c6:	e9c0 3300 	strd	r3, r3, [r0]
 80048ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ce:	6083      	str	r3, [r0, #8]
 80048d0:	8181      	strh	r1, [r0, #12]
 80048d2:	6643      	str	r3, [r0, #100]	; 0x64
 80048d4:	81c2      	strh	r2, [r0, #14]
 80048d6:	6183      	str	r3, [r0, #24]
 80048d8:	4619      	mov	r1, r3
 80048da:	2208      	movs	r2, #8
 80048dc:	305c      	adds	r0, #92	; 0x5c
 80048de:	f000 f8f4 	bl	8004aca <memset>
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <std+0x58>)
 80048e4:	6224      	str	r4, [r4, #32]
 80048e6:	6263      	str	r3, [r4, #36]	; 0x24
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <std+0x5c>)
 80048ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <std+0x60>)
 80048ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <std+0x64>)
 80048f2:	6323      	str	r3, [r4, #48]	; 0x30
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <std+0x68>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d006      	beq.n	8004908 <std+0x48>
 80048fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048fe:	4294      	cmp	r4, r2
 8004900:	d002      	beq.n	8004908 <std+0x48>
 8004902:	33d0      	adds	r3, #208	; 0xd0
 8004904:	429c      	cmp	r4, r3
 8004906:	d105      	bne.n	8004914 <std+0x54>
 8004908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004910:	f000 b958 	b.w	8004bc4 <__retarget_lock_init_recursive>
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	08004a45 	.word	0x08004a45
 800491c:	08004a67 	.word	0x08004a67
 8004920:	08004a9f 	.word	0x08004a9f
 8004924:	08004ac3 	.word	0x08004ac3
 8004928:	20000378 	.word	0x20000378

0800492c <stdio_exit_handler>:
 800492c:	4a02      	ldr	r2, [pc, #8]	; (8004938 <stdio_exit_handler+0xc>)
 800492e:	4903      	ldr	r1, [pc, #12]	; (800493c <stdio_exit_handler+0x10>)
 8004930:	4803      	ldr	r0, [pc, #12]	; (8004940 <stdio_exit_handler+0x14>)
 8004932:	f000 b869 	b.w	8004a08 <_fwalk_sglue>
 8004936:	bf00      	nop
 8004938:	20000020 	.word	0x20000020
 800493c:	080062ad 	.word	0x080062ad
 8004940:	2000002c 	.word	0x2000002c

08004944 <cleanup_stdio>:
 8004944:	6841      	ldr	r1, [r0, #4]
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <cleanup_stdio+0x34>)
 8004948:	b510      	push	{r4, lr}
 800494a:	4299      	cmp	r1, r3
 800494c:	4604      	mov	r4, r0
 800494e:	d001      	beq.n	8004954 <cleanup_stdio+0x10>
 8004950:	f001 fcac 	bl	80062ac <_fflush_r>
 8004954:	68a1      	ldr	r1, [r4, #8]
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <cleanup_stdio+0x38>)
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <cleanup_stdio+0x1e>
 800495c:	4620      	mov	r0, r4
 800495e:	f001 fca5 	bl	80062ac <_fflush_r>
 8004962:	68e1      	ldr	r1, [r4, #12]
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <cleanup_stdio+0x3c>)
 8004966:	4299      	cmp	r1, r3
 8004968:	d004      	beq.n	8004974 <cleanup_stdio+0x30>
 800496a:	4620      	mov	r0, r4
 800496c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004970:	f001 bc9c 	b.w	80062ac <_fflush_r>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	bf00      	nop
 8004978:	20000378 	.word	0x20000378
 800497c:	200003e0 	.word	0x200003e0
 8004980:	20000448 	.word	0x20000448

08004984 <global_stdio_init.part.0>:
 8004984:	b510      	push	{r4, lr}
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <global_stdio_init.part.0+0x30>)
 8004988:	4c0b      	ldr	r4, [pc, #44]	; (80049b8 <global_stdio_init.part.0+0x34>)
 800498a:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <global_stdio_init.part.0+0x38>)
 800498c:	4620      	mov	r0, r4
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	2104      	movs	r1, #4
 8004992:	2200      	movs	r2, #0
 8004994:	f7ff ff94 	bl	80048c0 <std>
 8004998:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800499c:	2201      	movs	r2, #1
 800499e:	2109      	movs	r1, #9
 80049a0:	f7ff ff8e 	bl	80048c0 <std>
 80049a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80049a8:	2202      	movs	r2, #2
 80049aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ae:	2112      	movs	r1, #18
 80049b0:	f7ff bf86 	b.w	80048c0 <std>
 80049b4:	200004b0 	.word	0x200004b0
 80049b8:	20000378 	.word	0x20000378
 80049bc:	0800492d 	.word	0x0800492d

080049c0 <__sfp_lock_acquire>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__sfp_lock_acquire+0x8>)
 80049c2:	f000 b900 	b.w	8004bc6 <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	200004b9 	.word	0x200004b9

080049cc <__sfp_lock_release>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__sfp_lock_release+0x8>)
 80049ce:	f000 b8fb 	b.w	8004bc8 <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	200004b9 	.word	0x200004b9

080049d8 <__sinit>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	f7ff fff0 	bl	80049c0 <__sfp_lock_acquire>
 80049e0:	6a23      	ldr	r3, [r4, #32]
 80049e2:	b11b      	cbz	r3, 80049ec <__sinit+0x14>
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e8:	f7ff bff0 	b.w	80049cc <__sfp_lock_release>
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <__sinit+0x28>)
 80049ee:	6223      	str	r3, [r4, #32]
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <__sinit+0x2c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f5      	bne.n	80049e4 <__sinit+0xc>
 80049f8:	f7ff ffc4 	bl	8004984 <global_stdio_init.part.0>
 80049fc:	e7f2      	b.n	80049e4 <__sinit+0xc>
 80049fe:	bf00      	nop
 8004a00:	08004945 	.word	0x08004945
 8004a04:	200004b0 	.word	0x200004b0

08004a08 <_fwalk_sglue>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	4688      	mov	r8, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	2600      	movs	r6, #0
 8004a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a18:	f1b9 0901 	subs.w	r9, r9, #1
 8004a1c:	d505      	bpl.n	8004a2a <_fwalk_sglue+0x22>
 8004a1e:	6824      	ldr	r4, [r4, #0]
 8004a20:	2c00      	cmp	r4, #0
 8004a22:	d1f7      	bne.n	8004a14 <_fwalk_sglue+0xc>
 8004a24:	4630      	mov	r0, r6
 8004a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d907      	bls.n	8004a40 <_fwalk_sglue+0x38>
 8004a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a34:	3301      	adds	r3, #1
 8004a36:	d003      	beq.n	8004a40 <_fwalk_sglue+0x38>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	4306      	orrs	r6, r0
 8004a40:	3568      	adds	r5, #104	; 0x68
 8004a42:	e7e9      	b.n	8004a18 <_fwalk_sglue+0x10>

08004a44 <__sread>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	460c      	mov	r4, r1
 8004a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4c:	f000 f86c 	bl	8004b28 <_read_r>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	bfab      	itete	ge
 8004a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a56:	89a3      	ldrhlt	r3, [r4, #12]
 8004a58:	181b      	addge	r3, r3, r0
 8004a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a5e:	bfac      	ite	ge
 8004a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a62:	81a3      	strhlt	r3, [r4, #12]
 8004a64:	bd10      	pop	{r4, pc}

08004a66 <__swrite>:
 8004a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6a:	461f      	mov	r7, r3
 8004a6c:	898b      	ldrh	r3, [r1, #12]
 8004a6e:	4605      	mov	r5, r0
 8004a70:	05db      	lsls	r3, r3, #23
 8004a72:	460c      	mov	r4, r1
 8004a74:	4616      	mov	r6, r2
 8004a76:	d505      	bpl.n	8004a84 <__swrite+0x1e>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	f000 f840 	bl	8004b04 <_lseek_r>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	4632      	mov	r2, r6
 8004a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	463b      	mov	r3, r7
 8004a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9a:	f000 b857 	b.w	8004b4c <_write_r>

08004a9e <__sseek>:
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa6:	f000 f82d 	bl	8004b04 <_lseek_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	bf15      	itete	ne
 8004ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aba:	81a3      	strheq	r3, [r4, #12]
 8004abc:	bf18      	it	ne
 8004abe:	81a3      	strhne	r3, [r4, #12]
 8004ac0:	bd10      	pop	{r4, pc}

08004ac2 <__sclose>:
 8004ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac6:	f000 b80d 	b.w	8004ae4 <_close_r>

08004aca <memset>:
 8004aca:	4603      	mov	r3, r0
 8004acc:	4402      	add	r2, r0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <memset+0xa>
 8004ad2:	4770      	bx	lr
 8004ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad8:	e7f9      	b.n	8004ace <memset+0x4>
	...

08004adc <_localeconv_r>:
 8004adc:	4800      	ldr	r0, [pc, #0]	; (8004ae0 <_localeconv_r+0x4>)
 8004ade:	4770      	bx	lr
 8004ae0:	2000016c 	.word	0x2000016c

08004ae4 <_close_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <_close_r+0x1c>)
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fc fe0e 	bl	8001710 <_close>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_close_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_close_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	200004b4 	.word	0x200004b4

08004b04 <_lseek_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4d05      	ldr	r5, [pc, #20]	; (8004b24 <_lseek_r+0x20>)
 8004b10:	602a      	str	r2, [r5, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f7fc fe20 	bl	8001758 <_lseek>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_lseek_r+0x1e>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_lseek_r+0x1e>
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	200004b4 	.word	0x200004b4

08004b28 <_read_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	2200      	movs	r2, #0
 8004b32:	4d05      	ldr	r5, [pc, #20]	; (8004b48 <_read_r+0x20>)
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7fc fdb1 	bl	800169e <_read>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_read_r+0x1e>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_read_r+0x1e>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	200004b4 	.word	0x200004b4

08004b4c <_write_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	4d05      	ldr	r5, [pc, #20]	; (8004b6c <_write_r+0x20>)
 8004b58:	602a      	str	r2, [r5, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f7fc fdbc 	bl	80016d8 <_write>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d102      	bne.n	8004b6a <_write_r+0x1e>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	b103      	cbz	r3, 8004b6a <_write_r+0x1e>
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	200004b4 	.word	0x200004b4

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000078 	.word	0x20000078

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4d0c      	ldr	r5, [pc, #48]	; (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f001 fede 	bl	800694c <_init>
 8004b90:	2600      	movs	r6, #0
 8004b92:	4d0a      	ldr	r5, [pc, #40]	; (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	; (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08006d0c 	.word	0x08006d0c
 8004bb8:	08006d0c 	.word	0x08006d0c
 8004bbc:	08006d0c 	.word	0x08006d0c
 8004bc0:	08006d10 	.word	0x08006d10

08004bc4 <__retarget_lock_init_recursive>:
 8004bc4:	4770      	bx	lr

08004bc6 <__retarget_lock_acquire_recursive>:
 8004bc6:	4770      	bx	lr

08004bc8 <__retarget_lock_release_recursive>:
 8004bc8:	4770      	bx	lr

08004bca <memchr>:
 8004bca:	4603      	mov	r3, r0
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	b2c9      	uxtb	r1, r1
 8004bd0:	4402      	add	r2, r0
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	d101      	bne.n	8004bdc <memchr+0x12>
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e003      	b.n	8004be4 <memchr+0x1a>
 8004bdc:	7804      	ldrb	r4, [r0, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	428c      	cmp	r4, r1
 8004be2:	d1f6      	bne.n	8004bd2 <memchr+0x8>
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <quorem>:
 8004be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6903      	ldr	r3, [r0, #16]
 8004bec:	690c      	ldr	r4, [r1, #16]
 8004bee:	4607      	mov	r7, r0
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	db7f      	blt.n	8004cf4 <quorem+0x10e>
 8004bf4:	3c01      	subs	r4, #1
 8004bf6:	f100 0514 	add.w	r5, r0, #20
 8004bfa:	f101 0814 	add.w	r8, r1, #20
 8004bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c1c:	d331      	bcc.n	8004c82 <quorem+0x9c>
 8004c1e:	f04f 0e00 	mov.w	lr, #0
 8004c22:	4640      	mov	r0, r8
 8004c24:	46ac      	mov	ip, r5
 8004c26:	46f2      	mov	sl, lr
 8004c28:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c2c:	b293      	uxth	r3, r2
 8004c2e:	fb06 e303 	mla	r3, r6, r3, lr
 8004c32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c36:	0c1a      	lsrs	r2, r3, #16
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	fb06 220e 	mla	r2, r6, lr, r2
 8004c3e:	ebaa 0303 	sub.w	r3, sl, r3
 8004c42:	f8dc a000 	ldr.w	sl, [ip]
 8004c46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c4a:	fa1f fa8a 	uxth.w	sl, sl
 8004c4e:	4453      	add	r3, sl
 8004c50:	f8dc a000 	ldr.w	sl, [ip]
 8004c54:	b292      	uxth	r2, r2
 8004c56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c64:	4581      	cmp	r9, r0
 8004c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c6a:	f84c 3b04 	str.w	r3, [ip], #4
 8004c6e:	d2db      	bcs.n	8004c28 <quorem+0x42>
 8004c70:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c74:	b92b      	cbnz	r3, 8004c82 <quorem+0x9c>
 8004c76:	9b01      	ldr	r3, [sp, #4]
 8004c78:	3b04      	subs	r3, #4
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	d32d      	bcc.n	8004cdc <quorem+0xf6>
 8004c80:	613c      	str	r4, [r7, #16]
 8004c82:	4638      	mov	r0, r7
 8004c84:	f001 f992 	bl	8005fac <__mcmp>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	db23      	blt.n	8004cd4 <quorem+0xee>
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	2000      	movs	r0, #0
 8004c90:	3601      	adds	r6, #1
 8004c92:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c96:	f8d1 c000 	ldr.w	ip, [r1]
 8004c9a:	b293      	uxth	r3, r2
 8004c9c:	1ac3      	subs	r3, r0, r3
 8004c9e:	0c12      	lsrs	r2, r2, #16
 8004ca0:	fa1f f08c 	uxth.w	r0, ip
 8004ca4:	4403      	add	r3, r0
 8004ca6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004caa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cb4:	45c1      	cmp	r9, r8
 8004cb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004cba:	f841 3b04 	str.w	r3, [r1], #4
 8004cbe:	d2e8      	bcs.n	8004c92 <quorem+0xac>
 8004cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cc8:	b922      	cbnz	r2, 8004cd4 <quorem+0xee>
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	429d      	cmp	r5, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	d30a      	bcc.n	8004ce8 <quorem+0x102>
 8004cd2:	613c      	str	r4, [r7, #16]
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	b003      	add	sp, #12
 8004cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	3b04      	subs	r3, #4
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d1cd      	bne.n	8004c80 <quorem+0x9a>
 8004ce4:	3c01      	subs	r4, #1
 8004ce6:	e7c8      	b.n	8004c7a <quorem+0x94>
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	3b04      	subs	r3, #4
 8004cec:	2a00      	cmp	r2, #0
 8004cee:	d1f0      	bne.n	8004cd2 <quorem+0xec>
 8004cf0:	3c01      	subs	r4, #1
 8004cf2:	e7eb      	b.n	8004ccc <quorem+0xe6>
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	e7ee      	b.n	8004cd6 <quorem+0xf0>

08004cf8 <_dtoa_r>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	4616      	mov	r6, r2
 8004cfe:	461f      	mov	r7, r3
 8004d00:	69c4      	ldr	r4, [r0, #28]
 8004d02:	b099      	sub	sp, #100	; 0x64
 8004d04:	4605      	mov	r5, r0
 8004d06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d0e:	b974      	cbnz	r4, 8004d2e <_dtoa_r+0x36>
 8004d10:	2010      	movs	r0, #16
 8004d12:	f000 fe1d 	bl	8005950 <malloc>
 8004d16:	4602      	mov	r2, r0
 8004d18:	61e8      	str	r0, [r5, #28]
 8004d1a:	b920      	cbnz	r0, 8004d26 <_dtoa_r+0x2e>
 8004d1c:	21ef      	movs	r1, #239	; 0xef
 8004d1e:	4bac      	ldr	r3, [pc, #688]	; (8004fd0 <_dtoa_r+0x2d8>)
 8004d20:	48ac      	ldr	r0, [pc, #688]	; (8004fd4 <_dtoa_r+0x2dc>)
 8004d22:	f001 fb09 	bl	8006338 <__assert_func>
 8004d26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d2a:	6004      	str	r4, [r0, #0]
 8004d2c:	60c4      	str	r4, [r0, #12]
 8004d2e:	69eb      	ldr	r3, [r5, #28]
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	b151      	cbz	r1, 8004d4a <_dtoa_r+0x52>
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	2301      	movs	r3, #1
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	604a      	str	r2, [r1, #4]
 8004d3c:	608b      	str	r3, [r1, #8]
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fefa 	bl	8005b38 <_Bfree>
 8004d44:	2200      	movs	r2, #0
 8004d46:	69eb      	ldr	r3, [r5, #28]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	1e3b      	subs	r3, r7, #0
 8004d4c:	bfaf      	iteee	ge
 8004d4e:	2300      	movge	r3, #0
 8004d50:	2201      	movlt	r2, #1
 8004d52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d56:	9305      	strlt	r3, [sp, #20]
 8004d58:	bfa8      	it	ge
 8004d5a:	f8c8 3000 	strge.w	r3, [r8]
 8004d5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d62:	4b9d      	ldr	r3, [pc, #628]	; (8004fd8 <_dtoa_r+0x2e0>)
 8004d64:	bfb8      	it	lt
 8004d66:	f8c8 2000 	strlt.w	r2, [r8]
 8004d6a:	ea33 0309 	bics.w	r3, r3, r9
 8004d6e:	d119      	bne.n	8004da4 <_dtoa_r+0xac>
 8004d70:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d7c:	4333      	orrs	r3, r6
 8004d7e:	f000 8589 	beq.w	8005894 <_dtoa_r+0xb9c>
 8004d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d84:	b953      	cbnz	r3, 8004d9c <_dtoa_r+0xa4>
 8004d86:	4b95      	ldr	r3, [pc, #596]	; (8004fdc <_dtoa_r+0x2e4>)
 8004d88:	e023      	b.n	8004dd2 <_dtoa_r+0xda>
 8004d8a:	4b95      	ldr	r3, [pc, #596]	; (8004fe0 <_dtoa_r+0x2e8>)
 8004d8c:	9303      	str	r3, [sp, #12]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	9803      	ldr	r0, [sp, #12]
 8004d96:	b019      	add	sp, #100	; 0x64
 8004d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9c:	4b8f      	ldr	r3, [pc, #572]	; (8004fdc <_dtoa_r+0x2e4>)
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	3303      	adds	r3, #3
 8004da2:	e7f5      	b.n	8004d90 <_dtoa_r+0x98>
 8004da4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004da8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004db0:	2200      	movs	r2, #0
 8004db2:	2300      	movs	r3, #0
 8004db4:	f7fb fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8004db8:	4680      	mov	r8, r0
 8004dba:	b160      	cbz	r0, 8004dd6 <_dtoa_r+0xde>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8562 	beq.w	800588e <_dtoa_r+0xb96>
 8004dca:	4b86      	ldr	r3, [pc, #536]	; (8004fe4 <_dtoa_r+0x2ec>)
 8004dcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	e7de      	b.n	8004d94 <_dtoa_r+0x9c>
 8004dd6:	ab16      	add	r3, sp, #88	; 0x58
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	ab17      	add	r3, sp, #92	; 0x5c
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4628      	mov	r0, r5
 8004de0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004de4:	f001 f98a 	bl	80060fc <__d2b>
 8004de8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004dec:	4682      	mov	sl, r0
 8004dee:	2c00      	cmp	r4, #0
 8004df0:	d07e      	beq.n	8004ef0 <_dtoa_r+0x1f8>
 8004df2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004e04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4b75      	ldr	r3, [pc, #468]	; (8004fe8 <_dtoa_r+0x2f0>)
 8004e12:	f7fb f9a9 	bl	8000168 <__aeabi_dsub>
 8004e16:	a368      	add	r3, pc, #416	; (adr r3, 8004fb8 <_dtoa_r+0x2c0>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fb5c 	bl	80004d8 <__aeabi_dmul>
 8004e20:	a367      	add	r3, pc, #412	; (adr r3, 8004fc0 <_dtoa_r+0x2c8>)
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f7fb f9a1 	bl	800016c <__adddf3>
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	460f      	mov	r7, r1
 8004e30:	f7fb fae8 	bl	8000404 <__aeabi_i2d>
 8004e34:	a364      	add	r3, pc, #400	; (adr r3, 8004fc8 <_dtoa_r+0x2d0>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f7fb fb4d 	bl	80004d8 <__aeabi_dmul>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4630      	mov	r0, r6
 8004e44:	4639      	mov	r1, r7
 8004e46:	f7fb f991 	bl	800016c <__adddf3>
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460f      	mov	r7, r1
 8004e4e:	f7fb fdf3 	bl	8000a38 <__aeabi_d2iz>
 8004e52:	2200      	movs	r2, #0
 8004e54:	4683      	mov	fp, r0
 8004e56:	2300      	movs	r3, #0
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f7fb fdae 	bl	80009bc <__aeabi_dcmplt>
 8004e60:	b148      	cbz	r0, 8004e76 <_dtoa_r+0x17e>
 8004e62:	4658      	mov	r0, fp
 8004e64:	f7fb face 	bl	8000404 <__aeabi_i2d>
 8004e68:	4632      	mov	r2, r6
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	f7fb fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004e70:	b908      	cbnz	r0, 8004e76 <_dtoa_r+0x17e>
 8004e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e76:	f1bb 0f16 	cmp.w	fp, #22
 8004e7a:	d857      	bhi.n	8004f2c <_dtoa_r+0x234>
 8004e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e80:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <_dtoa_r+0x2f4>)
 8004e82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb fd97 	bl	80009bc <__aeabi_dcmplt>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d04e      	beq.n	8004f30 <_dtoa_r+0x238>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e9c:	1b1b      	subs	r3, r3, r4
 8004e9e:	1e5a      	subs	r2, r3, #1
 8004ea0:	bf46      	itte	mi
 8004ea2:	f1c3 0901 	rsbmi	r9, r3, #1
 8004ea6:	2300      	movmi	r3, #0
 8004ea8:	f04f 0900 	movpl.w	r9, #0
 8004eac:	9209      	str	r2, [sp, #36]	; 0x24
 8004eae:	bf48      	it	mi
 8004eb0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004eb2:	f1bb 0f00 	cmp.w	fp, #0
 8004eb6:	db3d      	blt.n	8004f34 <_dtoa_r+0x23c>
 8004eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004ebe:	445b      	add	r3, fp
 8004ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d867      	bhi.n	8004f9c <_dtoa_r+0x2a4>
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	bfc4      	itt	gt
 8004ed0:	3b04      	subgt	r3, #4
 8004ed2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ed6:	bfc8      	it	gt
 8004ed8:	2400      	movgt	r4, #0
 8004eda:	f1a3 0302 	sub.w	r3, r3, #2
 8004ede:	bfd8      	it	le
 8004ee0:	2401      	movle	r4, #1
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	f200 8086 	bhi.w	8004ff4 <_dtoa_r+0x2fc>
 8004ee8:	e8df f003 	tbb	[pc, r3]
 8004eec:	5637392c 	.word	0x5637392c
 8004ef0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	bfc1      	itttt	gt
 8004efe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f02:	fa09 f903 	lslgt.w	r9, r9, r3
 8004f06:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004f0a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004f0e:	bfd6      	itet	le
 8004f10:	f1c3 0320 	rsble	r3, r3, #32
 8004f14:	ea49 0003 	orrgt.w	r0, r9, r3
 8004f18:	fa06 f003 	lslle.w	r0, r6, r3
 8004f1c:	f7fb fa62 	bl	80003e4 <__aeabi_ui2d>
 8004f20:	2201      	movs	r2, #1
 8004f22:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004f26:	3c01      	subs	r4, #1
 8004f28:	9213      	str	r2, [sp, #76]	; 0x4c
 8004f2a:	e76f      	b.n	8004e0c <_dtoa_r+0x114>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e7b3      	b.n	8004e98 <_dtoa_r+0x1a0>
 8004f30:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f32:	e7b2      	b.n	8004e9a <_dtoa_r+0x1a2>
 8004f34:	f1cb 0300 	rsb	r3, fp, #0
 8004f38:	930a      	str	r3, [sp, #40]	; 0x28
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	eba9 090b 	sub.w	r9, r9, fp
 8004f40:	930e      	str	r3, [sp, #56]	; 0x38
 8004f42:	e7c0      	b.n	8004ec6 <_dtoa_r+0x1ce>
 8004f44:	2300      	movs	r3, #0
 8004f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dc55      	bgt.n	8004ffa <_dtoa_r+0x302>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	461a      	mov	r2, r3
 8004f52:	9306      	str	r3, [sp, #24]
 8004f54:	9308      	str	r3, [sp, #32]
 8004f56:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f58:	e00b      	b.n	8004f72 <_dtoa_r+0x27a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7f3      	b.n	8004f46 <_dtoa_r+0x24e>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f64:	445b      	add	r3, fp
 8004f66:	9306      	str	r3, [sp, #24]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	9308      	str	r3, [sp, #32]
 8004f6e:	bfb8      	it	lt
 8004f70:	2301      	movlt	r3, #1
 8004f72:	2100      	movs	r1, #0
 8004f74:	2204      	movs	r2, #4
 8004f76:	69e8      	ldr	r0, [r5, #28]
 8004f78:	f102 0614 	add.w	r6, r2, #20
 8004f7c:	429e      	cmp	r6, r3
 8004f7e:	d940      	bls.n	8005002 <_dtoa_r+0x30a>
 8004f80:	6041      	str	r1, [r0, #4]
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 fd98 	bl	8005ab8 <_Balloc>
 8004f88:	9003      	str	r0, [sp, #12]
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d13c      	bne.n	8005008 <_dtoa_r+0x310>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	f240 11af 	movw	r1, #431	; 0x1af
 8004f94:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <_dtoa_r+0x2f8>)
 8004f96:	e6c3      	b.n	8004d20 <_dtoa_r+0x28>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e7e1      	b.n	8004f60 <_dtoa_r+0x268>
 8004f9c:	2401      	movs	r4, #1
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004fa2:	9322      	str	r3, [sp, #136]	; 0x88
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa8:	2200      	movs	r2, #0
 8004faa:	9306      	str	r3, [sp, #24]
 8004fac:	9308      	str	r3, [sp, #32]
 8004fae:	2312      	movs	r3, #18
 8004fb0:	e7d1      	b.n	8004f56 <_dtoa_r+0x25e>
 8004fb2:	bf00      	nop
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	636f4361 	.word	0x636f4361
 8004fbc:	3fd287a7 	.word	0x3fd287a7
 8004fc0:	8b60c8b3 	.word	0x8b60c8b3
 8004fc4:	3fc68a28 	.word	0x3fc68a28
 8004fc8:	509f79fb 	.word	0x509f79fb
 8004fcc:	3fd34413 	.word	0x3fd34413
 8004fd0:	080069db 	.word	0x080069db
 8004fd4:	080069f2 	.word	0x080069f2
 8004fd8:	7ff00000 	.word	0x7ff00000
 8004fdc:	080069d7 	.word	0x080069d7
 8004fe0:	080069ce 	.word	0x080069ce
 8004fe4:	080069ab 	.word	0x080069ab
 8004fe8:	3ff80000 	.word	0x3ff80000
 8004fec:	08006ae0 	.word	0x08006ae0
 8004ff0:	08006a4a 	.word	0x08006a4a
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff8:	e7d4      	b.n	8004fa4 <_dtoa_r+0x2ac>
 8004ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ffc:	9306      	str	r3, [sp, #24]
 8004ffe:	9308      	str	r3, [sp, #32]
 8005000:	e7b7      	b.n	8004f72 <_dtoa_r+0x27a>
 8005002:	3101      	adds	r1, #1
 8005004:	0052      	lsls	r2, r2, #1
 8005006:	e7b7      	b.n	8004f78 <_dtoa_r+0x280>
 8005008:	69eb      	ldr	r3, [r5, #28]
 800500a:	9a03      	ldr	r2, [sp, #12]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	9b08      	ldr	r3, [sp, #32]
 8005010:	2b0e      	cmp	r3, #14
 8005012:	f200 80a8 	bhi.w	8005166 <_dtoa_r+0x46e>
 8005016:	2c00      	cmp	r4, #0
 8005018:	f000 80a5 	beq.w	8005166 <_dtoa_r+0x46e>
 800501c:	f1bb 0f00 	cmp.w	fp, #0
 8005020:	dd34      	ble.n	800508c <_dtoa_r+0x394>
 8005022:	4b9a      	ldr	r3, [pc, #616]	; (800528c <_dtoa_r+0x594>)
 8005024:	f00b 020f 	and.w	r2, fp, #15
 8005028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800502c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005030:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005034:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005038:	ea4f 142b 	mov.w	r4, fp, asr #4
 800503c:	d016      	beq.n	800506c <_dtoa_r+0x374>
 800503e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005042:	4b93      	ldr	r3, [pc, #588]	; (8005290 <_dtoa_r+0x598>)
 8005044:	2703      	movs	r7, #3
 8005046:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800504a:	f7fb fb6f 	bl	800072c <__aeabi_ddiv>
 800504e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005052:	f004 040f 	and.w	r4, r4, #15
 8005056:	4e8e      	ldr	r6, [pc, #568]	; (8005290 <_dtoa_r+0x598>)
 8005058:	b954      	cbnz	r4, 8005070 <_dtoa_r+0x378>
 800505a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800505e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005062:	f7fb fb63 	bl	800072c <__aeabi_ddiv>
 8005066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800506a:	e029      	b.n	80050c0 <_dtoa_r+0x3c8>
 800506c:	2702      	movs	r7, #2
 800506e:	e7f2      	b.n	8005056 <_dtoa_r+0x35e>
 8005070:	07e1      	lsls	r1, r4, #31
 8005072:	d508      	bpl.n	8005086 <_dtoa_r+0x38e>
 8005074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005078:	e9d6 2300 	ldrd	r2, r3, [r6]
 800507c:	f7fb fa2c 	bl	80004d8 <__aeabi_dmul>
 8005080:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005084:	3701      	adds	r7, #1
 8005086:	1064      	asrs	r4, r4, #1
 8005088:	3608      	adds	r6, #8
 800508a:	e7e5      	b.n	8005058 <_dtoa_r+0x360>
 800508c:	f000 80a5 	beq.w	80051da <_dtoa_r+0x4e2>
 8005090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005094:	f1cb 0400 	rsb	r4, fp, #0
 8005098:	4b7c      	ldr	r3, [pc, #496]	; (800528c <_dtoa_r+0x594>)
 800509a:	f004 020f 	and.w	r2, r4, #15
 800509e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb fa17 	bl	80004d8 <__aeabi_dmul>
 80050aa:	2702      	movs	r7, #2
 80050ac:	2300      	movs	r3, #0
 80050ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050b2:	4e77      	ldr	r6, [pc, #476]	; (8005290 <_dtoa_r+0x598>)
 80050b4:	1124      	asrs	r4, r4, #4
 80050b6:	2c00      	cmp	r4, #0
 80050b8:	f040 8084 	bne.w	80051c4 <_dtoa_r+0x4cc>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1d2      	bne.n	8005066 <_dtoa_r+0x36e>
 80050c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8087 	beq.w	80051de <_dtoa_r+0x4e6>
 80050d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050d4:	2200      	movs	r2, #0
 80050d6:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <_dtoa_r+0x59c>)
 80050d8:	f7fb fc70 	bl	80009bc <__aeabi_dcmplt>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d07e      	beq.n	80051de <_dtoa_r+0x4e6>
 80050e0:	9b08      	ldr	r3, [sp, #32]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d07b      	beq.n	80051de <_dtoa_r+0x4e6>
 80050e6:	9b06      	ldr	r3, [sp, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dd38      	ble.n	800515e <_dtoa_r+0x466>
 80050ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050f0:	2200      	movs	r2, #0
 80050f2:	4b69      	ldr	r3, [pc, #420]	; (8005298 <_dtoa_r+0x5a0>)
 80050f4:	f7fb f9f0 	bl	80004d8 <__aeabi_dmul>
 80050f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050fc:	9c06      	ldr	r4, [sp, #24]
 80050fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005102:	3701      	adds	r7, #1
 8005104:	4638      	mov	r0, r7
 8005106:	f7fb f97d 	bl	8000404 <__aeabi_i2d>
 800510a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800510e:	f7fb f9e3 	bl	80004d8 <__aeabi_dmul>
 8005112:	2200      	movs	r2, #0
 8005114:	4b61      	ldr	r3, [pc, #388]	; (800529c <_dtoa_r+0x5a4>)
 8005116:	f7fb f829 	bl	800016c <__adddf3>
 800511a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800511e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005122:	9611      	str	r6, [sp, #68]	; 0x44
 8005124:	2c00      	cmp	r4, #0
 8005126:	d15d      	bne.n	80051e4 <_dtoa_r+0x4ec>
 8005128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800512c:	2200      	movs	r2, #0
 800512e:	4b5c      	ldr	r3, [pc, #368]	; (80052a0 <_dtoa_r+0x5a8>)
 8005130:	f7fb f81a 	bl	8000168 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800513c:	4633      	mov	r3, r6
 800513e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005140:	f7fb fc5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005144:	2800      	cmp	r0, #0
 8005146:	f040 8295 	bne.w	8005674 <_dtoa_r+0x97c>
 800514a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800514e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005150:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005154:	f7fb fc32 	bl	80009bc <__aeabi_dcmplt>
 8005158:	2800      	cmp	r0, #0
 800515a:	f040 8289 	bne.w	8005670 <_dtoa_r+0x978>
 800515e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005162:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005166:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005168:	2b00      	cmp	r3, #0
 800516a:	f2c0 8151 	blt.w	8005410 <_dtoa_r+0x718>
 800516e:	f1bb 0f0e 	cmp.w	fp, #14
 8005172:	f300 814d 	bgt.w	8005410 <_dtoa_r+0x718>
 8005176:	4b45      	ldr	r3, [pc, #276]	; (800528c <_dtoa_r+0x594>)
 8005178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800517c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005180:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005186:	2b00      	cmp	r3, #0
 8005188:	f280 80da 	bge.w	8005340 <_dtoa_r+0x648>
 800518c:	9b08      	ldr	r3, [sp, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f300 80d6 	bgt.w	8005340 <_dtoa_r+0x648>
 8005194:	f040 826b 	bne.w	800566e <_dtoa_r+0x976>
 8005198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519c:	2200      	movs	r2, #0
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <_dtoa_r+0x5a8>)
 80051a0:	f7fb f99a 	bl	80004d8 <__aeabi_dmul>
 80051a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a8:	f7fb fc1c 	bl	80009e4 <__aeabi_dcmpge>
 80051ac:	9c08      	ldr	r4, [sp, #32]
 80051ae:	4626      	mov	r6, r4
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f040 8241 	bne.w	8005638 <_dtoa_r+0x940>
 80051b6:	2331      	movs	r3, #49	; 0x31
 80051b8:	9f03      	ldr	r7, [sp, #12]
 80051ba:	f10b 0b01 	add.w	fp, fp, #1
 80051be:	f807 3b01 	strb.w	r3, [r7], #1
 80051c2:	e23d      	b.n	8005640 <_dtoa_r+0x948>
 80051c4:	07e2      	lsls	r2, r4, #31
 80051c6:	d505      	bpl.n	80051d4 <_dtoa_r+0x4dc>
 80051c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051cc:	f7fb f984 	bl	80004d8 <__aeabi_dmul>
 80051d0:	2301      	movs	r3, #1
 80051d2:	3701      	adds	r7, #1
 80051d4:	1064      	asrs	r4, r4, #1
 80051d6:	3608      	adds	r6, #8
 80051d8:	e76d      	b.n	80050b6 <_dtoa_r+0x3be>
 80051da:	2702      	movs	r7, #2
 80051dc:	e770      	b.n	80050c0 <_dtoa_r+0x3c8>
 80051de:	46d8      	mov	r8, fp
 80051e0:	9c08      	ldr	r4, [sp, #32]
 80051e2:	e78f      	b.n	8005104 <_dtoa_r+0x40c>
 80051e4:	9903      	ldr	r1, [sp, #12]
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <_dtoa_r+0x594>)
 80051e8:	4421      	add	r1, r4
 80051ea:	9112      	str	r1, [sp, #72]	; 0x48
 80051ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80051f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051fa:	2900      	cmp	r1, #0
 80051fc:	d054      	beq.n	80052a8 <_dtoa_r+0x5b0>
 80051fe:	2000      	movs	r0, #0
 8005200:	4928      	ldr	r1, [pc, #160]	; (80052a4 <_dtoa_r+0x5ac>)
 8005202:	f7fb fa93 	bl	800072c <__aeabi_ddiv>
 8005206:	463b      	mov	r3, r7
 8005208:	4632      	mov	r2, r6
 800520a:	f7fa ffad 	bl	8000168 <__aeabi_dsub>
 800520e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005212:	9f03      	ldr	r7, [sp, #12]
 8005214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005218:	f7fb fc0e 	bl	8000a38 <__aeabi_d2iz>
 800521c:	4604      	mov	r4, r0
 800521e:	f7fb f8f1 	bl	8000404 <__aeabi_i2d>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800522a:	f7fa ff9d 	bl	8000168 <__aeabi_dsub>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	3430      	adds	r4, #48	; 0x30
 8005234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005238:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800523c:	f807 4b01 	strb.w	r4, [r7], #1
 8005240:	f7fb fbbc 	bl	80009bc <__aeabi_dcmplt>
 8005244:	2800      	cmp	r0, #0
 8005246:	d173      	bne.n	8005330 <_dtoa_r+0x638>
 8005248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800524c:	2000      	movs	r0, #0
 800524e:	4911      	ldr	r1, [pc, #68]	; (8005294 <_dtoa_r+0x59c>)
 8005250:	f7fa ff8a 	bl	8000168 <__aeabi_dsub>
 8005254:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005258:	f7fb fbb0 	bl	80009bc <__aeabi_dcmplt>
 800525c:	2800      	cmp	r0, #0
 800525e:	f040 80b6 	bne.w	80053ce <_dtoa_r+0x6d6>
 8005262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005264:	429f      	cmp	r7, r3
 8005266:	f43f af7a 	beq.w	800515e <_dtoa_r+0x466>
 800526a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800526e:	2200      	movs	r2, #0
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <_dtoa_r+0x5a0>)
 8005272:	f7fb f931 	bl	80004d8 <__aeabi_dmul>
 8005276:	2200      	movs	r2, #0
 8005278:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800527c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <_dtoa_r+0x5a0>)
 8005282:	f7fb f929 	bl	80004d8 <__aeabi_dmul>
 8005286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800528a:	e7c3      	b.n	8005214 <_dtoa_r+0x51c>
 800528c:	08006ae0 	.word	0x08006ae0
 8005290:	08006ab8 	.word	0x08006ab8
 8005294:	3ff00000 	.word	0x3ff00000
 8005298:	40240000 	.word	0x40240000
 800529c:	401c0000 	.word	0x401c0000
 80052a0:	40140000 	.word	0x40140000
 80052a4:	3fe00000 	.word	0x3fe00000
 80052a8:	4630      	mov	r0, r6
 80052aa:	4639      	mov	r1, r7
 80052ac:	f7fb f914 	bl	80004d8 <__aeabi_dmul>
 80052b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052b6:	9c03      	ldr	r4, [sp, #12]
 80052b8:	9314      	str	r3, [sp, #80]	; 0x50
 80052ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052be:	f7fb fbbb 	bl	8000a38 <__aeabi_d2iz>
 80052c2:	9015      	str	r0, [sp, #84]	; 0x54
 80052c4:	f7fb f89e 	bl	8000404 <__aeabi_i2d>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d0:	f7fa ff4a 	bl	8000168 <__aeabi_dsub>
 80052d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052d6:	4606      	mov	r6, r0
 80052d8:	3330      	adds	r3, #48	; 0x30
 80052da:	f804 3b01 	strb.w	r3, [r4], #1
 80052de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052e0:	460f      	mov	r7, r1
 80052e2:	429c      	cmp	r4, r3
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	d124      	bne.n	8005334 <_dtoa_r+0x63c>
 80052ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052ee:	4baf      	ldr	r3, [pc, #700]	; (80055ac <_dtoa_r+0x8b4>)
 80052f0:	f7fa ff3c 	bl	800016c <__adddf3>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fb fb7c 	bl	80009f8 <__aeabi_dcmpgt>
 8005300:	2800      	cmp	r0, #0
 8005302:	d163      	bne.n	80053cc <_dtoa_r+0x6d4>
 8005304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005308:	2000      	movs	r0, #0
 800530a:	49a8      	ldr	r1, [pc, #672]	; (80055ac <_dtoa_r+0x8b4>)
 800530c:	f7fa ff2c 	bl	8000168 <__aeabi_dsub>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4630      	mov	r0, r6
 8005316:	4639      	mov	r1, r7
 8005318:	f7fb fb50 	bl	80009bc <__aeabi_dcmplt>
 800531c:	2800      	cmp	r0, #0
 800531e:	f43f af1e 	beq.w	800515e <_dtoa_r+0x466>
 8005322:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005324:	1e7b      	subs	r3, r7, #1
 8005326:	9314      	str	r3, [sp, #80]	; 0x50
 8005328:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d0f8      	beq.n	8005322 <_dtoa_r+0x62a>
 8005330:	46c3      	mov	fp, r8
 8005332:	e03b      	b.n	80053ac <_dtoa_r+0x6b4>
 8005334:	4b9e      	ldr	r3, [pc, #632]	; (80055b0 <_dtoa_r+0x8b8>)
 8005336:	f7fb f8cf 	bl	80004d8 <__aeabi_dmul>
 800533a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800533e:	e7bc      	b.n	80052ba <_dtoa_r+0x5c2>
 8005340:	9f03      	ldr	r7, [sp, #12]
 8005342:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800534a:	4640      	mov	r0, r8
 800534c:	4649      	mov	r1, r9
 800534e:	f7fb f9ed 	bl	800072c <__aeabi_ddiv>
 8005352:	f7fb fb71 	bl	8000a38 <__aeabi_d2iz>
 8005356:	4604      	mov	r4, r0
 8005358:	f7fb f854 	bl	8000404 <__aeabi_i2d>
 800535c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005360:	f7fb f8ba 	bl	80004d8 <__aeabi_dmul>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	f7fa fefc 	bl	8000168 <__aeabi_dsub>
 8005370:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005374:	f807 6b01 	strb.w	r6, [r7], #1
 8005378:	9e03      	ldr	r6, [sp, #12]
 800537a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800537e:	1bbe      	subs	r6, r7, r6
 8005380:	45b4      	cmp	ip, r6
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	d136      	bne.n	80053f6 <_dtoa_r+0x6fe>
 8005388:	f7fa fef0 	bl	800016c <__adddf3>
 800538c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005390:	4680      	mov	r8, r0
 8005392:	4689      	mov	r9, r1
 8005394:	f7fb fb30 	bl	80009f8 <__aeabi_dcmpgt>
 8005398:	bb58      	cbnz	r0, 80053f2 <_dtoa_r+0x6fa>
 800539a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800539e:	4640      	mov	r0, r8
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fb fb01 	bl	80009a8 <__aeabi_dcmpeq>
 80053a6:	b108      	cbz	r0, 80053ac <_dtoa_r+0x6b4>
 80053a8:	07e3      	lsls	r3, r4, #31
 80053aa:	d422      	bmi.n	80053f2 <_dtoa_r+0x6fa>
 80053ac:	4651      	mov	r1, sl
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fbc2 	bl	8005b38 <_Bfree>
 80053b4:	2300      	movs	r3, #0
 80053b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053b8:	703b      	strb	r3, [r7, #0]
 80053ba:	f10b 0301 	add.w	r3, fp, #1
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f43f ace6 	beq.w	8004d94 <_dtoa_r+0x9c>
 80053c8:	601f      	str	r7, [r3, #0]
 80053ca:	e4e3      	b.n	8004d94 <_dtoa_r+0x9c>
 80053cc:	4627      	mov	r7, r4
 80053ce:	463b      	mov	r3, r7
 80053d0:	461f      	mov	r7, r3
 80053d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053d6:	2a39      	cmp	r2, #57	; 0x39
 80053d8:	d107      	bne.n	80053ea <_dtoa_r+0x6f2>
 80053da:	9a03      	ldr	r2, [sp, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d1f7      	bne.n	80053d0 <_dtoa_r+0x6d8>
 80053e0:	2230      	movs	r2, #48	; 0x30
 80053e2:	9903      	ldr	r1, [sp, #12]
 80053e4:	f108 0801 	add.w	r8, r8, #1
 80053e8:	700a      	strb	r2, [r1, #0]
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	3201      	adds	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e79e      	b.n	8005330 <_dtoa_r+0x638>
 80053f2:	46d8      	mov	r8, fp
 80053f4:	e7eb      	b.n	80053ce <_dtoa_r+0x6d6>
 80053f6:	2200      	movs	r2, #0
 80053f8:	4b6d      	ldr	r3, [pc, #436]	; (80055b0 <_dtoa_r+0x8b8>)
 80053fa:	f7fb f86d 	bl	80004d8 <__aeabi_dmul>
 80053fe:	2200      	movs	r2, #0
 8005400:	2300      	movs	r3, #0
 8005402:	4680      	mov	r8, r0
 8005404:	4689      	mov	r9, r1
 8005406:	f7fb facf 	bl	80009a8 <__aeabi_dcmpeq>
 800540a:	2800      	cmp	r0, #0
 800540c:	d09b      	beq.n	8005346 <_dtoa_r+0x64e>
 800540e:	e7cd      	b.n	80053ac <_dtoa_r+0x6b4>
 8005410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005412:	2a00      	cmp	r2, #0
 8005414:	f000 80c4 	beq.w	80055a0 <_dtoa_r+0x8a8>
 8005418:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800541a:	2a01      	cmp	r2, #1
 800541c:	f300 80a8 	bgt.w	8005570 <_dtoa_r+0x878>
 8005420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005422:	2a00      	cmp	r2, #0
 8005424:	f000 80a0 	beq.w	8005568 <_dtoa_r+0x870>
 8005428:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800542c:	464f      	mov	r7, r9
 800542e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005432:	2101      	movs	r1, #1
 8005434:	441a      	add	r2, r3
 8005436:	4628      	mov	r0, r5
 8005438:	4499      	add	r9, r3
 800543a:	9209      	str	r2, [sp, #36]	; 0x24
 800543c:	f000 fc32 	bl	8005ca4 <__i2b>
 8005440:	4606      	mov	r6, r0
 8005442:	b15f      	cbz	r7, 800545c <_dtoa_r+0x764>
 8005444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	dd08      	ble.n	800545c <_dtoa_r+0x764>
 800544a:	42bb      	cmp	r3, r7
 800544c:	bfa8      	it	ge
 800544e:	463b      	movge	r3, r7
 8005450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005452:	eba9 0903 	sub.w	r9, r9, r3
 8005456:	1aff      	subs	r7, r7, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	9309      	str	r3, [sp, #36]	; 0x24
 800545c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800545e:	b1f3      	cbz	r3, 800549e <_dtoa_r+0x7a6>
 8005460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a0 	beq.w	80055a8 <_dtoa_r+0x8b0>
 8005468:	2c00      	cmp	r4, #0
 800546a:	dd10      	ble.n	800548e <_dtoa_r+0x796>
 800546c:	4631      	mov	r1, r6
 800546e:	4622      	mov	r2, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 fcd5 	bl	8005e20 <__pow5mult>
 8005476:	4652      	mov	r2, sl
 8005478:	4601      	mov	r1, r0
 800547a:	4606      	mov	r6, r0
 800547c:	4628      	mov	r0, r5
 800547e:	f000 fc27 	bl	8005cd0 <__multiply>
 8005482:	4680      	mov	r8, r0
 8005484:	4651      	mov	r1, sl
 8005486:	4628      	mov	r0, r5
 8005488:	f000 fb56 	bl	8005b38 <_Bfree>
 800548c:	46c2      	mov	sl, r8
 800548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005490:	1b1a      	subs	r2, r3, r4
 8005492:	d004      	beq.n	800549e <_dtoa_r+0x7a6>
 8005494:	4651      	mov	r1, sl
 8005496:	4628      	mov	r0, r5
 8005498:	f000 fcc2 	bl	8005e20 <__pow5mult>
 800549c:	4682      	mov	sl, r0
 800549e:	2101      	movs	r1, #1
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 fbff 	bl	8005ca4 <__i2b>
 80054a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a8:	4604      	mov	r4, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f340 8082 	ble.w	80055b4 <_dtoa_r+0x8bc>
 80054b0:	461a      	mov	r2, r3
 80054b2:	4601      	mov	r1, r0
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fcb3 	bl	8005e20 <__pow5mult>
 80054ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054bc:	4604      	mov	r4, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	dd7b      	ble.n	80055ba <_dtoa_r+0x8c2>
 80054c2:	f04f 0800 	mov.w	r8, #0
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054cc:	6918      	ldr	r0, [r3, #16]
 80054ce:	f000 fb9b 	bl	8005c08 <__hi0bits>
 80054d2:	f1c0 0020 	rsb	r0, r0, #32
 80054d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d8:	4418      	add	r0, r3
 80054da:	f010 001f 	ands.w	r0, r0, #31
 80054de:	f000 8092 	beq.w	8005606 <_dtoa_r+0x90e>
 80054e2:	f1c0 0320 	rsb	r3, r0, #32
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	f340 8085 	ble.w	80055f6 <_dtoa_r+0x8fe>
 80054ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ee:	f1c0 001c 	rsb	r0, r0, #28
 80054f2:	4403      	add	r3, r0
 80054f4:	4481      	add	r9, r0
 80054f6:	4407      	add	r7, r0
 80054f8:	9309      	str	r3, [sp, #36]	; 0x24
 80054fa:	f1b9 0f00 	cmp.w	r9, #0
 80054fe:	dd05      	ble.n	800550c <_dtoa_r+0x814>
 8005500:	4651      	mov	r1, sl
 8005502:	464a      	mov	r2, r9
 8005504:	4628      	mov	r0, r5
 8005506:	f000 fce5 	bl	8005ed4 <__lshift>
 800550a:	4682      	mov	sl, r0
 800550c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd05      	ble.n	800551e <_dtoa_r+0x826>
 8005512:	4621      	mov	r1, r4
 8005514:	461a      	mov	r2, r3
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fcdc 	bl	8005ed4 <__lshift>
 800551c:	4604      	mov	r4, r0
 800551e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d072      	beq.n	800560a <_dtoa_r+0x912>
 8005524:	4621      	mov	r1, r4
 8005526:	4650      	mov	r0, sl
 8005528:	f000 fd40 	bl	8005fac <__mcmp>
 800552c:	2800      	cmp	r0, #0
 800552e:	da6c      	bge.n	800560a <_dtoa_r+0x912>
 8005530:	2300      	movs	r3, #0
 8005532:	4651      	mov	r1, sl
 8005534:	220a      	movs	r2, #10
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fb20 	bl	8005b7c <__multadd>
 800553c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800553e:	4682      	mov	sl, r0
 8005540:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 81ac 	beq.w	80058a2 <_dtoa_r+0xbaa>
 800554a:	2300      	movs	r3, #0
 800554c:	4631      	mov	r1, r6
 800554e:	220a      	movs	r2, #10
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fb13 	bl	8005b7c <__multadd>
 8005556:	9b06      	ldr	r3, [sp, #24]
 8005558:	4606      	mov	r6, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	f300 8093 	bgt.w	8005686 <_dtoa_r+0x98e>
 8005560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005562:	2b02      	cmp	r3, #2
 8005564:	dc59      	bgt.n	800561a <_dtoa_r+0x922>
 8005566:	e08e      	b.n	8005686 <_dtoa_r+0x98e>
 8005568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800556a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800556e:	e75d      	b.n	800542c <_dtoa_r+0x734>
 8005570:	9b08      	ldr	r3, [sp, #32]
 8005572:	1e5c      	subs	r4, r3, #1
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	42a3      	cmp	r3, r4
 8005578:	bfbf      	itttt	lt
 800557a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800557c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800557e:	1ae3      	sublt	r3, r4, r3
 8005580:	18d2      	addlt	r2, r2, r3
 8005582:	bfa8      	it	ge
 8005584:	1b1c      	subge	r4, r3, r4
 8005586:	9b08      	ldr	r3, [sp, #32]
 8005588:	bfbe      	ittt	lt
 800558a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800558c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800558e:	2400      	movlt	r4, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	bfb5      	itete	lt
 8005594:	eba9 0703 	sublt.w	r7, r9, r3
 8005598:	464f      	movge	r7, r9
 800559a:	2300      	movlt	r3, #0
 800559c:	9b08      	ldrge	r3, [sp, #32]
 800559e:	e747      	b.n	8005430 <_dtoa_r+0x738>
 80055a0:	464f      	mov	r7, r9
 80055a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055a6:	e74c      	b.n	8005442 <_dtoa_r+0x74a>
 80055a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055aa:	e773      	b.n	8005494 <_dtoa_r+0x79c>
 80055ac:	3fe00000 	.word	0x3fe00000
 80055b0:	40240000 	.word	0x40240000
 80055b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	dc18      	bgt.n	80055ec <_dtoa_r+0x8f4>
 80055ba:	9b04      	ldr	r3, [sp, #16]
 80055bc:	b9b3      	cbnz	r3, 80055ec <_dtoa_r+0x8f4>
 80055be:	9b05      	ldr	r3, [sp, #20]
 80055c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055c4:	b993      	cbnz	r3, 80055ec <_dtoa_r+0x8f4>
 80055c6:	9b05      	ldr	r3, [sp, #20]
 80055c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055cc:	0d1b      	lsrs	r3, r3, #20
 80055ce:	051b      	lsls	r3, r3, #20
 80055d0:	b17b      	cbz	r3, 80055f2 <_dtoa_r+0x8fa>
 80055d2:	f04f 0801 	mov.w	r8, #1
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	f109 0901 	add.w	r9, r9, #1
 80055dc:	3301      	adds	r3, #1
 80055de:	9309      	str	r3, [sp, #36]	; 0x24
 80055e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f47f af6f 	bne.w	80054c6 <_dtoa_r+0x7ce>
 80055e8:	2001      	movs	r0, #1
 80055ea:	e774      	b.n	80054d6 <_dtoa_r+0x7de>
 80055ec:	f04f 0800 	mov.w	r8, #0
 80055f0:	e7f6      	b.n	80055e0 <_dtoa_r+0x8e8>
 80055f2:	4698      	mov	r8, r3
 80055f4:	e7f4      	b.n	80055e0 <_dtoa_r+0x8e8>
 80055f6:	d080      	beq.n	80054fa <_dtoa_r+0x802>
 80055f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fa:	331c      	adds	r3, #28
 80055fc:	441a      	add	r2, r3
 80055fe:	4499      	add	r9, r3
 8005600:	441f      	add	r7, r3
 8005602:	9209      	str	r2, [sp, #36]	; 0x24
 8005604:	e779      	b.n	80054fa <_dtoa_r+0x802>
 8005606:	4603      	mov	r3, r0
 8005608:	e7f6      	b.n	80055f8 <_dtoa_r+0x900>
 800560a:	9b08      	ldr	r3, [sp, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dc34      	bgt.n	800567a <_dtoa_r+0x982>
 8005610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005612:	2b02      	cmp	r3, #2
 8005614:	dd31      	ble.n	800567a <_dtoa_r+0x982>
 8005616:	9b08      	ldr	r3, [sp, #32]
 8005618:	9306      	str	r3, [sp, #24]
 800561a:	9b06      	ldr	r3, [sp, #24]
 800561c:	b963      	cbnz	r3, 8005638 <_dtoa_r+0x940>
 800561e:	4621      	mov	r1, r4
 8005620:	2205      	movs	r2, #5
 8005622:	4628      	mov	r0, r5
 8005624:	f000 faaa 	bl	8005b7c <__multadd>
 8005628:	4601      	mov	r1, r0
 800562a:	4604      	mov	r4, r0
 800562c:	4650      	mov	r0, sl
 800562e:	f000 fcbd 	bl	8005fac <__mcmp>
 8005632:	2800      	cmp	r0, #0
 8005634:	f73f adbf 	bgt.w	80051b6 <_dtoa_r+0x4be>
 8005638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800563a:	9f03      	ldr	r7, [sp, #12]
 800563c:	ea6f 0b03 	mvn.w	fp, r3
 8005640:	f04f 0800 	mov.w	r8, #0
 8005644:	4621      	mov	r1, r4
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fa76 	bl	8005b38 <_Bfree>
 800564c:	2e00      	cmp	r6, #0
 800564e:	f43f aead 	beq.w	80053ac <_dtoa_r+0x6b4>
 8005652:	f1b8 0f00 	cmp.w	r8, #0
 8005656:	d005      	beq.n	8005664 <_dtoa_r+0x96c>
 8005658:	45b0      	cmp	r8, r6
 800565a:	d003      	beq.n	8005664 <_dtoa_r+0x96c>
 800565c:	4641      	mov	r1, r8
 800565e:	4628      	mov	r0, r5
 8005660:	f000 fa6a 	bl	8005b38 <_Bfree>
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	f000 fa66 	bl	8005b38 <_Bfree>
 800566c:	e69e      	b.n	80053ac <_dtoa_r+0x6b4>
 800566e:	2400      	movs	r4, #0
 8005670:	4626      	mov	r6, r4
 8005672:	e7e1      	b.n	8005638 <_dtoa_r+0x940>
 8005674:	46c3      	mov	fp, r8
 8005676:	4626      	mov	r6, r4
 8005678:	e59d      	b.n	80051b6 <_dtoa_r+0x4be>
 800567a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80c8 	beq.w	8005812 <_dtoa_r+0xb1a>
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	9306      	str	r3, [sp, #24]
 8005686:	2f00      	cmp	r7, #0
 8005688:	dd05      	ble.n	8005696 <_dtoa_r+0x99e>
 800568a:	4631      	mov	r1, r6
 800568c:	463a      	mov	r2, r7
 800568e:	4628      	mov	r0, r5
 8005690:	f000 fc20 	bl	8005ed4 <__lshift>
 8005694:	4606      	mov	r6, r0
 8005696:	f1b8 0f00 	cmp.w	r8, #0
 800569a:	d05b      	beq.n	8005754 <_dtoa_r+0xa5c>
 800569c:	4628      	mov	r0, r5
 800569e:	6871      	ldr	r1, [r6, #4]
 80056a0:	f000 fa0a 	bl	8005ab8 <_Balloc>
 80056a4:	4607      	mov	r7, r0
 80056a6:	b928      	cbnz	r0, 80056b4 <_dtoa_r+0x9bc>
 80056a8:	4602      	mov	r2, r0
 80056aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80056ae:	4b81      	ldr	r3, [pc, #516]	; (80058b4 <_dtoa_r+0xbbc>)
 80056b0:	f7ff bb36 	b.w	8004d20 <_dtoa_r+0x28>
 80056b4:	6932      	ldr	r2, [r6, #16]
 80056b6:	f106 010c 	add.w	r1, r6, #12
 80056ba:	3202      	adds	r2, #2
 80056bc:	0092      	lsls	r2, r2, #2
 80056be:	300c      	adds	r0, #12
 80056c0:	f000 fe2c 	bl	800631c <memcpy>
 80056c4:	2201      	movs	r2, #1
 80056c6:	4639      	mov	r1, r7
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 fc03 	bl	8005ed4 <__lshift>
 80056ce:	46b0      	mov	r8, r6
 80056d0:	4606      	mov	r6, r0
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	9a03      	ldr	r2, [sp, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	9308      	str	r3, [sp, #32]
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	4413      	add	r3, r2
 80056de:	930b      	str	r3, [sp, #44]	; 0x2c
 80056e0:	9b04      	ldr	r3, [sp, #16]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	930a      	str	r3, [sp, #40]	; 0x28
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	4621      	mov	r1, r4
 80056ec:	3b01      	subs	r3, #1
 80056ee:	4650      	mov	r0, sl
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	f7ff fa78 	bl	8004be6 <quorem>
 80056f6:	4641      	mov	r1, r8
 80056f8:	9006      	str	r0, [sp, #24]
 80056fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056fe:	4650      	mov	r0, sl
 8005700:	f000 fc54 	bl	8005fac <__mcmp>
 8005704:	4632      	mov	r2, r6
 8005706:	9009      	str	r0, [sp, #36]	; 0x24
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 fc6a 	bl	8005fe4 <__mdiff>
 8005710:	68c2      	ldr	r2, [r0, #12]
 8005712:	4607      	mov	r7, r0
 8005714:	bb02      	cbnz	r2, 8005758 <_dtoa_r+0xa60>
 8005716:	4601      	mov	r1, r0
 8005718:	4650      	mov	r0, sl
 800571a:	f000 fc47 	bl	8005fac <__mcmp>
 800571e:	4602      	mov	r2, r0
 8005720:	4639      	mov	r1, r7
 8005722:	4628      	mov	r0, r5
 8005724:	920c      	str	r2, [sp, #48]	; 0x30
 8005726:	f000 fa07 	bl	8005b38 <_Bfree>
 800572a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800572c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800572e:	9f08      	ldr	r7, [sp, #32]
 8005730:	ea43 0102 	orr.w	r1, r3, r2
 8005734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005736:	4319      	orrs	r1, r3
 8005738:	d110      	bne.n	800575c <_dtoa_r+0xa64>
 800573a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800573e:	d029      	beq.n	8005794 <_dtoa_r+0xa9c>
 8005740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	dd02      	ble.n	800574c <_dtoa_r+0xa54>
 8005746:	9b06      	ldr	r3, [sp, #24]
 8005748:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	f883 9000 	strb.w	r9, [r3]
 8005752:	e777      	b.n	8005644 <_dtoa_r+0x94c>
 8005754:	4630      	mov	r0, r6
 8005756:	e7ba      	b.n	80056ce <_dtoa_r+0x9d6>
 8005758:	2201      	movs	r2, #1
 800575a:	e7e1      	b.n	8005720 <_dtoa_r+0xa28>
 800575c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	db04      	blt.n	800576c <_dtoa_r+0xa74>
 8005762:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005764:	430b      	orrs	r3, r1
 8005766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005768:	430b      	orrs	r3, r1
 800576a:	d120      	bne.n	80057ae <_dtoa_r+0xab6>
 800576c:	2a00      	cmp	r2, #0
 800576e:	dded      	ble.n	800574c <_dtoa_r+0xa54>
 8005770:	4651      	mov	r1, sl
 8005772:	2201      	movs	r2, #1
 8005774:	4628      	mov	r0, r5
 8005776:	f000 fbad 	bl	8005ed4 <__lshift>
 800577a:	4621      	mov	r1, r4
 800577c:	4682      	mov	sl, r0
 800577e:	f000 fc15 	bl	8005fac <__mcmp>
 8005782:	2800      	cmp	r0, #0
 8005784:	dc03      	bgt.n	800578e <_dtoa_r+0xa96>
 8005786:	d1e1      	bne.n	800574c <_dtoa_r+0xa54>
 8005788:	f019 0f01 	tst.w	r9, #1
 800578c:	d0de      	beq.n	800574c <_dtoa_r+0xa54>
 800578e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005792:	d1d8      	bne.n	8005746 <_dtoa_r+0xa4e>
 8005794:	2339      	movs	r3, #57	; 0x39
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	7013      	strb	r3, [r2, #0]
 800579a:	463b      	mov	r3, r7
 800579c:	461f      	mov	r7, r3
 800579e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	2a39      	cmp	r2, #57	; 0x39
 80057a6:	d06b      	beq.n	8005880 <_dtoa_r+0xb88>
 80057a8:	3201      	adds	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e74a      	b.n	8005644 <_dtoa_r+0x94c>
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	dd07      	ble.n	80057c2 <_dtoa_r+0xaca>
 80057b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057b6:	d0ed      	beq.n	8005794 <_dtoa_r+0xa9c>
 80057b8:	9a04      	ldr	r2, [sp, #16]
 80057ba:	f109 0301 	add.w	r3, r9, #1
 80057be:	7013      	strb	r3, [r2, #0]
 80057c0:	e740      	b.n	8005644 <_dtoa_r+0x94c>
 80057c2:	9b08      	ldr	r3, [sp, #32]
 80057c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d042      	beq.n	8005854 <_dtoa_r+0xb5c>
 80057ce:	4651      	mov	r1, sl
 80057d0:	2300      	movs	r3, #0
 80057d2:	220a      	movs	r2, #10
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f9d1 	bl	8005b7c <__multadd>
 80057da:	45b0      	cmp	r8, r6
 80057dc:	4682      	mov	sl, r0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	f04f 020a 	mov.w	r2, #10
 80057e6:	4641      	mov	r1, r8
 80057e8:	4628      	mov	r0, r5
 80057ea:	d107      	bne.n	80057fc <_dtoa_r+0xb04>
 80057ec:	f000 f9c6 	bl	8005b7c <__multadd>
 80057f0:	4680      	mov	r8, r0
 80057f2:	4606      	mov	r6, r0
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	3301      	adds	r3, #1
 80057f8:	9308      	str	r3, [sp, #32]
 80057fa:	e775      	b.n	80056e8 <_dtoa_r+0x9f0>
 80057fc:	f000 f9be 	bl	8005b7c <__multadd>
 8005800:	4631      	mov	r1, r6
 8005802:	4680      	mov	r8, r0
 8005804:	2300      	movs	r3, #0
 8005806:	220a      	movs	r2, #10
 8005808:	4628      	mov	r0, r5
 800580a:	f000 f9b7 	bl	8005b7c <__multadd>
 800580e:	4606      	mov	r6, r0
 8005810:	e7f0      	b.n	80057f4 <_dtoa_r+0xafc>
 8005812:	9b08      	ldr	r3, [sp, #32]
 8005814:	9306      	str	r3, [sp, #24]
 8005816:	9f03      	ldr	r7, [sp, #12]
 8005818:	4621      	mov	r1, r4
 800581a:	4650      	mov	r0, sl
 800581c:	f7ff f9e3 	bl	8004be6 <quorem>
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005826:	f807 9b01 	strb.w	r9, [r7], #1
 800582a:	1afa      	subs	r2, r7, r3
 800582c:	9b06      	ldr	r3, [sp, #24]
 800582e:	4293      	cmp	r3, r2
 8005830:	dd07      	ble.n	8005842 <_dtoa_r+0xb4a>
 8005832:	4651      	mov	r1, sl
 8005834:	2300      	movs	r3, #0
 8005836:	220a      	movs	r2, #10
 8005838:	4628      	mov	r0, r5
 800583a:	f000 f99f 	bl	8005b7c <__multadd>
 800583e:	4682      	mov	sl, r0
 8005840:	e7ea      	b.n	8005818 <_dtoa_r+0xb20>
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	f04f 0800 	mov.w	r8, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	bfcc      	ite	gt
 800584c:	461f      	movgt	r7, r3
 800584e:	2701      	movle	r7, #1
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	441f      	add	r7, r3
 8005854:	4651      	mov	r1, sl
 8005856:	2201      	movs	r2, #1
 8005858:	4628      	mov	r0, r5
 800585a:	f000 fb3b 	bl	8005ed4 <__lshift>
 800585e:	4621      	mov	r1, r4
 8005860:	4682      	mov	sl, r0
 8005862:	f000 fba3 	bl	8005fac <__mcmp>
 8005866:	2800      	cmp	r0, #0
 8005868:	dc97      	bgt.n	800579a <_dtoa_r+0xaa2>
 800586a:	d102      	bne.n	8005872 <_dtoa_r+0xb7a>
 800586c:	f019 0f01 	tst.w	r9, #1
 8005870:	d193      	bne.n	800579a <_dtoa_r+0xaa2>
 8005872:	463b      	mov	r3, r7
 8005874:	461f      	mov	r7, r3
 8005876:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800587a:	2a30      	cmp	r2, #48	; 0x30
 800587c:	d0fa      	beq.n	8005874 <_dtoa_r+0xb7c>
 800587e:	e6e1      	b.n	8005644 <_dtoa_r+0x94c>
 8005880:	9a03      	ldr	r2, [sp, #12]
 8005882:	429a      	cmp	r2, r3
 8005884:	d18a      	bne.n	800579c <_dtoa_r+0xaa4>
 8005886:	2331      	movs	r3, #49	; 0x31
 8005888:	f10b 0b01 	add.w	fp, fp, #1
 800588c:	e797      	b.n	80057be <_dtoa_r+0xac6>
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <_dtoa_r+0xbc0>)
 8005890:	f7ff ba9f 	b.w	8004dd2 <_dtoa_r+0xda>
 8005894:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005896:	2b00      	cmp	r3, #0
 8005898:	f47f aa77 	bne.w	8004d8a <_dtoa_r+0x92>
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <_dtoa_r+0xbc4>)
 800589e:	f7ff ba98 	b.w	8004dd2 <_dtoa_r+0xda>
 80058a2:	9b06      	ldr	r3, [sp, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dcb6      	bgt.n	8005816 <_dtoa_r+0xb1e>
 80058a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	f73f aeb5 	bgt.w	800561a <_dtoa_r+0x922>
 80058b0:	e7b1      	b.n	8005816 <_dtoa_r+0xb1e>
 80058b2:	bf00      	nop
 80058b4:	08006a4a 	.word	0x08006a4a
 80058b8:	080069aa 	.word	0x080069aa
 80058bc:	080069ce 	.word	0x080069ce

080058c0 <_free_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4605      	mov	r5, r0
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d040      	beq.n	800594a <_free_r+0x8a>
 80058c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058cc:	1f0c      	subs	r4, r1, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	18e4      	addlt	r4, r4, r3
 80058d4:	f000 f8e4 	bl	8005aa0 <__malloc_lock>
 80058d8:	4a1c      	ldr	r2, [pc, #112]	; (800594c <_free_r+0x8c>)
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	b933      	cbnz	r3, 80058ec <_free_r+0x2c>
 80058de:	6063      	str	r3, [r4, #4]
 80058e0:	6014      	str	r4, [r2, #0]
 80058e2:	4628      	mov	r0, r5
 80058e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e8:	f000 b8e0 	b.w	8005aac <__malloc_unlock>
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d908      	bls.n	8005902 <_free_r+0x42>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	1821      	adds	r1, r4, r0
 80058f4:	428b      	cmp	r3, r1
 80058f6:	bf01      	itttt	eq
 80058f8:	6819      	ldreq	r1, [r3, #0]
 80058fa:	685b      	ldreq	r3, [r3, #4]
 80058fc:	1809      	addeq	r1, r1, r0
 80058fe:	6021      	streq	r1, [r4, #0]
 8005900:	e7ed      	b.n	80058de <_free_r+0x1e>
 8005902:	461a      	mov	r2, r3
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b10b      	cbz	r3, 800590c <_free_r+0x4c>
 8005908:	42a3      	cmp	r3, r4
 800590a:	d9fa      	bls.n	8005902 <_free_r+0x42>
 800590c:	6811      	ldr	r1, [r2, #0]
 800590e:	1850      	adds	r0, r2, r1
 8005910:	42a0      	cmp	r0, r4
 8005912:	d10b      	bne.n	800592c <_free_r+0x6c>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	4401      	add	r1, r0
 8005918:	1850      	adds	r0, r2, r1
 800591a:	4283      	cmp	r3, r0
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	d1e0      	bne.n	80058e2 <_free_r+0x22>
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4408      	add	r0, r1
 8005926:	6010      	str	r0, [r2, #0]
 8005928:	6053      	str	r3, [r2, #4]
 800592a:	e7da      	b.n	80058e2 <_free_r+0x22>
 800592c:	d902      	bls.n	8005934 <_free_r+0x74>
 800592e:	230c      	movs	r3, #12
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	e7d6      	b.n	80058e2 <_free_r+0x22>
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	1821      	adds	r1, r4, r0
 8005938:	428b      	cmp	r3, r1
 800593a:	bf01      	itttt	eq
 800593c:	6819      	ldreq	r1, [r3, #0]
 800593e:	685b      	ldreq	r3, [r3, #4]
 8005940:	1809      	addeq	r1, r1, r0
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6063      	str	r3, [r4, #4]
 8005946:	6054      	str	r4, [r2, #4]
 8005948:	e7cb      	b.n	80058e2 <_free_r+0x22>
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	200004bc 	.word	0x200004bc

08005950 <malloc>:
 8005950:	4b02      	ldr	r3, [pc, #8]	; (800595c <malloc+0xc>)
 8005952:	4601      	mov	r1, r0
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	f000 b823 	b.w	80059a0 <_malloc_r>
 800595a:	bf00      	nop
 800595c:	20000078 	.word	0x20000078

08005960 <sbrk_aligned>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4e0e      	ldr	r6, [pc, #56]	; (800599c <sbrk_aligned+0x3c>)
 8005964:	460c      	mov	r4, r1
 8005966:	6831      	ldr	r1, [r6, #0]
 8005968:	4605      	mov	r5, r0
 800596a:	b911      	cbnz	r1, 8005972 <sbrk_aligned+0x12>
 800596c:	f000 fcc6 	bl	80062fc <_sbrk_r>
 8005970:	6030      	str	r0, [r6, #0]
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	f000 fcc1 	bl	80062fc <_sbrk_r>
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	d00a      	beq.n	8005994 <sbrk_aligned+0x34>
 800597e:	1cc4      	adds	r4, r0, #3
 8005980:	f024 0403 	bic.w	r4, r4, #3
 8005984:	42a0      	cmp	r0, r4
 8005986:	d007      	beq.n	8005998 <sbrk_aligned+0x38>
 8005988:	1a21      	subs	r1, r4, r0
 800598a:	4628      	mov	r0, r5
 800598c:	f000 fcb6 	bl	80062fc <_sbrk_r>
 8005990:	3001      	adds	r0, #1
 8005992:	d101      	bne.n	8005998 <sbrk_aligned+0x38>
 8005994:	f04f 34ff 	mov.w	r4, #4294967295
 8005998:	4620      	mov	r0, r4
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	200004c0 	.word	0x200004c0

080059a0 <_malloc_r>:
 80059a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a4:	1ccd      	adds	r5, r1, #3
 80059a6:	f025 0503 	bic.w	r5, r5, #3
 80059aa:	3508      	adds	r5, #8
 80059ac:	2d0c      	cmp	r5, #12
 80059ae:	bf38      	it	cc
 80059b0:	250c      	movcc	r5, #12
 80059b2:	2d00      	cmp	r5, #0
 80059b4:	4607      	mov	r7, r0
 80059b6:	db01      	blt.n	80059bc <_malloc_r+0x1c>
 80059b8:	42a9      	cmp	r1, r5
 80059ba:	d905      	bls.n	80059c8 <_malloc_r+0x28>
 80059bc:	230c      	movs	r3, #12
 80059be:	2600      	movs	r6, #0
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4630      	mov	r0, r6
 80059c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a9c <_malloc_r+0xfc>
 80059cc:	f000 f868 	bl	8005aa0 <__malloc_lock>
 80059d0:	f8d8 3000 	ldr.w	r3, [r8]
 80059d4:	461c      	mov	r4, r3
 80059d6:	bb5c      	cbnz	r4, 8005a30 <_malloc_r+0x90>
 80059d8:	4629      	mov	r1, r5
 80059da:	4638      	mov	r0, r7
 80059dc:	f7ff ffc0 	bl	8005960 <sbrk_aligned>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	4604      	mov	r4, r0
 80059e4:	d155      	bne.n	8005a92 <_malloc_r+0xf2>
 80059e6:	f8d8 4000 	ldr.w	r4, [r8]
 80059ea:	4626      	mov	r6, r4
 80059ec:	2e00      	cmp	r6, #0
 80059ee:	d145      	bne.n	8005a7c <_malloc_r+0xdc>
 80059f0:	2c00      	cmp	r4, #0
 80059f2:	d048      	beq.n	8005a86 <_malloc_r+0xe6>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	4631      	mov	r1, r6
 80059f8:	4638      	mov	r0, r7
 80059fa:	eb04 0903 	add.w	r9, r4, r3
 80059fe:	f000 fc7d 	bl	80062fc <_sbrk_r>
 8005a02:	4581      	cmp	r9, r0
 8005a04:	d13f      	bne.n	8005a86 <_malloc_r+0xe6>
 8005a06:	6821      	ldr	r1, [r4, #0]
 8005a08:	4638      	mov	r0, r7
 8005a0a:	1a6d      	subs	r5, r5, r1
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	f7ff ffa7 	bl	8005960 <sbrk_aligned>
 8005a12:	3001      	adds	r0, #1
 8005a14:	d037      	beq.n	8005a86 <_malloc_r+0xe6>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	442b      	add	r3, r5
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d038      	beq.n	8005a96 <_malloc_r+0xf6>
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	42a2      	cmp	r2, r4
 8005a28:	d12b      	bne.n	8005a82 <_malloc_r+0xe2>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	e00f      	b.n	8005a50 <_malloc_r+0xb0>
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	1b52      	subs	r2, r2, r5
 8005a34:	d41f      	bmi.n	8005a76 <_malloc_r+0xd6>
 8005a36:	2a0b      	cmp	r2, #11
 8005a38:	d917      	bls.n	8005a6a <_malloc_r+0xca>
 8005a3a:	1961      	adds	r1, r4, r5
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	6025      	str	r5, [r4, #0]
 8005a40:	bf18      	it	ne
 8005a42:	6059      	strne	r1, [r3, #4]
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	bf08      	it	eq
 8005a48:	f8c8 1000 	streq.w	r1, [r8]
 8005a4c:	5162      	str	r2, [r4, r5]
 8005a4e:	604b      	str	r3, [r1, #4]
 8005a50:	4638      	mov	r0, r7
 8005a52:	f104 060b 	add.w	r6, r4, #11
 8005a56:	f000 f829 	bl	8005aac <__malloc_unlock>
 8005a5a:	f026 0607 	bic.w	r6, r6, #7
 8005a5e:	1d23      	adds	r3, r4, #4
 8005a60:	1af2      	subs	r2, r6, r3
 8005a62:	d0ae      	beq.n	80059c2 <_malloc_r+0x22>
 8005a64:	1b9b      	subs	r3, r3, r6
 8005a66:	50a3      	str	r3, [r4, r2]
 8005a68:	e7ab      	b.n	80059c2 <_malloc_r+0x22>
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	6862      	ldr	r2, [r4, #4]
 8005a6e:	d1dd      	bne.n	8005a2c <_malloc_r+0x8c>
 8005a70:	f8c8 2000 	str.w	r2, [r8]
 8005a74:	e7ec      	b.n	8005a50 <_malloc_r+0xb0>
 8005a76:	4623      	mov	r3, r4
 8005a78:	6864      	ldr	r4, [r4, #4]
 8005a7a:	e7ac      	b.n	80059d6 <_malloc_r+0x36>
 8005a7c:	4634      	mov	r4, r6
 8005a7e:	6876      	ldr	r6, [r6, #4]
 8005a80:	e7b4      	b.n	80059ec <_malloc_r+0x4c>
 8005a82:	4613      	mov	r3, r2
 8005a84:	e7cc      	b.n	8005a20 <_malloc_r+0x80>
 8005a86:	230c      	movs	r3, #12
 8005a88:	4638      	mov	r0, r7
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	f000 f80e 	bl	8005aac <__malloc_unlock>
 8005a90:	e797      	b.n	80059c2 <_malloc_r+0x22>
 8005a92:	6025      	str	r5, [r4, #0]
 8005a94:	e7dc      	b.n	8005a50 <_malloc_r+0xb0>
 8005a96:	605b      	str	r3, [r3, #4]
 8005a98:	deff      	udf	#255	; 0xff
 8005a9a:	bf00      	nop
 8005a9c:	200004bc 	.word	0x200004bc

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f7ff b890 	b.w	8004bc6 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	200004b8 	.word	0x200004b8

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f7ff b88b 	b.w	8004bc8 <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200004b8 	.word	0x200004b8

08005ab8 <_Balloc>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	69c6      	ldr	r6, [r0, #28]
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	b976      	cbnz	r6, 8005ae0 <_Balloc+0x28>
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f7ff ff44 	bl	8005950 <malloc>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	61e0      	str	r0, [r4, #28]
 8005acc:	b920      	cbnz	r0, 8005ad8 <_Balloc+0x20>
 8005ace:	216b      	movs	r1, #107	; 0x6b
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <_Balloc+0x78>)
 8005ad2:	4818      	ldr	r0, [pc, #96]	; (8005b34 <_Balloc+0x7c>)
 8005ad4:	f000 fc30 	bl	8006338 <__assert_func>
 8005ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005adc:	6006      	str	r6, [r0, #0]
 8005ade:	60c6      	str	r6, [r0, #12]
 8005ae0:	69e6      	ldr	r6, [r4, #28]
 8005ae2:	68f3      	ldr	r3, [r6, #12]
 8005ae4:	b183      	cbz	r3, 8005b08 <_Balloc+0x50>
 8005ae6:	69e3      	ldr	r3, [r4, #28]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aee:	b9b8      	cbnz	r0, 8005b20 <_Balloc+0x68>
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f605 	lsl.w	r6, r1, r5
 8005af6:	1d72      	adds	r2, r6, #5
 8005af8:	4620      	mov	r0, r4
 8005afa:	0092      	lsls	r2, r2, #2
 8005afc:	f000 fc3a 	bl	8006374 <_calloc_r>
 8005b00:	b160      	cbz	r0, 8005b1c <_Balloc+0x64>
 8005b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b06:	e00e      	b.n	8005b26 <_Balloc+0x6e>
 8005b08:	2221      	movs	r2, #33	; 0x21
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 fc31 	bl	8006374 <_calloc_r>
 8005b12:	69e3      	ldr	r3, [r4, #28]
 8005b14:	60f0      	str	r0, [r6, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e4      	bne.n	8005ae6 <_Balloc+0x2e>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	6802      	ldr	r2, [r0, #0]
 8005b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b26:	2300      	movs	r3, #0
 8005b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b2c:	e7f7      	b.n	8005b1e <_Balloc+0x66>
 8005b2e:	bf00      	nop
 8005b30:	080069db 	.word	0x080069db
 8005b34:	08006a5b 	.word	0x08006a5b

08005b38 <_Bfree>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	69c6      	ldr	r6, [r0, #28]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	b976      	cbnz	r6, 8005b60 <_Bfree+0x28>
 8005b42:	2010      	movs	r0, #16
 8005b44:	f7ff ff04 	bl	8005950 <malloc>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	61e8      	str	r0, [r5, #28]
 8005b4c:	b920      	cbnz	r0, 8005b58 <_Bfree+0x20>
 8005b4e:	218f      	movs	r1, #143	; 0x8f
 8005b50:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <_Bfree+0x3c>)
 8005b52:	4809      	ldr	r0, [pc, #36]	; (8005b78 <_Bfree+0x40>)
 8005b54:	f000 fbf0 	bl	8006338 <__assert_func>
 8005b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b5c:	6006      	str	r6, [r0, #0]
 8005b5e:	60c6      	str	r6, [r0, #12]
 8005b60:	b13c      	cbz	r4, 8005b72 <_Bfree+0x3a>
 8005b62:	69eb      	ldr	r3, [r5, #28]
 8005b64:	6862      	ldr	r2, [r4, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b6c:	6021      	str	r1, [r4, #0]
 8005b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	080069db 	.word	0x080069db
 8005b78:	08006a5b 	.word	0x08006a5b

08005b7c <__multadd>:
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	4607      	mov	r7, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	461e      	mov	r6, r3
 8005b86:	2000      	movs	r0, #0
 8005b88:	690d      	ldr	r5, [r1, #16]
 8005b8a:	f101 0c14 	add.w	ip, r1, #20
 8005b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b92:	3001      	adds	r0, #1
 8005b94:	b299      	uxth	r1, r3
 8005b96:	fb02 6101 	mla	r1, r2, r1, r6
 8005b9a:	0c1e      	lsrs	r6, r3, #16
 8005b9c:	0c0b      	lsrs	r3, r1, #16
 8005b9e:	fb02 3306 	mla	r3, r2, r6, r3
 8005ba2:	b289      	uxth	r1, r1
 8005ba4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ba8:	4285      	cmp	r5, r0
 8005baa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005bae:	f84c 1b04 	str.w	r1, [ip], #4
 8005bb2:	dcec      	bgt.n	8005b8e <__multadd+0x12>
 8005bb4:	b30e      	cbz	r6, 8005bfa <__multadd+0x7e>
 8005bb6:	68a3      	ldr	r3, [r4, #8]
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dc19      	bgt.n	8005bf0 <__multadd+0x74>
 8005bbc:	6861      	ldr	r1, [r4, #4]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	f7ff ff79 	bl	8005ab8 <_Balloc>
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	b928      	cbnz	r0, 8005bd6 <__multadd+0x5a>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	21ba      	movs	r1, #186	; 0xba
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <__multadd+0x84>)
 8005bd0:	480c      	ldr	r0, [pc, #48]	; (8005c04 <__multadd+0x88>)
 8005bd2:	f000 fbb1 	bl	8006338 <__assert_func>
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	f104 010c 	add.w	r1, r4, #12
 8005bdc:	3202      	adds	r2, #2
 8005bde:	0092      	lsls	r2, r2, #2
 8005be0:	300c      	adds	r0, #12
 8005be2:	f000 fb9b 	bl	800631c <memcpy>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff ffa5 	bl	8005b38 <_Bfree>
 8005bee:	4644      	mov	r4, r8
 8005bf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	615e      	str	r6, [r3, #20]
 8005bf8:	6125      	str	r5, [r4, #16]
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	08006a4a 	.word	0x08006a4a
 8005c04:	08006a5b 	.word	0x08006a5b

08005c08 <__hi0bits>:
 8005c08:	0c02      	lsrs	r2, r0, #16
 8005c0a:	0412      	lsls	r2, r2, #16
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	b9ca      	cbnz	r2, 8005c44 <__hi0bits+0x3c>
 8005c10:	0403      	lsls	r3, r0, #16
 8005c12:	2010      	movs	r0, #16
 8005c14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c18:	bf04      	itt	eq
 8005c1a:	021b      	lsleq	r3, r3, #8
 8005c1c:	3008      	addeq	r0, #8
 8005c1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c22:	bf04      	itt	eq
 8005c24:	011b      	lsleq	r3, r3, #4
 8005c26:	3004      	addeq	r0, #4
 8005c28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c2c:	bf04      	itt	eq
 8005c2e:	009b      	lsleq	r3, r3, #2
 8005c30:	3002      	addeq	r0, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	db05      	blt.n	8005c42 <__hi0bits+0x3a>
 8005c36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c3a:	f100 0001 	add.w	r0, r0, #1
 8005c3e:	bf08      	it	eq
 8005c40:	2020      	moveq	r0, #32
 8005c42:	4770      	bx	lr
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7e5      	b.n	8005c14 <__hi0bits+0xc>

08005c48 <__lo0bits>:
 8005c48:	6803      	ldr	r3, [r0, #0]
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f013 0007 	ands.w	r0, r3, #7
 8005c50:	d00b      	beq.n	8005c6a <__lo0bits+0x22>
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	d421      	bmi.n	8005c9a <__lo0bits+0x52>
 8005c56:	0798      	lsls	r0, r3, #30
 8005c58:	bf49      	itett	mi
 8005c5a:	085b      	lsrmi	r3, r3, #1
 8005c5c:	089b      	lsrpl	r3, r3, #2
 8005c5e:	2001      	movmi	r0, #1
 8005c60:	6013      	strmi	r3, [r2, #0]
 8005c62:	bf5c      	itt	pl
 8005c64:	2002      	movpl	r0, #2
 8005c66:	6013      	strpl	r3, [r2, #0]
 8005c68:	4770      	bx	lr
 8005c6a:	b299      	uxth	r1, r3
 8005c6c:	b909      	cbnz	r1, 8005c72 <__lo0bits+0x2a>
 8005c6e:	2010      	movs	r0, #16
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	b2d9      	uxtb	r1, r3
 8005c74:	b909      	cbnz	r1, 8005c7a <__lo0bits+0x32>
 8005c76:	3008      	adds	r0, #8
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	0719      	lsls	r1, r3, #28
 8005c7c:	bf04      	itt	eq
 8005c7e:	091b      	lsreq	r3, r3, #4
 8005c80:	3004      	addeq	r0, #4
 8005c82:	0799      	lsls	r1, r3, #30
 8005c84:	bf04      	itt	eq
 8005c86:	089b      	lsreq	r3, r3, #2
 8005c88:	3002      	addeq	r0, #2
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	d403      	bmi.n	8005c96 <__lo0bits+0x4e>
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	f100 0001 	add.w	r0, r0, #1
 8005c94:	d003      	beq.n	8005c9e <__lo0bits+0x56>
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	4770      	bx	lr
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	4770      	bx	lr
 8005c9e:	2020      	movs	r0, #32
 8005ca0:	4770      	bx	lr
	...

08005ca4 <__i2b>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	2101      	movs	r1, #1
 8005caa:	f7ff ff05 	bl	8005ab8 <_Balloc>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	b928      	cbnz	r0, 8005cbe <__i2b+0x1a>
 8005cb2:	f240 1145 	movw	r1, #325	; 0x145
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <__i2b+0x24>)
 8005cb8:	4804      	ldr	r0, [pc, #16]	; (8005ccc <__i2b+0x28>)
 8005cba:	f000 fb3d 	bl	8006338 <__assert_func>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	6144      	str	r4, [r0, #20]
 8005cc2:	6103      	str	r3, [r0, #16]
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08006a4a 	.word	0x08006a4a
 8005ccc:	08006a5b 	.word	0x08006a5b

08005cd0 <__multiply>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	4691      	mov	r9, r2
 8005cd6:	690a      	ldr	r2, [r1, #16]
 8005cd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cdc:	460c      	mov	r4, r1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	bfbe      	ittt	lt
 8005ce2:	460b      	movlt	r3, r1
 8005ce4:	464c      	movlt	r4, r9
 8005ce6:	4699      	movlt	r9, r3
 8005ce8:	6927      	ldr	r7, [r4, #16]
 8005cea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	6861      	ldr	r1, [r4, #4]
 8005cf2:	eb07 060a 	add.w	r6, r7, sl
 8005cf6:	42b3      	cmp	r3, r6
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	bfb8      	it	lt
 8005cfc:	3101      	addlt	r1, #1
 8005cfe:	f7ff fedb 	bl	8005ab8 <_Balloc>
 8005d02:	b930      	cbnz	r0, 8005d12 <__multiply+0x42>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005d0a:	4b43      	ldr	r3, [pc, #268]	; (8005e18 <__multiply+0x148>)
 8005d0c:	4843      	ldr	r0, [pc, #268]	; (8005e1c <__multiply+0x14c>)
 8005d0e:	f000 fb13 	bl	8006338 <__assert_func>
 8005d12:	f100 0514 	add.w	r5, r0, #20
 8005d16:	462b      	mov	r3, r5
 8005d18:	2200      	movs	r2, #0
 8005d1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d1e:	4543      	cmp	r3, r8
 8005d20:	d321      	bcc.n	8005d66 <__multiply+0x96>
 8005d22:	f104 0314 	add.w	r3, r4, #20
 8005d26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d2a:	f109 0314 	add.w	r3, r9, #20
 8005d2e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d32:	9202      	str	r2, [sp, #8]
 8005d34:	1b3a      	subs	r2, r7, r4
 8005d36:	3a15      	subs	r2, #21
 8005d38:	f022 0203 	bic.w	r2, r2, #3
 8005d3c:	3204      	adds	r2, #4
 8005d3e:	f104 0115 	add.w	r1, r4, #21
 8005d42:	428f      	cmp	r7, r1
 8005d44:	bf38      	it	cc
 8005d46:	2204      	movcc	r2, #4
 8005d48:	9201      	str	r2, [sp, #4]
 8005d4a:	9a02      	ldr	r2, [sp, #8]
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d80c      	bhi.n	8005d6c <__multiply+0x9c>
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	dd03      	ble.n	8005d5e <__multiply+0x8e>
 8005d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d05a      	beq.n	8005e14 <__multiply+0x144>
 8005d5e:	6106      	str	r6, [r0, #16]
 8005d60:	b005      	add	sp, #20
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	f843 2b04 	str.w	r2, [r3], #4
 8005d6a:	e7d8      	b.n	8005d1e <__multiply+0x4e>
 8005d6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d70:	f1ba 0f00 	cmp.w	sl, #0
 8005d74:	d023      	beq.n	8005dbe <__multiply+0xee>
 8005d76:	46a9      	mov	r9, r5
 8005d78:	f04f 0c00 	mov.w	ip, #0
 8005d7c:	f104 0e14 	add.w	lr, r4, #20
 8005d80:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d84:	f8d9 1000 	ldr.w	r1, [r9]
 8005d88:	fa1f fb82 	uxth.w	fp, r2
 8005d8c:	b289      	uxth	r1, r1
 8005d8e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d92:	4461      	add	r1, ip
 8005d94:	f8d9 c000 	ldr.w	ip, [r9]
 8005d98:	0c12      	lsrs	r2, r2, #16
 8005d9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d9e:	fb0a c202 	mla	r2, sl, r2, ip
 8005da2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005da6:	b289      	uxth	r1, r1
 8005da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dac:	4577      	cmp	r7, lr
 8005dae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005db2:	f849 1b04 	str.w	r1, [r9], #4
 8005db6:	d8e3      	bhi.n	8005d80 <__multiply+0xb0>
 8005db8:	9a01      	ldr	r2, [sp, #4]
 8005dba:	f845 c002 	str.w	ip, [r5, r2]
 8005dbe:	9a03      	ldr	r2, [sp, #12]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005dc6:	f1b9 0f00 	cmp.w	r9, #0
 8005dca:	d021      	beq.n	8005e10 <__multiply+0x140>
 8005dcc:	46ae      	mov	lr, r5
 8005dce:	f04f 0a00 	mov.w	sl, #0
 8005dd2:	6829      	ldr	r1, [r5, #0]
 8005dd4:	f104 0c14 	add.w	ip, r4, #20
 8005dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8005ddc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005de0:	b289      	uxth	r1, r1
 8005de2:	fb09 220b 	mla	r2, r9, fp, r2
 8005de6:	4452      	add	r2, sl
 8005de8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dec:	f84e 1b04 	str.w	r1, [lr], #4
 8005df0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005df8:	f8be 1000 	ldrh.w	r1, [lr]
 8005dfc:	4567      	cmp	r7, ip
 8005dfe:	fb09 110a 	mla	r1, r9, sl, r1
 8005e02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005e06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e0a:	d8e5      	bhi.n	8005dd8 <__multiply+0x108>
 8005e0c:	9a01      	ldr	r2, [sp, #4]
 8005e0e:	50a9      	str	r1, [r5, r2]
 8005e10:	3504      	adds	r5, #4
 8005e12:	e79a      	b.n	8005d4a <__multiply+0x7a>
 8005e14:	3e01      	subs	r6, #1
 8005e16:	e79c      	b.n	8005d52 <__multiply+0x82>
 8005e18:	08006a4a 	.word	0x08006a4a
 8005e1c:	08006a5b 	.word	0x08006a5b

08005e20 <__pow5mult>:
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	4615      	mov	r5, r2
 8005e26:	f012 0203 	ands.w	r2, r2, #3
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	d007      	beq.n	8005e40 <__pow5mult+0x20>
 8005e30:	4c25      	ldr	r4, [pc, #148]	; (8005ec8 <__pow5mult+0xa8>)
 8005e32:	3a01      	subs	r2, #1
 8005e34:	2300      	movs	r3, #0
 8005e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e3a:	f7ff fe9f 	bl	8005b7c <__multadd>
 8005e3e:	4607      	mov	r7, r0
 8005e40:	10ad      	asrs	r5, r5, #2
 8005e42:	d03d      	beq.n	8005ec0 <__pow5mult+0xa0>
 8005e44:	69f4      	ldr	r4, [r6, #28]
 8005e46:	b97c      	cbnz	r4, 8005e68 <__pow5mult+0x48>
 8005e48:	2010      	movs	r0, #16
 8005e4a:	f7ff fd81 	bl	8005950 <malloc>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	61f0      	str	r0, [r6, #28]
 8005e52:	b928      	cbnz	r0, 8005e60 <__pow5mult+0x40>
 8005e54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005e58:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <__pow5mult+0xac>)
 8005e5a:	481d      	ldr	r0, [pc, #116]	; (8005ed0 <__pow5mult+0xb0>)
 8005e5c:	f000 fa6c 	bl	8006338 <__assert_func>
 8005e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e64:	6004      	str	r4, [r0, #0]
 8005e66:	60c4      	str	r4, [r0, #12]
 8005e68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e70:	b94c      	cbnz	r4, 8005e86 <__pow5mult+0x66>
 8005e72:	f240 2171 	movw	r1, #625	; 0x271
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff ff14 	bl	8005ca4 <__i2b>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	f04f 0900 	mov.w	r9, #0
 8005e8a:	07eb      	lsls	r3, r5, #31
 8005e8c:	d50a      	bpl.n	8005ea4 <__pow5mult+0x84>
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4622      	mov	r2, r4
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ff1c 	bl	8005cd0 <__multiply>
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff fe4b 	bl	8005b38 <_Bfree>
 8005ea2:	4647      	mov	r7, r8
 8005ea4:	106d      	asrs	r5, r5, #1
 8005ea6:	d00b      	beq.n	8005ec0 <__pow5mult+0xa0>
 8005ea8:	6820      	ldr	r0, [r4, #0]
 8005eaa:	b938      	cbnz	r0, 8005ebc <__pow5mult+0x9c>
 8005eac:	4622      	mov	r2, r4
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff ff0d 	bl	8005cd0 <__multiply>
 8005eb6:	6020      	str	r0, [r4, #0]
 8005eb8:	f8c0 9000 	str.w	r9, [r0]
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e7e4      	b.n	8005e8a <__pow5mult+0x6a>
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec6:	bf00      	nop
 8005ec8:	08006ba8 	.word	0x08006ba8
 8005ecc:	080069db 	.word	0x080069db
 8005ed0:	08006a5b 	.word	0x08006a5b

08005ed4 <__lshift>:
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	460c      	mov	r4, r1
 8005eda:	4607      	mov	r7, r0
 8005edc:	4691      	mov	r9, r2
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	6849      	ldr	r1, [r1, #4]
 8005ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ee6:	68a3      	ldr	r3, [r4, #8]
 8005ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005eec:	f108 0601 	add.w	r6, r8, #1
 8005ef0:	42b3      	cmp	r3, r6
 8005ef2:	db0b      	blt.n	8005f0c <__lshift+0x38>
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	f7ff fddf 	bl	8005ab8 <_Balloc>
 8005efa:	4605      	mov	r5, r0
 8005efc:	b948      	cbnz	r0, 8005f12 <__lshift+0x3e>
 8005efe:	4602      	mov	r2, r0
 8005f00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005f04:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <__lshift+0xd0>)
 8005f06:	4828      	ldr	r0, [pc, #160]	; (8005fa8 <__lshift+0xd4>)
 8005f08:	f000 fa16 	bl	8006338 <__assert_func>
 8005f0c:	3101      	adds	r1, #1
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	e7ee      	b.n	8005ef0 <__lshift+0x1c>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f100 0114 	add.w	r1, r0, #20
 8005f18:	f100 0210 	add.w	r2, r0, #16
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	4553      	cmp	r3, sl
 8005f20:	db33      	blt.n	8005f8a <__lshift+0xb6>
 8005f22:	6920      	ldr	r0, [r4, #16]
 8005f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f28:	f104 0314 	add.w	r3, r4, #20
 8005f2c:	f019 091f 	ands.w	r9, r9, #31
 8005f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f38:	d02b      	beq.n	8005f92 <__lshift+0xbe>
 8005f3a:	468a      	mov	sl, r1
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	fa00 f009 	lsl.w	r0, r0, r9
 8005f48:	4310      	orrs	r0, r2
 8005f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f52:	459c      	cmp	ip, r3
 8005f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f58:	d8f3      	bhi.n	8005f42 <__lshift+0x6e>
 8005f5a:	ebac 0304 	sub.w	r3, ip, r4
 8005f5e:	3b15      	subs	r3, #21
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	3304      	adds	r3, #4
 8005f66:	f104 0015 	add.w	r0, r4, #21
 8005f6a:	4584      	cmp	ip, r0
 8005f6c:	bf38      	it	cc
 8005f6e:	2304      	movcc	r3, #4
 8005f70:	50ca      	str	r2, [r1, r3]
 8005f72:	b10a      	cbz	r2, 8005f78 <__lshift+0xa4>
 8005f74:	f108 0602 	add.w	r6, r8, #2
 8005f78:	3e01      	subs	r6, #1
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	612e      	str	r6, [r5, #16]
 8005f80:	f7ff fdda 	bl	8005b38 <_Bfree>
 8005f84:	4628      	mov	r0, r5
 8005f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f8e:	3301      	adds	r3, #1
 8005f90:	e7c5      	b.n	8005f1e <__lshift+0x4a>
 8005f92:	3904      	subs	r1, #4
 8005f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f98:	459c      	cmp	ip, r3
 8005f9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f9e:	d8f9      	bhi.n	8005f94 <__lshift+0xc0>
 8005fa0:	e7ea      	b.n	8005f78 <__lshift+0xa4>
 8005fa2:	bf00      	nop
 8005fa4:	08006a4a 	.word	0x08006a4a
 8005fa8:	08006a5b 	.word	0x08006a5b

08005fac <__mcmp>:
 8005fac:	4603      	mov	r3, r0
 8005fae:	690a      	ldr	r2, [r1, #16]
 8005fb0:	6900      	ldr	r0, [r0, #16]
 8005fb2:	b530      	push	{r4, r5, lr}
 8005fb4:	1a80      	subs	r0, r0, r2
 8005fb6:	d10d      	bne.n	8005fd4 <__mcmp+0x28>
 8005fb8:	3314      	adds	r3, #20
 8005fba:	3114      	adds	r1, #20
 8005fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fcc:	4295      	cmp	r5, r2
 8005fce:	d002      	beq.n	8005fd6 <__mcmp+0x2a>
 8005fd0:	d304      	bcc.n	8005fdc <__mcmp+0x30>
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	bd30      	pop	{r4, r5, pc}
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	d3f4      	bcc.n	8005fc4 <__mcmp+0x18>
 8005fda:	e7fb      	b.n	8005fd4 <__mcmp+0x28>
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	e7f8      	b.n	8005fd4 <__mcmp+0x28>
	...

08005fe4 <__mdiff>:
 8005fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	460d      	mov	r5, r1
 8005fea:	4607      	mov	r7, r0
 8005fec:	4611      	mov	r1, r2
 8005fee:	4628      	mov	r0, r5
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	f7ff ffdb 	bl	8005fac <__mcmp>
 8005ff6:	1e06      	subs	r6, r0, #0
 8005ff8:	d111      	bne.n	800601e <__mdiff+0x3a>
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff fd5b 	bl	8005ab8 <_Balloc>
 8006002:	4602      	mov	r2, r0
 8006004:	b928      	cbnz	r0, 8006012 <__mdiff+0x2e>
 8006006:	f240 2137 	movw	r1, #567	; 0x237
 800600a:	4b3a      	ldr	r3, [pc, #232]	; (80060f4 <__mdiff+0x110>)
 800600c:	483a      	ldr	r0, [pc, #232]	; (80060f8 <__mdiff+0x114>)
 800600e:	f000 f993 	bl	8006338 <__assert_func>
 8006012:	2301      	movs	r3, #1
 8006014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006018:	4610      	mov	r0, r2
 800601a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	bfa4      	itt	ge
 8006020:	4623      	movge	r3, r4
 8006022:	462c      	movge	r4, r5
 8006024:	4638      	mov	r0, r7
 8006026:	6861      	ldr	r1, [r4, #4]
 8006028:	bfa6      	itte	ge
 800602a:	461d      	movge	r5, r3
 800602c:	2600      	movge	r6, #0
 800602e:	2601      	movlt	r6, #1
 8006030:	f7ff fd42 	bl	8005ab8 <_Balloc>
 8006034:	4602      	mov	r2, r0
 8006036:	b918      	cbnz	r0, 8006040 <__mdiff+0x5c>
 8006038:	f240 2145 	movw	r1, #581	; 0x245
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <__mdiff+0x110>)
 800603e:	e7e5      	b.n	800600c <__mdiff+0x28>
 8006040:	f102 0814 	add.w	r8, r2, #20
 8006044:	46c2      	mov	sl, r8
 8006046:	f04f 0c00 	mov.w	ip, #0
 800604a:	6927      	ldr	r7, [r4, #16]
 800604c:	60c6      	str	r6, [r0, #12]
 800604e:	692e      	ldr	r6, [r5, #16]
 8006050:	f104 0014 	add.w	r0, r4, #20
 8006054:	f105 0914 	add.w	r9, r5, #20
 8006058:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800605c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006060:	3410      	adds	r4, #16
 8006062:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006066:	f859 3b04 	ldr.w	r3, [r9], #4
 800606a:	fa1f f18b 	uxth.w	r1, fp
 800606e:	4461      	add	r1, ip
 8006070:	fa1f fc83 	uxth.w	ip, r3
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	eba1 010c 	sub.w	r1, r1, ip
 800607a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800607e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006082:	b289      	uxth	r1, r1
 8006084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006088:	454e      	cmp	r6, r9
 800608a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800608e:	f84a 1b04 	str.w	r1, [sl], #4
 8006092:	d8e6      	bhi.n	8006062 <__mdiff+0x7e>
 8006094:	1b73      	subs	r3, r6, r5
 8006096:	3b15      	subs	r3, #21
 8006098:	f023 0303 	bic.w	r3, r3, #3
 800609c:	3515      	adds	r5, #21
 800609e:	3304      	adds	r3, #4
 80060a0:	42ae      	cmp	r6, r5
 80060a2:	bf38      	it	cc
 80060a4:	2304      	movcc	r3, #4
 80060a6:	4418      	add	r0, r3
 80060a8:	4443      	add	r3, r8
 80060aa:	461e      	mov	r6, r3
 80060ac:	4605      	mov	r5, r0
 80060ae:	4575      	cmp	r5, lr
 80060b0:	d30e      	bcc.n	80060d0 <__mdiff+0xec>
 80060b2:	f10e 0103 	add.w	r1, lr, #3
 80060b6:	1a09      	subs	r1, r1, r0
 80060b8:	f021 0103 	bic.w	r1, r1, #3
 80060bc:	3803      	subs	r0, #3
 80060be:	4586      	cmp	lr, r0
 80060c0:	bf38      	it	cc
 80060c2:	2100      	movcc	r1, #0
 80060c4:	440b      	add	r3, r1
 80060c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060ca:	b189      	cbz	r1, 80060f0 <__mdiff+0x10c>
 80060cc:	6117      	str	r7, [r2, #16]
 80060ce:	e7a3      	b.n	8006018 <__mdiff+0x34>
 80060d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80060d4:	fa1f f188 	uxth.w	r1, r8
 80060d8:	4461      	add	r1, ip
 80060da:	140c      	asrs	r4, r1, #16
 80060dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060e0:	b289      	uxth	r1, r1
 80060e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060e6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80060ea:	f846 1b04 	str.w	r1, [r6], #4
 80060ee:	e7de      	b.n	80060ae <__mdiff+0xca>
 80060f0:	3f01      	subs	r7, #1
 80060f2:	e7e8      	b.n	80060c6 <__mdiff+0xe2>
 80060f4:	08006a4a 	.word	0x08006a4a
 80060f8:	08006a5b 	.word	0x08006a5b

080060fc <__d2b>:
 80060fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060fe:	2101      	movs	r1, #1
 8006100:	4617      	mov	r7, r2
 8006102:	461c      	mov	r4, r3
 8006104:	9e08      	ldr	r6, [sp, #32]
 8006106:	f7ff fcd7 	bl	8005ab8 <_Balloc>
 800610a:	4605      	mov	r5, r0
 800610c:	b930      	cbnz	r0, 800611c <__d2b+0x20>
 800610e:	4602      	mov	r2, r0
 8006110:	f240 310f 	movw	r1, #783	; 0x30f
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <__d2b+0xa4>)
 8006116:	4823      	ldr	r0, [pc, #140]	; (80061a4 <__d2b+0xa8>)
 8006118:	f000 f90e 	bl	8006338 <__assert_func>
 800611c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006120:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006124:	bb24      	cbnz	r4, 8006170 <__d2b+0x74>
 8006126:	2f00      	cmp	r7, #0
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	d026      	beq.n	800617a <__d2b+0x7e>
 800612c:	4668      	mov	r0, sp
 800612e:	9700      	str	r7, [sp, #0]
 8006130:	f7ff fd8a 	bl	8005c48 <__lo0bits>
 8006134:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006138:	b1e8      	cbz	r0, 8006176 <__d2b+0x7a>
 800613a:	f1c0 0320 	rsb	r3, r0, #32
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	430b      	orrs	r3, r1
 8006144:	40c2      	lsrs	r2, r0
 8006146:	616b      	str	r3, [r5, #20]
 8006148:	9201      	str	r2, [sp, #4]
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2102      	movne	r1, #2
 8006152:	2101      	moveq	r1, #1
 8006154:	61ab      	str	r3, [r5, #24]
 8006156:	6129      	str	r1, [r5, #16]
 8006158:	b1bc      	cbz	r4, 800618a <__d2b+0x8e>
 800615a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800615e:	4404      	add	r4, r0
 8006160:	6034      	str	r4, [r6, #0]
 8006162:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006168:	6018      	str	r0, [r3, #0]
 800616a:	4628      	mov	r0, r5
 800616c:	b003      	add	sp, #12
 800616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006174:	e7d7      	b.n	8006126 <__d2b+0x2a>
 8006176:	6169      	str	r1, [r5, #20]
 8006178:	e7e7      	b.n	800614a <__d2b+0x4e>
 800617a:	a801      	add	r0, sp, #4
 800617c:	f7ff fd64 	bl	8005c48 <__lo0bits>
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	2101      	movs	r1, #1
 8006184:	616b      	str	r3, [r5, #20]
 8006186:	3020      	adds	r0, #32
 8006188:	e7e5      	b.n	8006156 <__d2b+0x5a>
 800618a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800618e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006192:	6030      	str	r0, [r6, #0]
 8006194:	6918      	ldr	r0, [r3, #16]
 8006196:	f7ff fd37 	bl	8005c08 <__hi0bits>
 800619a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800619e:	e7e2      	b.n	8006166 <__d2b+0x6a>
 80061a0:	08006a4a 	.word	0x08006a4a
 80061a4:	08006a5b 	.word	0x08006a5b

080061a8 <__sflush_r>:
 80061a8:	898a      	ldrh	r2, [r1, #12]
 80061aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ac:	4605      	mov	r5, r0
 80061ae:	0710      	lsls	r0, r2, #28
 80061b0:	460c      	mov	r4, r1
 80061b2:	d457      	bmi.n	8006264 <__sflush_r+0xbc>
 80061b4:	684b      	ldr	r3, [r1, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dc04      	bgt.n	80061c4 <__sflush_r+0x1c>
 80061ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dc01      	bgt.n	80061c4 <__sflush_r+0x1c>
 80061c0:	2000      	movs	r0, #0
 80061c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d0fa      	beq.n	80061c0 <__sflush_r+0x18>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061d0:	682f      	ldr	r7, [r5, #0]
 80061d2:	6a21      	ldr	r1, [r4, #32]
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	d032      	beq.n	800623e <__sflush_r+0x96>
 80061d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	075a      	lsls	r2, r3, #29
 80061de:	d505      	bpl.n	80061ec <__sflush_r+0x44>
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	1ac0      	subs	r0, r0, r3
 80061e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061e6:	b10b      	cbz	r3, 80061ec <__sflush_r+0x44>
 80061e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061ea:	1ac0      	subs	r0, r0, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	4602      	mov	r2, r0
 80061f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f2:	4628      	mov	r0, r5
 80061f4:	6a21      	ldr	r1, [r4, #32]
 80061f6:	47b0      	blx	r6
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	d106      	bne.n	800620c <__sflush_r+0x64>
 80061fe:	6829      	ldr	r1, [r5, #0]
 8006200:	291d      	cmp	r1, #29
 8006202:	d82b      	bhi.n	800625c <__sflush_r+0xb4>
 8006204:	4a28      	ldr	r2, [pc, #160]	; (80062a8 <__sflush_r+0x100>)
 8006206:	410a      	asrs	r2, r1
 8006208:	07d6      	lsls	r6, r2, #31
 800620a:	d427      	bmi.n	800625c <__sflush_r+0xb4>
 800620c:	2200      	movs	r2, #0
 800620e:	6062      	str	r2, [r4, #4]
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	04d9      	lsls	r1, r3, #19
 8006214:	6022      	str	r2, [r4, #0]
 8006216:	d504      	bpl.n	8006222 <__sflush_r+0x7a>
 8006218:	1c42      	adds	r2, r0, #1
 800621a:	d101      	bne.n	8006220 <__sflush_r+0x78>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b903      	cbnz	r3, 8006222 <__sflush_r+0x7a>
 8006220:	6560      	str	r0, [r4, #84]	; 0x54
 8006222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006224:	602f      	str	r7, [r5, #0]
 8006226:	2900      	cmp	r1, #0
 8006228:	d0ca      	beq.n	80061c0 <__sflush_r+0x18>
 800622a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800622e:	4299      	cmp	r1, r3
 8006230:	d002      	beq.n	8006238 <__sflush_r+0x90>
 8006232:	4628      	mov	r0, r5
 8006234:	f7ff fb44 	bl	80058c0 <_free_r>
 8006238:	2000      	movs	r0, #0
 800623a:	6360      	str	r0, [r4, #52]	; 0x34
 800623c:	e7c1      	b.n	80061c2 <__sflush_r+0x1a>
 800623e:	2301      	movs	r3, #1
 8006240:	4628      	mov	r0, r5
 8006242:	47b0      	blx	r6
 8006244:	1c41      	adds	r1, r0, #1
 8006246:	d1c8      	bne.n	80061da <__sflush_r+0x32>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0c5      	beq.n	80061da <__sflush_r+0x32>
 800624e:	2b1d      	cmp	r3, #29
 8006250:	d001      	beq.n	8006256 <__sflush_r+0xae>
 8006252:	2b16      	cmp	r3, #22
 8006254:	d101      	bne.n	800625a <__sflush_r+0xb2>
 8006256:	602f      	str	r7, [r5, #0]
 8006258:	e7b2      	b.n	80061c0 <__sflush_r+0x18>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	e7ae      	b.n	80061c2 <__sflush_r+0x1a>
 8006264:	690f      	ldr	r7, [r1, #16]
 8006266:	2f00      	cmp	r7, #0
 8006268:	d0aa      	beq.n	80061c0 <__sflush_r+0x18>
 800626a:	0793      	lsls	r3, r2, #30
 800626c:	bf18      	it	ne
 800626e:	2300      	movne	r3, #0
 8006270:	680e      	ldr	r6, [r1, #0]
 8006272:	bf08      	it	eq
 8006274:	694b      	ldreq	r3, [r1, #20]
 8006276:	1bf6      	subs	r6, r6, r7
 8006278:	600f      	str	r7, [r1, #0]
 800627a:	608b      	str	r3, [r1, #8]
 800627c:	2e00      	cmp	r6, #0
 800627e:	dd9f      	ble.n	80061c0 <__sflush_r+0x18>
 8006280:	4633      	mov	r3, r6
 8006282:	463a      	mov	r2, r7
 8006284:	4628      	mov	r0, r5
 8006286:	6a21      	ldr	r1, [r4, #32]
 8006288:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800628c:	47e0      	blx	ip
 800628e:	2800      	cmp	r0, #0
 8006290:	dc06      	bgt.n	80062a0 <__sflush_r+0xf8>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	e790      	b.n	80061c2 <__sflush_r+0x1a>
 80062a0:	4407      	add	r7, r0
 80062a2:	1a36      	subs	r6, r6, r0
 80062a4:	e7ea      	b.n	800627c <__sflush_r+0xd4>
 80062a6:	bf00      	nop
 80062a8:	dfbffffe 	.word	0xdfbffffe

080062ac <_fflush_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	690b      	ldr	r3, [r1, #16]
 80062b0:	4605      	mov	r5, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	b913      	cbnz	r3, 80062bc <_fflush_r+0x10>
 80062b6:	2500      	movs	r5, #0
 80062b8:	4628      	mov	r0, r5
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	b118      	cbz	r0, 80062c6 <_fflush_r+0x1a>
 80062be:	6a03      	ldr	r3, [r0, #32]
 80062c0:	b90b      	cbnz	r3, 80062c6 <_fflush_r+0x1a>
 80062c2:	f7fe fb89 	bl	80049d8 <__sinit>
 80062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f3      	beq.n	80062b6 <_fflush_r+0xa>
 80062ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062d0:	07d0      	lsls	r0, r2, #31
 80062d2:	d404      	bmi.n	80062de <_fflush_r+0x32>
 80062d4:	0599      	lsls	r1, r3, #22
 80062d6:	d402      	bmi.n	80062de <_fflush_r+0x32>
 80062d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062da:	f7fe fc74 	bl	8004bc6 <__retarget_lock_acquire_recursive>
 80062de:	4628      	mov	r0, r5
 80062e0:	4621      	mov	r1, r4
 80062e2:	f7ff ff61 	bl	80061a8 <__sflush_r>
 80062e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e8:	4605      	mov	r5, r0
 80062ea:	07da      	lsls	r2, r3, #31
 80062ec:	d4e4      	bmi.n	80062b8 <_fflush_r+0xc>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	059b      	lsls	r3, r3, #22
 80062f2:	d4e1      	bmi.n	80062b8 <_fflush_r+0xc>
 80062f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f6:	f7fe fc67 	bl	8004bc8 <__retarget_lock_release_recursive>
 80062fa:	e7dd      	b.n	80062b8 <_fflush_r+0xc>

080062fc <_sbrk_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	2300      	movs	r3, #0
 8006300:	4d05      	ldr	r5, [pc, #20]	; (8006318 <_sbrk_r+0x1c>)
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fb fa32 	bl	8001770 <_sbrk>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_sbrk_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_sbrk_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200004b4 	.word	0x200004b4

0800631c <memcpy>:
 800631c:	440a      	add	r2, r1
 800631e:	4291      	cmp	r1, r2
 8006320:	f100 33ff 	add.w	r3, r0, #4294967295
 8006324:	d100      	bne.n	8006328 <memcpy+0xc>
 8006326:	4770      	bx	lr
 8006328:	b510      	push	{r4, lr}
 800632a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632e:	4291      	cmp	r1, r2
 8006330:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006334:	d1f9      	bne.n	800632a <memcpy+0xe>
 8006336:	bd10      	pop	{r4, pc}

08006338 <__assert_func>:
 8006338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800633a:	4614      	mov	r4, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <__assert_func+0x2c>)
 8006340:	4605      	mov	r5, r0
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68d8      	ldr	r0, [r3, #12]
 8006346:	b14c      	cbz	r4, 800635c <__assert_func+0x24>
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <__assert_func+0x30>)
 800634a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800634e:	9100      	str	r1, [sp, #0]
 8006350:	462b      	mov	r3, r5
 8006352:	4906      	ldr	r1, [pc, #24]	; (800636c <__assert_func+0x34>)
 8006354:	f000 f842 	bl	80063dc <fiprintf>
 8006358:	f000 f852 	bl	8006400 <abort>
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <__assert_func+0x38>)
 800635e:	461c      	mov	r4, r3
 8006360:	e7f3      	b.n	800634a <__assert_func+0x12>
 8006362:	bf00      	nop
 8006364:	20000078 	.word	0x20000078
 8006368:	08006bbe 	.word	0x08006bbe
 800636c:	08006bcb 	.word	0x08006bcb
 8006370:	08006bf9 	.word	0x08006bf9

08006374 <_calloc_r>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	fba1 5402 	umull	r5, r4, r1, r2
 800637a:	b934      	cbnz	r4, 800638a <_calloc_r+0x16>
 800637c:	4629      	mov	r1, r5
 800637e:	f7ff fb0f 	bl	80059a0 <_malloc_r>
 8006382:	4606      	mov	r6, r0
 8006384:	b928      	cbnz	r0, 8006392 <_calloc_r+0x1e>
 8006386:	4630      	mov	r0, r6
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	220c      	movs	r2, #12
 800638c:	2600      	movs	r6, #0
 800638e:	6002      	str	r2, [r0, #0]
 8006390:	e7f9      	b.n	8006386 <_calloc_r+0x12>
 8006392:	462a      	mov	r2, r5
 8006394:	4621      	mov	r1, r4
 8006396:	f7fe fb98 	bl	8004aca <memset>
 800639a:	e7f4      	b.n	8006386 <_calloc_r+0x12>

0800639c <__ascii_mbtowc>:
 800639c:	b082      	sub	sp, #8
 800639e:	b901      	cbnz	r1, 80063a2 <__ascii_mbtowc+0x6>
 80063a0:	a901      	add	r1, sp, #4
 80063a2:	b142      	cbz	r2, 80063b6 <__ascii_mbtowc+0x1a>
 80063a4:	b14b      	cbz	r3, 80063ba <__ascii_mbtowc+0x1e>
 80063a6:	7813      	ldrb	r3, [r2, #0]
 80063a8:	600b      	str	r3, [r1, #0]
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	1e10      	subs	r0, r2, #0
 80063ae:	bf18      	it	ne
 80063b0:	2001      	movne	r0, #1
 80063b2:	b002      	add	sp, #8
 80063b4:	4770      	bx	lr
 80063b6:	4610      	mov	r0, r2
 80063b8:	e7fb      	b.n	80063b2 <__ascii_mbtowc+0x16>
 80063ba:	f06f 0001 	mvn.w	r0, #1
 80063be:	e7f8      	b.n	80063b2 <__ascii_mbtowc+0x16>

080063c0 <__ascii_wctomb>:
 80063c0:	4603      	mov	r3, r0
 80063c2:	4608      	mov	r0, r1
 80063c4:	b141      	cbz	r1, 80063d8 <__ascii_wctomb+0x18>
 80063c6:	2aff      	cmp	r2, #255	; 0xff
 80063c8:	d904      	bls.n	80063d4 <__ascii_wctomb+0x14>
 80063ca:	228a      	movs	r2, #138	; 0x8a
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	4770      	bx	lr
 80063d4:	2001      	movs	r0, #1
 80063d6:	700a      	strb	r2, [r1, #0]
 80063d8:	4770      	bx	lr
	...

080063dc <fiprintf>:
 80063dc:	b40e      	push	{r1, r2, r3}
 80063de:	b503      	push	{r0, r1, lr}
 80063e0:	4601      	mov	r1, r0
 80063e2:	ab03      	add	r3, sp, #12
 80063e4:	4805      	ldr	r0, [pc, #20]	; (80063fc <fiprintf+0x20>)
 80063e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	f000 f835 	bl	800645c <_vfiprintf_r>
 80063f2:	b002      	add	sp, #8
 80063f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063f8:	b003      	add	sp, #12
 80063fa:	4770      	bx	lr
 80063fc:	20000078 	.word	0x20000078

08006400 <abort>:
 8006400:	2006      	movs	r0, #6
 8006402:	b508      	push	{r3, lr}
 8006404:	f000 fa02 	bl	800680c <raise>
 8006408:	2001      	movs	r0, #1
 800640a:	f7fb f93e 	bl	800168a <_exit>

0800640e <__sfputc_r>:
 800640e:	6893      	ldr	r3, [r2, #8]
 8006410:	b410      	push	{r4}
 8006412:	3b01      	subs	r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	6093      	str	r3, [r2, #8]
 8006418:	da07      	bge.n	800642a <__sfputc_r+0x1c>
 800641a:	6994      	ldr	r4, [r2, #24]
 800641c:	42a3      	cmp	r3, r4
 800641e:	db01      	blt.n	8006424 <__sfputc_r+0x16>
 8006420:	290a      	cmp	r1, #10
 8006422:	d102      	bne.n	800642a <__sfputc_r+0x1c>
 8006424:	bc10      	pop	{r4}
 8006426:	f000 b933 	b.w	8006690 <__swbuf_r>
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	1c58      	adds	r0, r3, #1
 800642e:	6010      	str	r0, [r2, #0]
 8006430:	7019      	strb	r1, [r3, #0]
 8006432:	4608      	mov	r0, r1
 8006434:	bc10      	pop	{r4}
 8006436:	4770      	bx	lr

08006438 <__sfputs_r>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	4614      	mov	r4, r2
 8006440:	18d5      	adds	r5, r2, r3
 8006442:	42ac      	cmp	r4, r5
 8006444:	d101      	bne.n	800644a <__sfputs_r+0x12>
 8006446:	2000      	movs	r0, #0
 8006448:	e007      	b.n	800645a <__sfputs_r+0x22>
 800644a:	463a      	mov	r2, r7
 800644c:	4630      	mov	r0, r6
 800644e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006452:	f7ff ffdc 	bl	800640e <__sfputc_r>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	d1f3      	bne.n	8006442 <__sfputs_r+0xa>
 800645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800645c <_vfiprintf_r>:
 800645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	460d      	mov	r5, r1
 8006462:	4614      	mov	r4, r2
 8006464:	4698      	mov	r8, r3
 8006466:	4606      	mov	r6, r0
 8006468:	b09d      	sub	sp, #116	; 0x74
 800646a:	b118      	cbz	r0, 8006474 <_vfiprintf_r+0x18>
 800646c:	6a03      	ldr	r3, [r0, #32]
 800646e:	b90b      	cbnz	r3, 8006474 <_vfiprintf_r+0x18>
 8006470:	f7fe fab2 	bl	80049d8 <__sinit>
 8006474:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006476:	07d9      	lsls	r1, r3, #31
 8006478:	d405      	bmi.n	8006486 <_vfiprintf_r+0x2a>
 800647a:	89ab      	ldrh	r3, [r5, #12]
 800647c:	059a      	lsls	r2, r3, #22
 800647e:	d402      	bmi.n	8006486 <_vfiprintf_r+0x2a>
 8006480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006482:	f7fe fba0 	bl	8004bc6 <__retarget_lock_acquire_recursive>
 8006486:	89ab      	ldrh	r3, [r5, #12]
 8006488:	071b      	lsls	r3, r3, #28
 800648a:	d501      	bpl.n	8006490 <_vfiprintf_r+0x34>
 800648c:	692b      	ldr	r3, [r5, #16]
 800648e:	b99b      	cbnz	r3, 80064b8 <_vfiprintf_r+0x5c>
 8006490:	4629      	mov	r1, r5
 8006492:	4630      	mov	r0, r6
 8006494:	f000 f93a 	bl	800670c <__swsetup_r>
 8006498:	b170      	cbz	r0, 80064b8 <_vfiprintf_r+0x5c>
 800649a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800649c:	07dc      	lsls	r4, r3, #31
 800649e:	d504      	bpl.n	80064aa <_vfiprintf_r+0x4e>
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	b01d      	add	sp, #116	; 0x74
 80064a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	0598      	lsls	r0, r3, #22
 80064ae:	d4f7      	bmi.n	80064a0 <_vfiprintf_r+0x44>
 80064b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b2:	f7fe fb89 	bl	8004bc8 <__retarget_lock_release_recursive>
 80064b6:	e7f3      	b.n	80064a0 <_vfiprintf_r+0x44>
 80064b8:	2300      	movs	r3, #0
 80064ba:	9309      	str	r3, [sp, #36]	; 0x24
 80064bc:	2320      	movs	r3, #32
 80064be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c2:	2330      	movs	r3, #48	; 0x30
 80064c4:	f04f 0901 	mov.w	r9, #1
 80064c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800667c <_vfiprintf_r+0x220>
 80064d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d4:	4623      	mov	r3, r4
 80064d6:	469a      	mov	sl, r3
 80064d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064dc:	b10a      	cbz	r2, 80064e2 <_vfiprintf_r+0x86>
 80064de:	2a25      	cmp	r2, #37	; 0x25
 80064e0:	d1f9      	bne.n	80064d6 <_vfiprintf_r+0x7a>
 80064e2:	ebba 0b04 	subs.w	fp, sl, r4
 80064e6:	d00b      	beq.n	8006500 <_vfiprintf_r+0xa4>
 80064e8:	465b      	mov	r3, fp
 80064ea:	4622      	mov	r2, r4
 80064ec:	4629      	mov	r1, r5
 80064ee:	4630      	mov	r0, r6
 80064f0:	f7ff ffa2 	bl	8006438 <__sfputs_r>
 80064f4:	3001      	adds	r0, #1
 80064f6:	f000 80a9 	beq.w	800664c <_vfiprintf_r+0x1f0>
 80064fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fc:	445a      	add	r2, fp
 80064fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006500:	f89a 3000 	ldrb.w	r3, [sl]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80a1 	beq.w	800664c <_vfiprintf_r+0x1f0>
 800650a:	2300      	movs	r3, #0
 800650c:	f04f 32ff 	mov.w	r2, #4294967295
 8006510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006514:	f10a 0a01 	add.w	sl, sl, #1
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	9307      	str	r3, [sp, #28]
 800651c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006520:	931a      	str	r3, [sp, #104]	; 0x68
 8006522:	4654      	mov	r4, sl
 8006524:	2205      	movs	r2, #5
 8006526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652a:	4854      	ldr	r0, [pc, #336]	; (800667c <_vfiprintf_r+0x220>)
 800652c:	f7fe fb4d 	bl	8004bca <memchr>
 8006530:	9a04      	ldr	r2, [sp, #16]
 8006532:	b9d8      	cbnz	r0, 800656c <_vfiprintf_r+0x110>
 8006534:	06d1      	lsls	r1, r2, #27
 8006536:	bf44      	itt	mi
 8006538:	2320      	movmi	r3, #32
 800653a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800653e:	0713      	lsls	r3, r2, #28
 8006540:	bf44      	itt	mi
 8006542:	232b      	movmi	r3, #43	; 0x2b
 8006544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006548:	f89a 3000 	ldrb.w	r3, [sl]
 800654c:	2b2a      	cmp	r3, #42	; 0x2a
 800654e:	d015      	beq.n	800657c <_vfiprintf_r+0x120>
 8006550:	4654      	mov	r4, sl
 8006552:	2000      	movs	r0, #0
 8006554:	f04f 0c0a 	mov.w	ip, #10
 8006558:	9a07      	ldr	r2, [sp, #28]
 800655a:	4621      	mov	r1, r4
 800655c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006560:	3b30      	subs	r3, #48	; 0x30
 8006562:	2b09      	cmp	r3, #9
 8006564:	d94d      	bls.n	8006602 <_vfiprintf_r+0x1a6>
 8006566:	b1b0      	cbz	r0, 8006596 <_vfiprintf_r+0x13a>
 8006568:	9207      	str	r2, [sp, #28]
 800656a:	e014      	b.n	8006596 <_vfiprintf_r+0x13a>
 800656c:	eba0 0308 	sub.w	r3, r0, r8
 8006570:	fa09 f303 	lsl.w	r3, r9, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	46a2      	mov	sl, r4
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	e7d2      	b.n	8006522 <_vfiprintf_r+0xc6>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	1d19      	adds	r1, r3, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	9103      	str	r1, [sp, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfbb      	ittet	lt
 8006588:	425b      	neglt	r3, r3
 800658a:	f042 0202 	orrlt.w	r2, r2, #2
 800658e:	9307      	strge	r3, [sp, #28]
 8006590:	9307      	strlt	r3, [sp, #28]
 8006592:	bfb8      	it	lt
 8006594:	9204      	strlt	r2, [sp, #16]
 8006596:	7823      	ldrb	r3, [r4, #0]
 8006598:	2b2e      	cmp	r3, #46	; 0x2e
 800659a:	d10c      	bne.n	80065b6 <_vfiprintf_r+0x15a>
 800659c:	7863      	ldrb	r3, [r4, #1]
 800659e:	2b2a      	cmp	r3, #42	; 0x2a
 80065a0:	d134      	bne.n	800660c <_vfiprintf_r+0x1b0>
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	3402      	adds	r4, #2
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	9203      	str	r2, [sp, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb8      	it	lt
 80065b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b4:	9305      	str	r3, [sp, #20]
 80065b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006680 <_vfiprintf_r+0x224>
 80065ba:	2203      	movs	r2, #3
 80065bc:	4650      	mov	r0, sl
 80065be:	7821      	ldrb	r1, [r4, #0]
 80065c0:	f7fe fb03 	bl	8004bca <memchr>
 80065c4:	b138      	cbz	r0, 80065d6 <_vfiprintf_r+0x17a>
 80065c6:	2240      	movs	r2, #64	; 0x40
 80065c8:	9b04      	ldr	r3, [sp, #16]
 80065ca:	eba0 000a 	sub.w	r0, r0, sl
 80065ce:	4082      	lsls	r2, r0
 80065d0:	4313      	orrs	r3, r2
 80065d2:	3401      	adds	r4, #1
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065da:	2206      	movs	r2, #6
 80065dc:	4829      	ldr	r0, [pc, #164]	; (8006684 <_vfiprintf_r+0x228>)
 80065de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e2:	f7fe faf2 	bl	8004bca <memchr>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d03f      	beq.n	800666a <_vfiprintf_r+0x20e>
 80065ea:	4b27      	ldr	r3, [pc, #156]	; (8006688 <_vfiprintf_r+0x22c>)
 80065ec:	bb1b      	cbnz	r3, 8006636 <_vfiprintf_r+0x1da>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	f023 0307 	bic.w	r3, r3, #7
 80065f6:	3308      	adds	r3, #8
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fc:	443b      	add	r3, r7
 80065fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006600:	e768      	b.n	80064d4 <_vfiprintf_r+0x78>
 8006602:	460c      	mov	r4, r1
 8006604:	2001      	movs	r0, #1
 8006606:	fb0c 3202 	mla	r2, ip, r2, r3
 800660a:	e7a6      	b.n	800655a <_vfiprintf_r+0xfe>
 800660c:	2300      	movs	r3, #0
 800660e:	f04f 0c0a 	mov.w	ip, #10
 8006612:	4619      	mov	r1, r3
 8006614:	3401      	adds	r4, #1
 8006616:	9305      	str	r3, [sp, #20]
 8006618:	4620      	mov	r0, r4
 800661a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800661e:	3a30      	subs	r2, #48	; 0x30
 8006620:	2a09      	cmp	r2, #9
 8006622:	d903      	bls.n	800662c <_vfiprintf_r+0x1d0>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0c6      	beq.n	80065b6 <_vfiprintf_r+0x15a>
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	e7c4      	b.n	80065b6 <_vfiprintf_r+0x15a>
 800662c:	4604      	mov	r4, r0
 800662e:	2301      	movs	r3, #1
 8006630:	fb0c 2101 	mla	r1, ip, r1, r2
 8006634:	e7f0      	b.n	8006618 <_vfiprintf_r+0x1bc>
 8006636:	ab03      	add	r3, sp, #12
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	462a      	mov	r2, r5
 800663c:	4630      	mov	r0, r6
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <_vfiprintf_r+0x230>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	f7fd fd7b 	bl	800413c <_printf_float>
 8006646:	4607      	mov	r7, r0
 8006648:	1c78      	adds	r0, r7, #1
 800664a:	d1d6      	bne.n	80065fa <_vfiprintf_r+0x19e>
 800664c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d405      	bmi.n	800665e <_vfiprintf_r+0x202>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d402      	bmi.n	800665e <_vfiprintf_r+0x202>
 8006658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800665a:	f7fe fab5 	bl	8004bc8 <__retarget_lock_release_recursive>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	065b      	lsls	r3, r3, #25
 8006662:	f53f af1d 	bmi.w	80064a0 <_vfiprintf_r+0x44>
 8006666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006668:	e71c      	b.n	80064a4 <_vfiprintf_r+0x48>
 800666a:	ab03      	add	r3, sp, #12
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	462a      	mov	r2, r5
 8006670:	4630      	mov	r0, r6
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <_vfiprintf_r+0x230>)
 8006674:	a904      	add	r1, sp, #16
 8006676:	f7fe f801 	bl	800467c <_printf_i>
 800667a:	e7e4      	b.n	8006646 <_vfiprintf_r+0x1ea>
 800667c:	08006cfb 	.word	0x08006cfb
 8006680:	08006d01 	.word	0x08006d01
 8006684:	08006d05 	.word	0x08006d05
 8006688:	0800413d 	.word	0x0800413d
 800668c:	08006439 	.word	0x08006439

08006690 <__swbuf_r>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	460e      	mov	r6, r1
 8006694:	4614      	mov	r4, r2
 8006696:	4605      	mov	r5, r0
 8006698:	b118      	cbz	r0, 80066a2 <__swbuf_r+0x12>
 800669a:	6a03      	ldr	r3, [r0, #32]
 800669c:	b90b      	cbnz	r3, 80066a2 <__swbuf_r+0x12>
 800669e:	f7fe f99b 	bl	80049d8 <__sinit>
 80066a2:	69a3      	ldr	r3, [r4, #24]
 80066a4:	60a3      	str	r3, [r4, #8]
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	071a      	lsls	r2, r3, #28
 80066aa:	d525      	bpl.n	80066f8 <__swbuf_r+0x68>
 80066ac:	6923      	ldr	r3, [r4, #16]
 80066ae:	b31b      	cbz	r3, 80066f8 <__swbuf_r+0x68>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	6922      	ldr	r2, [r4, #16]
 80066b4:	b2f6      	uxtb	r6, r6
 80066b6:	1a98      	subs	r0, r3, r2
 80066b8:	6963      	ldr	r3, [r4, #20]
 80066ba:	4637      	mov	r7, r6
 80066bc:	4283      	cmp	r3, r0
 80066be:	dc04      	bgt.n	80066ca <__swbuf_r+0x3a>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f7ff fdf2 	bl	80062ac <_fflush_r>
 80066c8:	b9e0      	cbnz	r0, 8006704 <__swbuf_r+0x74>
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	60a3      	str	r3, [r4, #8]
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	6022      	str	r2, [r4, #0]
 80066d6:	701e      	strb	r6, [r3, #0]
 80066d8:	6962      	ldr	r2, [r4, #20]
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	429a      	cmp	r2, r3
 80066de:	d004      	beq.n	80066ea <__swbuf_r+0x5a>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	07db      	lsls	r3, r3, #31
 80066e4:	d506      	bpl.n	80066f4 <__swbuf_r+0x64>
 80066e6:	2e0a      	cmp	r6, #10
 80066e8:	d104      	bne.n	80066f4 <__swbuf_r+0x64>
 80066ea:	4621      	mov	r1, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7ff fddd 	bl	80062ac <_fflush_r>
 80066f2:	b938      	cbnz	r0, 8006704 <__swbuf_r+0x74>
 80066f4:	4638      	mov	r0, r7
 80066f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 f806 	bl	800670c <__swsetup_r>
 8006700:	2800      	cmp	r0, #0
 8006702:	d0d5      	beq.n	80066b0 <__swbuf_r+0x20>
 8006704:	f04f 37ff 	mov.w	r7, #4294967295
 8006708:	e7f4      	b.n	80066f4 <__swbuf_r+0x64>
	...

0800670c <__swsetup_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4b2a      	ldr	r3, [pc, #168]	; (80067b8 <__swsetup_r+0xac>)
 8006710:	4605      	mov	r5, r0
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	460c      	mov	r4, r1
 8006716:	b118      	cbz	r0, 8006720 <__swsetup_r+0x14>
 8006718:	6a03      	ldr	r3, [r0, #32]
 800671a:	b90b      	cbnz	r3, 8006720 <__swsetup_r+0x14>
 800671c:	f7fe f95c 	bl	80049d8 <__sinit>
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006726:	0718      	lsls	r0, r3, #28
 8006728:	d422      	bmi.n	8006770 <__swsetup_r+0x64>
 800672a:	06d9      	lsls	r1, r3, #27
 800672c:	d407      	bmi.n	800673e <__swsetup_r+0x32>
 800672e:	2309      	movs	r3, #9
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	e034      	b.n	80067a8 <__swsetup_r+0x9c>
 800673e:	0758      	lsls	r0, r3, #29
 8006740:	d512      	bpl.n	8006768 <__swsetup_r+0x5c>
 8006742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006744:	b141      	cbz	r1, 8006758 <__swsetup_r+0x4c>
 8006746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800674a:	4299      	cmp	r1, r3
 800674c:	d002      	beq.n	8006754 <__swsetup_r+0x48>
 800674e:	4628      	mov	r0, r5
 8006750:	f7ff f8b6 	bl	80058c0 <_free_r>
 8006754:	2300      	movs	r3, #0
 8006756:	6363      	str	r3, [r4, #52]	; 0x34
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	2300      	movs	r3, #0
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0308 	orr.w	r3, r3, #8
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	b94b      	cbnz	r3, 8006788 <__swsetup_r+0x7c>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800677a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677e:	d003      	beq.n	8006788 <__swsetup_r+0x7c>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f883 	bl	800688e <__smakebuf_r>
 8006788:	89a0      	ldrh	r0, [r4, #12]
 800678a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800678e:	f010 0301 	ands.w	r3, r0, #1
 8006792:	d00a      	beq.n	80067aa <__swsetup_r+0x9e>
 8006794:	2300      	movs	r3, #0
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	425b      	negs	r3, r3
 800679c:	61a3      	str	r3, [r4, #24]
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	b943      	cbnz	r3, 80067b4 <__swsetup_r+0xa8>
 80067a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067a6:	d1c4      	bne.n	8006732 <__swsetup_r+0x26>
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	0781      	lsls	r1, r0, #30
 80067ac:	bf58      	it	pl
 80067ae:	6963      	ldrpl	r3, [r4, #20]
 80067b0:	60a3      	str	r3, [r4, #8]
 80067b2:	e7f4      	b.n	800679e <__swsetup_r+0x92>
 80067b4:	2000      	movs	r0, #0
 80067b6:	e7f7      	b.n	80067a8 <__swsetup_r+0x9c>
 80067b8:	20000078 	.word	0x20000078

080067bc <_raise_r>:
 80067bc:	291f      	cmp	r1, #31
 80067be:	b538      	push	{r3, r4, r5, lr}
 80067c0:	4604      	mov	r4, r0
 80067c2:	460d      	mov	r5, r1
 80067c4:	d904      	bls.n	80067d0 <_raise_r+0x14>
 80067c6:	2316      	movs	r3, #22
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	f04f 30ff 	mov.w	r0, #4294967295
 80067ce:	bd38      	pop	{r3, r4, r5, pc}
 80067d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80067d2:	b112      	cbz	r2, 80067da <_raise_r+0x1e>
 80067d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067d8:	b94b      	cbnz	r3, 80067ee <_raise_r+0x32>
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 f830 	bl	8006840 <_getpid_r>
 80067e0:	462a      	mov	r2, r5
 80067e2:	4601      	mov	r1, r0
 80067e4:	4620      	mov	r0, r4
 80067e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ea:	f000 b817 	b.w	800681c <_kill_r>
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d00a      	beq.n	8006808 <_raise_r+0x4c>
 80067f2:	1c59      	adds	r1, r3, #1
 80067f4:	d103      	bne.n	80067fe <_raise_r+0x42>
 80067f6:	2316      	movs	r3, #22
 80067f8:	6003      	str	r3, [r0, #0]
 80067fa:	2001      	movs	r0, #1
 80067fc:	e7e7      	b.n	80067ce <_raise_r+0x12>
 80067fe:	2400      	movs	r4, #0
 8006800:	4628      	mov	r0, r5
 8006802:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006806:	4798      	blx	r3
 8006808:	2000      	movs	r0, #0
 800680a:	e7e0      	b.n	80067ce <_raise_r+0x12>

0800680c <raise>:
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <raise+0xc>)
 800680e:	4601      	mov	r1, r0
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f7ff bfd3 	b.w	80067bc <_raise_r>
 8006816:	bf00      	nop
 8006818:	20000078 	.word	0x20000078

0800681c <_kill_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	2300      	movs	r3, #0
 8006820:	4d06      	ldr	r5, [pc, #24]	; (800683c <_kill_r+0x20>)
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	f7fa ff1e 	bl	800166a <_kill>
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	d102      	bne.n	8006838 <_kill_r+0x1c>
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	b103      	cbz	r3, 8006838 <_kill_r+0x1c>
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	bd38      	pop	{r3, r4, r5, pc}
 800683a:	bf00      	nop
 800683c:	200004b4 	.word	0x200004b4

08006840 <_getpid_r>:
 8006840:	f7fa bf0c 	b.w	800165c <_getpid>

08006844 <__swhatbuf_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	4615      	mov	r5, r2
 800684e:	2900      	cmp	r1, #0
 8006850:	461e      	mov	r6, r3
 8006852:	b096      	sub	sp, #88	; 0x58
 8006854:	da0c      	bge.n	8006870 <__swhatbuf_r+0x2c>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	2100      	movs	r1, #0
 800685a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800685e:	bf0c      	ite	eq
 8006860:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006864:	2340      	movne	r3, #64	; 0x40
 8006866:	2000      	movs	r0, #0
 8006868:	6031      	str	r1, [r6, #0]
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	b016      	add	sp, #88	; 0x58
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	466a      	mov	r2, sp
 8006872:	f000 f849 	bl	8006908 <_fstat_r>
 8006876:	2800      	cmp	r0, #0
 8006878:	dbed      	blt.n	8006856 <__swhatbuf_r+0x12>
 800687a:	9901      	ldr	r1, [sp, #4]
 800687c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006880:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006884:	4259      	negs	r1, r3
 8006886:	4159      	adcs	r1, r3
 8006888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688c:	e7eb      	b.n	8006866 <__swhatbuf_r+0x22>

0800688e <__smakebuf_r>:
 800688e:	898b      	ldrh	r3, [r1, #12]
 8006890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006892:	079d      	lsls	r5, r3, #30
 8006894:	4606      	mov	r6, r0
 8006896:	460c      	mov	r4, r1
 8006898:	d507      	bpl.n	80068aa <__smakebuf_r+0x1c>
 800689a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	2301      	movs	r3, #1
 80068a4:	6163      	str	r3, [r4, #20]
 80068a6:	b002      	add	sp, #8
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	466a      	mov	r2, sp
 80068ac:	ab01      	add	r3, sp, #4
 80068ae:	f7ff ffc9 	bl	8006844 <__swhatbuf_r>
 80068b2:	9900      	ldr	r1, [sp, #0]
 80068b4:	4605      	mov	r5, r0
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff f872 	bl	80059a0 <_malloc_r>
 80068bc:	b948      	cbnz	r0, 80068d2 <__smakebuf_r+0x44>
 80068be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c2:	059a      	lsls	r2, r3, #22
 80068c4:	d4ef      	bmi.n	80068a6 <__smakebuf_r+0x18>
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	e7e3      	b.n	800689a <__smakebuf_r+0xc>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	6020      	str	r0, [r4, #0]
 80068d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	6120      	str	r0, [r4, #16]
 80068e0:	6163      	str	r3, [r4, #20]
 80068e2:	9b01      	ldr	r3, [sp, #4]
 80068e4:	b15b      	cbz	r3, 80068fe <__smakebuf_r+0x70>
 80068e6:	4630      	mov	r0, r6
 80068e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ec:	f000 f81e 	bl	800692c <_isatty_r>
 80068f0:	b128      	cbz	r0, 80068fe <__smakebuf_r+0x70>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f023 0303 	bic.w	r3, r3, #3
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	81a3      	strh	r3, [r4, #12]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	431d      	orrs	r5, r3
 8006902:	81a5      	strh	r5, [r4, #12]
 8006904:	e7cf      	b.n	80068a6 <__smakebuf_r+0x18>
	...

08006908 <_fstat_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	2300      	movs	r3, #0
 800690c:	4d06      	ldr	r5, [pc, #24]	; (8006928 <_fstat_r+0x20>)
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	f7fa ff06 	bl	8001726 <_fstat>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d102      	bne.n	8006924 <_fstat_r+0x1c>
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	b103      	cbz	r3, 8006924 <_fstat_r+0x1c>
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	bf00      	nop
 8006928:	200004b4 	.word	0x200004b4

0800692c <_isatty_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	2300      	movs	r3, #0
 8006930:	4d05      	ldr	r5, [pc, #20]	; (8006948 <_isatty_r+0x1c>)
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa ff04 	bl	8001744 <_isatty>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_isatty_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_isatty_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	200004b4 	.word	0x200004b4

0800694c <_init>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr

08006958 <_fini>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	bf00      	nop
 800695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695e:	bc08      	pop	{r3}
 8006960:	469e      	mov	lr, r3
 8006962:	4770      	bx	lr
